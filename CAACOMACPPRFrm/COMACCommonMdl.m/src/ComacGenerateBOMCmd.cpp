//===================================================================
// COPYRIGHT  2020/09/27
//===================================================================
// ComacGenerateBOMCmd.cpp
// Header definition of class ComacGenerateBOMCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/27 Creation: Code generated by the 3DS wizard
//===================================================================
#include "fengyHelper.h"
#include "ComacGenerateBOMCmd.h"
#include "CATCreateExternalObject.h"
CATCreateClass(ComacGenerateBOMCmd);

#include "CATDlgEditor.h"
//#include "CATDlgCombo.h"
#include "CATApplicationFrame.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

//from edu CAAPPRProcessItf.edu\CAAFmiProcessOutput.m\src\CAAFmiProcessOutput.cpp

// DELPPRProcessItf Framework
#include "DELPPRProcessAuthAccess.h"
#include "DELIPPRProcessAuth.h"
#include "DELPPRProcessNavAccess.h"
#include "DELIPPRProcessNav.h"
#include "DELIPPRProcessOutputNav.h"
#include "DELIPPRProcessOutputAuth.h"
//#include "CATIPrdOccurrenceMngt.h"
//#include "CATPrdGetOccurrenceMngt.h" 

//DELPPRProcessItf
#include "DELIPPRProcessOccAuth.h"
//DELPPRSystemItf
#include "DELIPPRSystemOccAuth.h"


// ProductStructureUseItf  Framework
#include "CATIPrdReferenceFactory.h"
#include "CATPrdFactory.h"
#include "CATIPrd3DPartReferenceFactory.h"
// ProductStructureInterfaces Framework
#include "CATIPLMProducts.h"
//ObjectModelerBase Framework
#include "CATOmbLifeCycleRootsBag.h"

// ProductStructureInterfaces Framework
#include "CATIPrdObject.h"
#include "CATIPLMProducts.h"
#include "CATIPrdIterator.h"
#include "CATIPrdOccurrenceMngt.h"
#include "CATPrdGetOccurrenceMngt.h"

// CATMecModUseItf Framework
#include "CATIMmiUseCreateImport.h"         // To copy mechanical feature
#include "CATMmiUseServicesFactory.h"

#include "DataCommonProtocolServices.h"
#include "CATIUseEntity.h"
#include "CATLISTV_CATIMmiMechanicalFeature.h"

// CATMecModLiveUseItf Framework
#include "CATIMmiMechanicalFeature.h"
#include "CATIBodyRequest.h"
#include "CATIPartRequest.h"
#include "CATIMmiViewServices.h"
#include "CATMmiUseServicesFactory.h"
#include "CATIMmiGeometricalSet.h"

//DataCommonProtocolUse Framework
#include "DataCommonProtocolCCPServices.h"

// VB 实现MainBody 赋值
#include "CATIABody.h"
#include "CATIAPart.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : constructor
//-----------------------------------------------------------------------------
ComacGenerateBOMCmd::ComacGenerateBOMCmd() :
	CATStateCommand("ComacGenerateBOMCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new ComacGenerateBOMDlg(pWnd, "MBOM ManufacturingPart");
	_Panel->Build();
	_Panel->SetFather(this);

	//pProvidePartRef = NULL;
	//pProvidePartOcc = NULL;
	//pNewManuPartOcc = NULL;

	//pMARootRef = NULL;
	//pMARootOcc = NULL;

	pMASelectedRef = NULL;
	pMASelectedOcc = NULL;

	//pMAFatherRef = NULL;
	//pMAFatherOcc = NULL;
	//
}

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : destructor
//-----------------------------------------------------------------------------

ComacGenerateBOMCmd::~ComacGenerateBOMCmd()
{
	//
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	//pProvidePartRef = NULL;
	//pProvidePartOcc = NULL;
	//pMARootRef = NULL;
	//pMARootOcc = NULL;
	pMASelectedRef = NULL;
	pMASelectedOcc = NULL;
	//
}


void ComacGenerateBOMCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
	// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

																			  // Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&ComacGenerateBOMCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&ComacGenerateBOMCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&ComacGenerateBOMCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&ComacGenerateBOMCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&ComacGenerateBOMCmd::ElementSelection, NULL, NULL, (void*)1));


	//// 初始化写入 dlg
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_PartCodeEditor), "CMMBOMAssemDlg", "PartCode.Range", ",");
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ManufactureLineEditor), "CMMBOMAssemDlg", "ManufactureLine.Range", ",");
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ProcessUnitEditor), "CMMBOMAssemDlg", "ProcessUnit.Range", ",");

	//// 添了两处  radio 等待
	//_pRadioBtnCopy = _Panel->GetRadioButton(ID_DesignCodeCopy);
	//AddAnalyseNotificationCB(_pRadioBtnCopy, _pRadioBtnCopy->GetRadBModifyNotification(),
	//	(CATCommandMethod)&ComacGenerateBOMCmd::ChangeRadioNotifyCopy, NULL);

	//_pRadioBtnCopy->SetState(CATDlgCheck);

	//_pRadioBtnInput = _Panel->GetRadioButton(ID_DesignCodeInput);
	//AddAnalyseNotificationCB(_pRadioBtnInput, _pRadioBtnInput->GetRadBModifyNotification(),
	//	(CATCommandMethod)&ComacGenerateBOMCmd::ChangeRadioNotifyInput, NULL);

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}



//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean ComacGenerateBOMCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

//CATBoolean ComacGenerateBOMCmd::ChangeRadioNotifyCopy(void *data)
//{
//	// TODO: Define the action associated with the transition
//	// ------------------------------------------------------
//	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_SelectMAEditor);
//	pDesignCodeEditor->SetReadOnly(TRUE);
//	return TRUE;
//}

//CATBoolean ComacGenerateBOMCmd::ChangeRadioNotifyInput(void *data)
//{
//	// TODO: Define the action associated with the transition
//	// ------------------------------------------------------
//	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_SelectMAEditor);
//	pDesignCodeEditor->SetReadOnly(FALSE);
//	return TRUE;
//}

CATBoolean ComacGenerateBOMCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;
			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void ComacGenerateBOMCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	cout << "sSelectObjectType:" << sSelectObjectType << endl;

	if (sSelectObjectType == TYPE_Product) //
	{
		pProductFatherOcc = _pSelectedOccurrence;
		pProductFatherRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_SelectCADEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pProductFatherRef, "V_Name"));
	}

	if (sSelectObjectType == TYPE_MBOMAssembly) //
	{
		pMASelectedOcc = _pSelectedOccurrence;
		pMASelectedRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_SelectMAEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pMASelectedRef, "V_Name"));
	}

	
}

CATBoolean ComacGenerateBOMCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	// 主函数： MBOM 写入
	CrateMbomStructure();


	return FALSE;
}


CATBoolean ComacGenerateBOMCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	// 主函数： MBOM 写入
	CrateMbomStructure();

	return TRUE;
}

CATBoolean ComacGenerateBOMCmd::CheckSelectObject()
{
	if ( pProductFatherOcc == NULL || pMASelectedOcc == NULL)
	{
		fengyHelper::Notify("请选择节点！");
		return FALSE;
	}

	return TRUE;
}
CATBoolean ComacGenerateBOMCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

//   fengy 2021.12.9  创建协作BOM 规划 
HRESULT ComacGenerateBOMCmd::CrateMbomStructure()
{
	HRESULT rc = E_FAIL;
	//fengyHelper::Notify("框架搭建OK！\nNext:\n1-Occ明确；\n 2- CrateMbomStructure 逻辑编写！");

	CATIPLMNavOccurrence *pMARootOcc = CUSCAAUtilService::GetRootOcc(pMASelectedOcc);
	if (!pMARootOcc)
	{
		cout << "==== FAILED  ==== >> GetRootOcc ! " << endl;
		return rc ;
	}
	cout << "==== OK ==== >> GetRootOcc ! " << endl;

	// 1 获取MA的ref 及其下面的 所有子集节点inst，含有
	// 2 找到CAD Occ 作为父级，添加 asm 结构！

	rc = BrowseMARef2CADTree(pMASelectedOcc, pMARootOcc, 0, pProductFatherRef);
	if (FAILED(rc))
	{
		cout << "==== FAILED  ==== >> BrowseMARef2CADTree ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> BrowseMARef2CADTree ! " << endl;

	return  rc;
}

// fengy 2021.12.10 添加空的product 装配节点
HRESULT ComacGenerateBOMCmd::AddOneBlankProduct(CATIPLMNavReference * ipProductFatherRef, CATUnicodeString iStrPartNo, CATUnicodeString iStrInstName, CATBaseUnknown *& opPrdInstanceBU)
{
	HRESULT rc = E_FAIL;
	cout << "# iStrPartNo: " << iStrPartNo << endl;
	cout << "# iStrInstName: " << iStrInstName << endl;

	if( (!ipProductFatherRef) || (iStrPartNo == CATUnicodeString("")) )
	{
		cout << "==== FAILED  ==== >> AddOneBlankProduct 输入为空 ! " << endl;
		return rc;
	}

	CATIPLMProducts* pCADFatRef = NULL;
	ipProductFatherRef->QueryInterface(IID_CATIPLMProducts, (void**)&pCADFatRef);  	// ipProductRef 所在

	// 插入 空的 
	//CATBaseUnknown * opPrdInstanceBU = NULL;
	CATIPLMProducts* pCADChildRef = NULL;

	CATIPrdReferenceFactory* pPrdFactory = NULL;
	rc = CATPrdFactory::CreatePrdFactory(IID_CATIPrdReferenceFactory, (void**)&pPrdFactory);
	if (FAILED(rc) || (NULL == pPrdFactory))
	{
		cout << "==== FAILED  ==== >> CreatePrdFactory  ! " << endl;
		return rc;
	}

	CATIType_var spRefType;
	CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
	CATLISTV(CATICkeParm_var) EmptyAttributeList;
	rc = pPrdFactory->CreatePrdReference(spRefType, EmptyAttributeList, pCADChildRef);
	if (FAILED(rc) || (NULL == pCADChildRef))
	{
		cout << "==== FAILED  ==== >> CreatePrdReference  ! " << endl;
		return rc;
	}

	rc = pCADFatRef->AddProduct(pCADChildRef, opPrdInstanceBU, IID_CATIPLMNavInstance);				// Add 生成inst！
	if (FAILED(rc) || (NULL == opPrdInstanceBU))
	{
		cout << "==== FAILED  ==== >> AddOneBlankProduct ::AddProduct KO! " << endl;
		return rc;
	}
	cout << " #CAD ref title 前: " << CUSCAAUtilService::GetObjectAttrValue(pCADChildRef, "V_Name") << endl;		// ref title
	CUSCAAUtilService::SetObjectAttrString(pCADChildRef, "V_Name", iStrPartNo);
	cout << "# new ref title 后:" << CUSCAAUtilService::GetObjectAttrValue(pCADChildRef, "V_Name") << endl;

	cout << " #CAD ins title 前: " << CUSCAAUtilService::GetObjectAttrValue(opPrdInstanceBU, "PLM_ExternalID") << endl;		// ins title
	CUSCAAUtilService::SetObjectAttrString(opPrdInstanceBU, "PLM_ExternalID", iStrInstName);
	cout << "# new ins title 后:" << CUSCAAUtilService::GetObjectAttrValue(opPrdInstanceBU, "PLM_ExternalID") << endl;

	return rc;
}


// fengy 2021.12.10 改写 CAAProductStructure.edu\CAAPstBrowsingProductModel.m\src\CAAPstBrowsingProductModel.cpp 
//  浏览maRef结构，添加到CAD的结构上复现！
HRESULT ComacGenerateBOMCmd::BrowseMARef2CADTree(CATIPLMNavOccurrence* ipMAOcc, CATIPLMNavOccurrence * iRootProcessOcc, int iDepth, CATIPLMNavReference * ipProductFatherRef )
{
	if  ((NULL == ipMAOcc) || (iRootProcessOcc == NULL))
		return E_INVALIDARG;

	// Seek the CATIPLMNavEntity* from ipiNavRef
	CATIPLMNavEntity* piNavEnt = NULL;
	HRESULT rc = E_FAIL;
	CATPLMCoreType coreType;
	CATListPtrCATIPLMNavEntity childrenList;

	// ===========================================================================================================
	// 5-0	: 替换成实际的动作！ 创建Tree结构！―― 要体现出结构！层级！
	// ===========================================================================================================
	//hr = PrintPLMComponent(piNavEnt, iAllAtributes, iDepth);			// 打印当前 ref' 的属性 externalID
	CATIPLMNavReference * pMARef;
	CATIPLMNavInstance  * pMAInst;
	rc = ipMAOcc->GetRelatedReference(pMARef);
	rc = ipMAOcc->GetRelatedInstance(pMAInst);

	CATUnicodeString sMARefTitle = CUSCAAUtilService::GetObjectAttrValue(pMARef, "V_Name");// ref title
	CATUnicodeString sMAInstTitle = CUSCAAUtilService::GetObjectAttrValue(pMAInst, "PLM_ExternalID");// ins title
	//cout << "# sMARefTitle: " << sMARefTitle << endl;
	//cout << "# sMAInstTitle: " << sMAInstTitle << endl;

	CATBaseUnknown * pPrdInstanceBU;
	rc = AddOneBlankProduct(ipProductFatherRef, sMARefTitle, sMAInstTitle, pPrdInstanceBU);
	if (FAILED(rc))
	{
		cout << "==== FAILED  ==== >> AddOneBlankProduct ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> AddOneBlankProduct ! " << endl;

	// ===========================================================================================================
	// 4-1	: Seek the Part Instances aggregated under the Current Reference
	// ===========================================================================================================
	coreType = PLMCoreInstance;
	rc = pMARef->ListChildren(childrenList, 1, &coreType);
	if (SUCCEEDED(rc))
	{
		for (int i = 0; i < iDepth; i++)
			cout << "	";
		cout << "the size of the instances aggregated under Ref is " << childrenList.Size() << endl;

		// ===========================================================================================================
		// 4-2	: For each Part Instances
		// ===========================================================================================================
		int j = 1;
		while (SUCCEEDED(rc) && (j <= childrenList.Size()))
		{
			CATIPLMNavEntity* piNavEntity = childrenList[j];
			if (NULL != piNavEntity)
			{
				// ===========================================================================================================
				// 4-2-0	: Print instance attributes
				// ===========================================================================================================
				//hr = PrintPLMComponent(piNavEntity, iAllAtributes, iDepth + 1);			// 打印当前 Instance' 的属性 externalID
				//if (S_OK == hr)
				//{
				// ===========================================================================================================
				// 4-2-1	: Seek the Part Reference corresponding to the current Part Instance
				// ===========================================================================================================

				// Seek the CATIPLMNavInstance* from CATIPLMNavEntity*
				CATIPLMNavInstance* piNavInst = NULL;
				rc = piNavEntity->QueryInterface(IID_CATIPLMNavInstance, (void **)&piNavInst);
				if (SUCCEEDED(rc))
				{
					// Retrieve the reference of the instance 
					CATIPLMNavReference* piNavRef1 = NULL;
					rc = piNavInst->GetReferenceInstanceOf(piNavRef1);	//搜索后的 层级：rootref - inst- ref -rep isnt -repref
					if (SUCCEEDED(rc) && (NULL != piNavRef1))
					{
						// ===========================================================================================================
						// 4-2-2	: Recursive call to BrowseMARef2CADTree with each of those Part References
						// ===========================================================================================================
						//cout << " 暂时不做递归 子集 : " << GetAliasName(piNavRef1) << endl;
						CATIPLMNavOccurrence_var spCurMAOcc = GetOccFromRef(iRootProcessOcc, piNavRef1);
						if (NULL_var == spCurMAOcc)
						{
							cout << "#  === FAILED ===> GetOccFromRef" << endl;
							return rc;
						}
						else
							cout << "#  === OK ===> GetOccFromRef" << endl;

						// 对上一级的 product做筛选
						CATIPLMNavReference* piPrdFatRef = NULL;

						CATIPLMNavReference* piPrdAddedRef = NULL;
						((CATIPLMNavInstance*)pPrdInstanceBU)->GetReferenceInstanceOf(piPrdAddedRef);
						if (!piPrdAddedRef)
							cout << "MA GetReferenceInstanceOf KO!" << endl;
						else
							cout << "MA GetReferenceInstanceOf OK!" << endl;

						// 判断当前MA下是否存在 子节点？
						coreType = PLMCoreInstance;
						CATListPtrCATIPLMNavEntity childrenList2;
						piNavRef1->ListChildren(childrenList2, 1, &coreType);
						cout << "#childrenList2.Size() : " << childrenList2.Size() << endl;
						if (childrenList2.Size() > 0)					// 当前MA下 有子MA
						{
							cout << "#含有下级节点" << endl;
							// 从当前一级CAD 获取上级CAD的Occ -ref
							// 法一 GetOccFromRef KO！    // ListRelatedOccurrences size 0

							//// 法二： 从instance 获取father
							//CATIPLMNavReference* piCADUpperRef = NULL;
							//rc = ((CATIPLMNavInstance*)pPrdInstanceBU)->GetFather(piCADUpperRef);		// 为什么上级节点都是 RongQi_SeatDS_Exercise-2 ？
							//if( FAILED(rc) || (NULL == piCADUpperRef))
							//{
							//	cout << "#  === FAILED ===> GetFather CADUpperRef" << endl;
							//	return rc;
							//}
							//else
							//	cout << "#  === OK ===> GetFather CADUpperRef" << endl;
							//cout << "  piCADUpperRef ref title: "<< CUSCAAUtilService::GetObjectAttrValue(piCADUpperRef, "V_Name") << endl;  // ref title

							//piPrdFatRef = piCADUpperRef;			// 获取上一级 的父级ref！
							piPrdFatRef = piPrdAddedRef;

						}

						else
						{
							cout<<"无下级节点"<<endl;
							piPrdFatRef = piPrdAddedRef;
						}

						rc = BrowseMARef2CADTree(spCurMAOcc, iRootProcessOcc, iDepth + 1 + 1, piPrdFatRef);

						if (SUCCEEDED(rc))
						{
							// Release piNavRef1 pointer
							if (NULL != piNavRef1)
							{
								piNavRef1->Release();
								piNavRef1 = NULL;
							}
						}
					}
					piNavInst->Release();
					piNavInst = NULL;

					//}
				}
				// ===========================================================================================================
				// 4-2-3	: Release the pointer in the childrenList
				// ===========================================================================================================
				piNavEntity->Release();
				piNavEntity = NULL;

			}
			j++;

		}// while loop ends				
		childrenList.RemoveAll();
	}

	return rc;
}

//fengy 2021.12.1 根据 ref \ contextFatherOcc 获取Occ 
CATIPLMNavOccurrence_var ComacGenerateBOMCmd::GetOccFromRef(CATIPLMNavOccurrence_var ispOccOnFarther, CATIPLMNavReference_var ispRef)
{
	if (ispOccOnFarther != NULL_var && ispRef != NULL_var)
	{
		//cout<<"在"<<GetObjTitle(spOccOnFarther)<<"下获取"<<GetObjTitle(spIns)<<"的Occ"<<endl;

		CATListPtrCATIPLMNavOccurrence listOccOnRef;
		ispRef->ListRelatedOccurrences(ispOccOnFarther, listOccOnRef);
		cout << "GetOccFromRef size:" << listOccOnRef.Size() << endl;

		if (listOccOnRef.Size() == 1)
		{
			return listOccOnRef[1];
		}
	}

	return NULL_var;
}
// 解决 BU toRef fengy 2021.11.18
CATIPLMNavReference_var  ComacGenerateBOMCmd::FromBUToRef(CATBaseUnknown * ipNewProdBU)			// BU 转到 ref，ko？
{
	CATIPLMNavReference_var ospNavRef;

	// 法一  貌似不推荐
	CATIPrdObject_var spPrdObject = ipNewProdBU;
	ReleasePtr(ipNewProdBU);

	if (NULL_var != spPrdObject)
	{
		CATIPLMNavReference* pNavRef = NULL;
		HRESULT rc = spPrdObject->GetReferenceObject((CATBaseUnknown*&)pNavRef, IID_CATIPLMNavReference);
		if (/*SUCCEEDED(rc) && */   NULL != pNavRef)
		{
			cout << "    # FromBUToRef 1111111111" << endl;
			ospNavRef = pNavRef;
			if (NULL_var != ospNavRef)
				cout << "    # FromBUToRef OK！" << endl;
			else
				cout << "    # FromBUToRef KO 3！" << endl;
		}
		else
			cout << "    # FromBUToRef KO1！" << endl;
	}
	else
		cout << "    # FromBUToRef KO2！" << endl;

	//// 法二
	//CATIPLMNavOccurrence *pNavOccOnSelObj = NULL;
	//HRESULT rc = ipNewProdBU->QueryInterface(IID_CATIPLMNavOccurrence, (void**)&pNavOccOnSelObj);

	//if (SUCCEEDED(rc))
	//{
	//	CATIPLMNavReference * pRef = NULL;
	//	pNavOccOnSelObj->GetRelatedReference(pRef);
	//	if (NULL != pRef)
	//	{
	//		ospNavRef = pRef;
	//		if (NULL_var != ospNavRef)
	//			cout << " GetRelatedReference OK! " << endl;
	//		else
	//			cout << "    # FromBUToRef KO 3！" << endl;
	//	}
	//	else
	//		cout << "    # FromBUToRef KO 1！" << endl;
	//}
	//else
	//	cout << "    # FromBUToRef KO 2！" << endl;

	return ospNavRef;
}



void ComacGenerateBOMCmd::DeleteFeature(CATBaseUnknown_var spObj)
{
	CATIUseEntity_var spUseEntity = spObj;
	if (NULL_var != spUseEntity)
	{
		DataCommonProtocolServices::Delete(spUseEntity);
		cout << " DeleteFeature : " << GetAliasName(spObj) << endl;
	}
}

void ComacGenerateBOMCmd::UpdateFeature(CATBaseUnknown_var spObj)
{
	CATIUseEntity_var spUseEntity = spObj;
	if (NULL_var != spUseEntity)
	{
		DataCommonProtocolServices::Update(spUseEntity);
	}
}

// ******************** 几个包  Start *********************

void ComacGenerateBOMCmd::ReleasePtr(CATBaseUnknown * piCBU)
{
	if (NULL != piCBU)
	{
		piCBU->Release();
		piCBU = NULL;
	}
}

int ComacGenerateBOMCmd::FindReference(CATOmbLifeCycleRootsBag & iLifeCycleBag,
	const CATAdpAttributeSet & iAttributeSet,
	CATIType * ipModelerType,
	const IID & iIID,
	void ** oppReference)
{
	HRESULT hr = E_FAIL;

	CATLISTP(CATAdpQueryResult) QueryResults;
	hr = CATAdpPLMQueryServices::GetElementsFromAttributes(ipModelerType, iAttributeSet, QueryResults);

	if (FAILED(hr)) return 1;

	// If several object match with this query we open only the first one.
	int NbResult = QueryResults.Size();
	if (1 <= NbResult)
	{
		CATAdpQueryResult * pQueryResult = QueryResults[1];
		if (NULL != pQueryResult)
		{
			CATIAdpPLMIdentificator * piPLMId = NULL;
			hr = pQueryResult->GetIdentifier(piPLMId);

			if (SUCCEEDED(hr) && NULL != piPLMId)
			{
				CATAdpOpener opener(iLifeCycleBag);			// 此处为何指定输入 lifebag？
				hr = opener.CompleteAndOpen(piPLMId, iIID, oppReference);
			}
			if (NULL != piPLMId)
			{
				piPLMId->Release();
				piPLMId = NULL;
			}
		}
		for (int ind = 1; ind <= NbResult; ++ind)		// 注意每处的释放！ 大程序会造成泄露 
		{
			CATAdpQueryResult * pQueryResult = QueryResults[ind];
			if (NULL != pQueryResult)
			{
				delete pQueryResult;
				pQueryResult = NULL;
			}
		}
	}
	else return 1;

	if (FAILED(hr)) return 1;

	return 0;
}

// from Process ref to Occ
HRESULT ComacGenerateBOMCmd::GetOccurrenceFromProcessReference(
	const CATIPLMNavReference_var & ihNavRef,
	CATIPLMNavOccurrence_var & ohNavOcc)
{
	DELIPPRProcessOccAuth* pProcessAuthService = getDELIPPRProcessOccAuth();
	DELIPPRProcessOccAuth_var hProcessOccAuth(pProcessAuthService);
	ReleasePtr(pProcessAuthService);
	if (hProcessOccAuth == NULL_var) return E_FAIL;

	CATIPLMNavOccurrence * pNavOcc = NULL;
	HRESULT rc = hProcessOccAuth->GetOrCreateRootOccurrence(ihNavRef, pNavOcc);
	ohNavOcc = pNavOcc;
	ReleasePtr(pNavOcc);
	return rc;
}


HRESULT ComacGenerateBOMCmd::CAAMmrGetPartFromProduct(CATIPLMNavInstance_var   spNavInstance, CATIPartRequest_var  & ospPartFromProduct)

{
	HRESULT rc = E_FAIL;

	if (NULL_var == spNavInstance) return E_FAIL;

	// Retrieve the reference of the current instance
	CATIPLMNavReference *pReferenceOfInstance = NULL;
	rc = spNavInstance->GetReferenceInstanceOf(pReferenceOfInstance);

	// Retrieve the first inst rep ref
	//	inst - ref - repInst(s) - RepRef - PrtCont - CATIMmiMechanicalFeature(prtPart)
	CATIPLMNavRepInstance * pNavRepInst = NULL;
	if (NULL != pReferenceOfInstance)
	{
		CATListPtrCATIPLMNavEntity ListNavEntity = NULL;
		CATPLMCoreType TypeRepInstance = PLMCoreRepInstance;
		pReferenceOfInstance->ListChildren(ListNavEntity, 1, &TypeRepInstance);

		if (ListNavEntity.Size() >= 1)
		{
			CATIPLMNavEntity *pCurrent = ListNavEntity[1];
			rc = pCurrent->QueryInterface(IID_CATIPLMNavRepInstance, (void**)& pNavRepInst);	// RepInst
		}
		for (int i = 1; i <= ListNavEntity.Size(); i++)
		{
			CATIPLMNavEntity *pCurrent = ListNavEntity[1];
			if (NULL != pCurrent)
			{
				pCurrent->Release(); pCurrent = NULL;
			}
		}
		pReferenceOfInstance->Release(); pReferenceOfInstance = NULL;
	}

	// Retrieve the reference of the first inst rep ref
	CATIPLMNavRepReference *pNavRepRef = NULL;
	if (NULL != pNavRepInst)
	{
		rc = pNavRepInst->GetRepReferenceInstanceOf(pNavRepRef);
		pNavRepInst->Release(); pNavRepInst = NULL;
	}

	// change the loading mode
	if (NULL != pNavRepRef)
	{
		CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
		rc = pNavRepRef->QueryInterface(IID_CATIPsiRepresentationLoadMode, (void **)&piRepLoadMode);

		if (SUCCEEDED(rc) && NULL != piRepLoadMode)
		{
			rc = piRepLoadMode->ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);
			piRepLoadMode->Release();
			piRepLoadMode = NULL;
		}
	}

	//Retrieve the applicative container
	CATIMmiPrtContainer * pContainer = NULL;
	if (SUCCEEDED(rc) && (NULL != pNavRepRef))
	{
		rc = pNavRepRef->RetrieveApplicativeContainer("CATPrtCont", IID_CATIMmiPrtContainer, (void **)&pContainer);
	}

	if (SUCCEEDED(rc) && (NULL != pContainer))
	{
		CATIMmiMechanicalFeature_var spMechFeatOnPart;
		rc = pContainer->GetMechanicalPart(spMechFeatOnPart);

		if (SUCCEEDED(rc) && (NULL_var != spMechFeatOnPart))
			ospPartFromProduct = spMechFeatOnPart;
	}

	if (NULL != pContainer)
	{
		pContainer->Release();  pContainer = NULL;
	}

	if (NULL != pNavRepRef)
	{
		pNavRepRef->Release(); pNavRepRef = NULL;
	}


	if (NULL_var == ospPartFromProduct)
		return E_FAIL;
	else return S_OK;

}

HRESULT ComacGenerateBOMCmd::CAAMmrGetGeometry(CATIPartRequest_var ispModelPart, const CATUnicodeString iInputName,
	CATBaseUnknown ** oInput)
{
	HRESULT rc = E_FAIL;
	CATBoolean found = FALSE;

	if ((NULL != oInput) && (NULL_var != ispModelPart))
	{
		*oInput = NULL;

		// Retrieves all root bodies , all GS and all root OGS ( it does not retrieve ALL bodies below the Part)
		CATListValCATBaseUnknown_var pListBodies;
		rc = ispModelPart->GetAllBodies("", pListBodies);
		if (SUCCEEDED(rc))
		{
			int iBodies = 1;
			int nbbodies = pListBodies.Size();

			while ((FALSE == found) && (iBodies <= nbbodies))
			{
				CATIAlias_var spAliasBody = pListBodies[iBodies];
				if (NULL_var != spAliasBody)
				{
					CATUnicodeString currentbodyname = spAliasBody->GetAlias();

					if (iInputName == currentbodyname)
					{
						// We have found a body
						found = TRUE;
						rc = spAliasBody->QueryInterface(IID_CATBaseUnknown, (void**)&(*oInput));
					}
					else
					{
						// Research in the body
						CATIMmiUseBodyContent_var spUseBodyContentOnBody = spAliasBody;
						if (spUseBodyContentOnBody != NULL_var)
						{
							// Retrieve all geometrical element in the body 
							CATListValCATBaseUnknown_var ListFeatureInsideCurrentBody;
							spUseBodyContentOnBody->GetMechanicalFeatures(ListFeatureInsideCurrentBody);
							int nbchild = ListFeatureInsideCurrentBody.Size();

							int iChild = 1;
							while ((FALSE == found) && (iChild <= nbchild))
							{
								CATIAlias_var spChild = ListFeatureInsideCurrentBody[iChild];
								if (NULL_var != spChild)
								{
									CATUnicodeString currentchildname = spChild->GetAlias();

									if (iInputName == currentchildname)
									{
										// we have found a child of a body
										found = TRUE;
										rc = spChild->QueryInterface(IID_CATBaseUnknown, (void**)&(*oInput));
									}
								}
								iChild++;
							}
						}
					}
				}
				iBodies++;
			}
		}

	}

	if (TRUE == found)
	{
		rc = S_OK;
	}
	else rc = E_FAIL;

	return rc;
}



CATUnicodeString ComacGenerateBOMCmd::GetAliasName(CATBaseUnknown * ipBaseUnknown)
{
	CATUnicodeString ElementName("");
	if (NULL != ipBaseUnknown)
	{
		CATIAlias_var spAlias = ipBaseUnknown;
		if (NULL_var != spAlias)  ElementName = spAlias->GetAlias();
	}
	return ElementName;
}

// ******************** 几个包  End *********************

