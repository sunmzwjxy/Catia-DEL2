//===================================================================
// COPYRIGHT Comac 2021/12/13
//===================================================================
// ComacReNameOperationsCmd.cpp
// Header definition of class ComacReNameOperationsCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/12/13 Creation: Code generated by the 3DS wizard
//===================================================================
#include "fengyHelper.h"
#include "ComacReNameOperationsCmd.h"
#include "CATCreateExternalObject.h"
CATCreateClass(ComacReNameOperationsCmd);

#include "CATDlgEditor.h"
//#include "CATDlgCombo.h"
#include "CATApplicationFrame.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

//from edu CAAPPRProcessItf.edu\CAAFmiProcessOutput.m\src\CAAFmiProcessOutput.cpp

// DELPPRProcessItf Framework
#include "DELPPRProcessAuthAccess.h"
#include "DELIPPRProcessAuth.h"
#include "DELPPRProcessNavAccess.h"
#include "DELIPPRProcessNav.h"
#include "DELIPPRProcessOutputNav.h"
#include "DELIPPRProcessOutputAuth.h"
//#include "CATIPrdOccurrenceMngt.h"
//#include "CATPrdGetOccurrenceMngt.h" 

//DELPPRProcessItf
#include "DELIPPRProcessOccAuth.h"
//DELPPRSystemItf
#include "DELIPPRSystemOccAuth.h"


// ProductStructureUseItf  Framework
#include "CATIPrdReferenceFactory.h"
#include "CATPrdFactory.h"
#include "CATIPrd3DPartReferenceFactory.h"
// ProductStructureInterfaces Framework
#include "CATIPLMProducts.h"
//ObjectModelerBase Framework
#include "CATOmbLifeCycleRootsBag.h"

// ProductStructureInterfaces Framework
#include "CATIPrdObject.h"
#include "CATIPLMProducts.h"
#include "CATIPrdIterator.h"
#include "CATIPrdOccurrenceMngt.h"
#include "CATPrdGetOccurrenceMngt.h"

// CATMecModUseItf Framework
#include "CATIMmiUseCreateImport.h"         // To copy mechanical feature
#include "CATMmiUseServicesFactory.h"

#include "DataCommonProtocolServices.h"
#include "CATIUseEntity.h"
#include "CATLISTV_CATIMmiMechanicalFeature.h"

// CATMecModLiveUseItf Framework
#include "CATIMmiMechanicalFeature.h"
#include "CATIBodyRequest.h"
#include "CATIPartRequest.h"
#include "CATIMmiViewServices.h"
#include "CATMmiUseServicesFactory.h"
#include "CATIMmiGeometricalSet.h"

//DataCommonProtocolUse Framework
#include "DataCommonProtocolCCPServices.h"

// VB 实现MainBody 赋值
#include "CATIABody.h"
#include "CATIAPart.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATLib.h"

#include "CATAdpMaturityServices.h"
#include "CATError.h"							//Error management. ::CATGetLastError API call


//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : constructor
//-----------------------------------------------------------------------------
ComacReNameOperationsCmd::ComacReNameOperationsCmd() :
	CATStateCommand("ComacReNameOperationsCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here

	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new ComacReNameOperationsDlg(pWnd, "Rename Operations");
	_Panel->Build();
	_Panel->SetFather(this);
	
	pFO_OPFatherRef = NULL;
	pFO_OPFatherOcc = NULL;
	_strListOPReftitle_before.RemoveAll();
	_strListOPInsttitle_before.RemoveAll();

	_ListOPRef.RemoveAll();
	_ListOPInst.RemoveAll();
	
}

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : destructor
//-----------------------------------------------------------------------------

ComacReNameOperationsCmd::~ComacReNameOperationsCmd()
{
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)								// 析构时 按钮使能消失！
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	pFO_OPFatherRef = NULL;
	pFO_OPFatherOcc = NULL;
	_strListOPReftitle_before.RemoveAll();
	_strListOPInsttitle_before.RemoveAll();
	_ListOPRef.RemoveAll();
	_ListOPInst.RemoveAll();
}


void ComacReNameOperationsCmd::BuildGraph()
{
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

																			  // Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);		 //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&ComacReNameOperationsCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&ComacReNameOperationsCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&ComacReNameOperationsCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&ComacReNameOperationsCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&ComacReNameOperationsCmd::ElementSelection, NULL, NULL, (void*)1));


	//// 初始化写入 dlg
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_PartCodeEditor), "CMMBOMAssemDlg", "PartCode.Range", ",");
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ManufactureLineEditor), "CMMBOMAssemDlg", "ManufactureLine.Range", ",");
	//CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ProcessUnitEditor), "CMMBOMAssemDlg", "ProcessUnit.Range", ",");

	//// 添了两处  radio 等待
	//_pRadioBtnCopy = _Panel->GetRadioButton(ID_DesignCodeCopy);
	//AddAnalyseNotificationCB(_pRadioBtnCopy, _pRadioBtnCopy->GetRadBModifyNotification(),
	//	(CATCommandMethod)&ComacReNameOperationsCmd::ChangeRadioNotifyCopy, NULL);

	//_pRadioBtnCopy->SetState(CATDlgCheck);

	//_pRadioBtnInput = _Panel->GetRadioButton(ID_DesignCodeInput);
	//AddAnalyseNotificationCB(_pRadioBtnInput, _pRadioBtnInput->GetRadBModifyNotification(),
	//	(CATCommandMethod)&ComacReNameOperationsCmd::ChangeRadioNotifyInput, NULL);

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);		// 一定要显示！

}

CATBoolean ComacReNameOperationsCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;
			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void ComacReNameOperationsCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	cout << "## sSelectObjectType:" << sSelectObjectType << endl;

	
	//// 测试打印出 V_TreeOrder
	//if (sSelectObjectType == TYPE_FO_OP)																// OPeration
	//{
	//	pFO_OPStartingOcc = _pSelectedOccurrence;
	//	pFO_OPStartingRef = _pSelectedReference;
	//	CATBoolean iAllAtributes = TRUE;

	//	HRESULT hr = fengyHelper::BrowseReference(pFO_OPStartingRef, 1, iAllAtributes, 0);
	//	if (FAILED(hr))
	//	{
	//		fengyHelper::Notify("BrowseReference  KO!");
	//		return;
	//	}
	//}

	// Test 
	CATSystemInfo iSystemInfo /*=NULL*/;
	CATLibStatus sStatus =  CATGetSystemInfo(&iSystemInfo);
	if (CATLibSuccess == sStatus)
	{
		cout << "iSystemInfo-HostName :"		<< iSystemInfo.HostName			<< endl
			 << "iSystemInfo-OSName :"			<< iSystemInfo.OSName			<< endl
			 << "iSystemInfo-OSVersion :"		<< iSystemInfo.OSVersion		<< endl
			 << "iSystemInfo-MajorVersion :"	<< iSystemInfo.MajorVersion		<< endl
			 << "iSystemInfo-MinorVersior :"	<< iSystemInfo.MinorVersion		<< endl
			 << "iSystemInfo-OSType :"			<< iSystemInfo.OSType			<< endl	;
	}
	if (CATLibError == sStatus)
	{
		cout << "CATGetSystemInfo  ERROR! " << iSystemInfo.HostName << endl;
	}


	if ((sSelectObjectType == TYPE_Workplan) || (sSelectObjectType == TYPE_CUS_FO_Workplan))					// workplan
	{
		pFO_OPFatherOcc = _pSelectedOccurrence;
		pFO_OPFatherRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_FatherWorkPlanEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pFO_OPFatherRef, "V_Name"));

		//// 互锁
		//pFO_OPStartingOcc = NULL ;
		//pFO_OPStartingRef = NULL;
		//CATDlgEditor *pEditor2 = _Panel->GetEditor(ID_StartingOperationNameEditor);
		//pEditor2->SetText("");

		//_Panel->GetCheckButton(ID_ConcurrentOPChectBtn)->SetSensitivity(CATDlgDisable);

		////  ********************************
		//// Test  get maturity
		//// get id

		//CATIPLMComponent* piCompOnRef = NULL;
		//pFO_OPFatherRef->QueryInterface(IID_CATIPLMComponent, (void**)&piCompOnRef);
		//CATIAdpPLMIdentificator* opiIdentOnPLMComp = NULL;
		//piCompOnRef->GetAdpID(opiIdentOnPLMComp);

		//if(!opiIdentOnPLMComp)
		//{
		//	fengyHelper::Notify("GetAdpID  KO!");
		//	return;
		//}

		//// ======================================================================================
		//// 5- Read the current state and the possible transitions which can be applied on the current state
		//// ======================================================================================
		//CATUnicodeString CurrentState;
		//CATListValCATUnicodeString ListOfPossibleTransitions;
		//HRESULT rc = CATAdpMaturityServices::GetStateAndPossibleTransitions(opiIdentOnPLMComp, CurrentState, ListOfPossibleTransitions);
		//if (FAILED(rc))
		//{
		//	fengyHelper::Notify( "GetStateAndPossibleTransitions  KO!");
		//	return  ;
		//}

		////  Output the values retrieved above
		//cout << "   The current maturity state of the component is: " << CurrentState.ConvertToChar() << endl;

		//int NumberOfPossibleTransitions = ListOfPossibleTransitions.Size();
		//cout << "   The transitions possible from the current state are: " << endl;
		//for (int i = 1; i <= NumberOfPossibleTransitions; i++)
		//{
		//	CATUnicodeString TransitionName = ListOfPossibleTransitions[i];
		//	cout << "\t\t" << TransitionName.ConvertToChar() << endl;
		//}

		////提升工作中   ptmpRef2  ApplyMaturityTransition opiIdentOnPLMComp2
		//CATUnicodeString InputTransitionName = "IN_WORK";
		//CATUnicodeString InputTransitionName2 = "ShareWithinProject";
		//
		//if (CurrentState == InputTransitionName2  || CurrentState == InputTransitionName )
		//	cout << "The current maturity state is Already : " << CurrentState.ConvertToChar() << "not neccssary ApplyMaturityTransition!" << endl;
		//else
		//{
		//	//rc = CATAdpMaturityServices::ApplyMaturityTransition(opiIdentOnPLMComp, InputTransitionName);
		//	//if (FAILED(rc))
		//	//	cout << "FAILED at: ApplyMaturityTransition " << InputTransitionName << endl;
		//	//else
		//	//	cout << "OK : ApplyMaturityTransition " << InputTransitionName << endl; 
		//	
		//	rc = CATAdpMaturityServices::ApplyMaturityTransition(opiIdentOnPLMComp, InputTransitionName2);  // apply must use "ShareWithinProject"
		//	if (FAILED(rc))
		//		cout << "FAILED at: ApplyMaturityTransition " << InputTransitionName2 << endl;
		//	else
		//		cout << "OK : ApplyMaturityTransition " << InputTransitionName2 << endl;
		//}

	}

	//if (sSelectObjectType == TYPE_FO_OP)																// OPeration
	//{
	//	pFO_OPStartingOcc = _pSelectedOccurrence;
	//	pFO_OPStartingRef = _pSelectedReference;
	//	CATDlgEditor *pEditor2 = _Panel->GetEditor(ID_StartingOperationNameEditor);
	//	pEditor2->SetText(CUSCAAUtilService::GetObjectAttrValue(pFO_OPStartingRef, "V_Name"));

	//	// 互锁
	//	pFO_OPFatherOcc = NULL;
	//	pFO_OPFatherRef = NULL;
	//	CATDlgEditor *pEditor = _Panel->GetEditor(ID_FatherWorkPlanEditor);
	//	pEditor->SetText("");
	//	_Panel->GetCheckButton(ID_ConcurrentOPChectBtn)->SetSensitivity(CATDlgEnable);

	//}

}

CATBoolean ComacReNameOperationsCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}
	if (!CheckSelectObject())
	{
		return FALSE;
	}
	// 主函数： ReNameOperations
	ReNameOperations(pFO_OPFatherRef);

	return FALSE;
}


CATBoolean ComacReNameOperationsCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}
	if (!CheckSelectObject())
	{
		return FALSE;
	}
	// 主函数： ReNameOperations
	ReNameOperations(pFO_OPFatherRef);

	return TRUE;
}

CATBoolean ComacReNameOperationsCmd::CheckSelectObject()
{
	if (  pFO_OPFatherOcc == NULL) 
	{
		fengyHelper::Notify("请选择 WorkPlan 节点！");
		return FALSE;
	}

	return TRUE;
}

CATBoolean ComacReNameOperationsCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

// fengy 2022.1.5  ReNameOperations
void ComacReNameOperationsCmd::ReNameOperations(CATIPLMNavReference *ipFO_OPFatherRef )
{
	HRESULT rc = E_FAIL;
	CATUnicodeString tmpMsg ="";
	
	if (NULL == ipFO_OPFatherRef)
	{
		fengyHelper::Notify("ReNameOperations input KO!");
		return;
	}

	_strListOPReftitle_before.RemoveAll();
	_strListOPInsttitle_before.RemoveAll();

	getOPtitles(ipFO_OPFatherRef);
	if (_strListOPReftitle_before.Size() == 0 || _strListOPInsttitle_before.Size() == 0)
	{
		fengyHelper::Notify("所选节点下不含工序节点！请重新选择！");
		return;
	}
	// 2 - 解析需要 处理的index
	CATListOfInt nList_index_ChangePre;						// 自然增加 计数 010，020...
	CATListOfInt nList_index_ChangePreAddSuffix;			// 自然增加 计数 ，添加字母后缀
	CATListOfInt nList_index_ChangePreKeepSuffix;			// 自然增加 计数 ，保持字母后缀

	rc = SeekIndexToMod( nList_index_ChangePre, nList_index_ChangePreAddSuffix, nList_index_ChangePreKeepSuffix);

	if (FAILED(rc))
	{
		cout << "FAILED at: SeekIndexToMod " << endl; 
		return;
	}
	else
		cout << "OK : SeekIndexToMod " << endl;
	
	// 3 - 修改动作@ 对一级direct list 内的 ref 、inst rename
	rc = RunOPNameModify(nList_index_ChangePre, nList_index_ChangePreAddSuffix, nList_index_ChangePreKeepSuffix, ipFO_OPFatherRef);
	if (FAILED(rc))
	{
		cout << "FAILED at: RunOPNameModify " << endl;
		return;
	}
	else
		cout << "OK : RunOPNameModify " << endl;

	return;
}

// fengy 2022.1.10 从workplan 获取下面的所有OP title ―― 可能并不需要 前置 获取别名
void ComacReNameOperationsCmd::getOPtitles(CATIPLMNavReference * ipFO_OPFatherRef)
{
	if (  ipFO_OPFatherRef == NULL)
	{
		cout << "getOPtitles ()输入 为空 ！ " << endl;
		return  ;
	}
	if (_strListOPReftitle_before.Size() == 0 || _strListOPInsttitle_before.Size() == 0)
	{
		HRESULT rc = E_FAIL;
		// 3 - 对一级direct list 内的 ref 、inst rename

		CATPLMCoreType coreType;
		CATListPtrCATIPLMNavEntity childrenList;

		coreType = PLMCoreInstance;
		rc = ipFO_OPFatherRef->ListChildren(childrenList, 1, &coreType);
		if (SUCCEEDED(rc))
		{
			cout << "the size of the instances aggregated under Ref is " << childrenList.Size() << endl;
			if (childrenList.Size() == 0)
				return  ;

			// ===========================================================================================================
			//   For each Part Instances
			// ===========================================================================================================
			int j = 1;
			int nIsOperation = 0;
			int  nOP = childrenList.Size();
			while (j <= nOP)
			{
				CATIPLMNavEntity* piNavEntity = childrenList[j];
				if (NULL != piNavEntity)
				{
					CATIPLMNavInstance* piNavInst = NULL;
					rc = piNavEntity->QueryInterface(IID_CATIPLMNavInstance, (void **)&piNavInst);
					if (SUCCEEDED(rc))
					{
						CATIPLMNavReference* piNavRef = NULL;
						rc = piNavInst->GetReferenceInstanceOf(piNavRef);	//搜索后的 层级：rootref - inst- ref -rep isnt -repref
						if (SUCCEEDED(rc) && (NULL != piNavRef))
						{
							// 类型判断 TYPE_FO_OP
							CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(piNavRef);
							//cout << "sSelectObjectType:" << sSelectObjectType << endl;
							if (sSelectObjectType == TYPE_FO_OP || sSelectObjectType == TYPE_GeneralOperation)
							{
								nIsOperation++;
								//  获取ref list 内元素遍历 ref title ，如果重名，更改1st ref title
								CATUnicodeString  sformerRefTitle = CUSCAAUtilService::GetObjectAttrValue(piNavRef, "V_Name");
								_strListOPReftitle_before.Append(sformerRefTitle);

								//  获取inst list 内元素遍历 inst title ，如果重名，更改1st inst title
								CATUnicodeString  sformerInstTitle = CUSCAAUtilService::GetObjectAttrValue(piNavInst, "PLM_ExternalID");
								_strListOPInsttitle_before.Append(sformerInstTitle);

								_ListOPRef.Append(piNavRef);
								_ListOPInst.Append(piNavInst);
							}
							j++;
						}
					}
				}
			}
		}
	}
	return;
}


// fengy 2022.1.10  获取ref 的前后缀 010-A istrOPReftitle
bool  ComacReNameOperationsCmd::GetOPPreAndSuffix(CATUnicodeString istrOPReftitle,int &onPreffix, int &onSuffix)
{
	bool isConformed = false;

	int nNamePreffixNumber = -1;				// op 数字部分！
	bool bAlphaBelta = false;					// 090-A 是否带后缀！
	int  asciiNum = -1;							// 表示不带 字母后缀!
	CATUnicodeString tmpMsg;

	CATListOfCATUnicodeString strOpTitleList;
	fengyHelper::SplitString(istrOPReftitle, "-", strOpTitleList);
	int size1 = strOpTitleList.Size();		// op title  分割
	if (size1 > 2 || size1 == 0)
		return isConformed;
	if (size1 == 1)							// 不带字母后缀
	{
		if (istrOPReftitle.GetLengthInChar() != 3)
			return isConformed;

		nNamePreffixNumber = fengyHelper::Str2Int(istrOPReftitle);
		cout << " nNamePreffixNumber: " << nNamePreffixNumber << endl;
		if (nNamePreffixNumber < 0)
		{
			tmpMsg = "所选工序节点 Str2Int KO!" + istrOPReftitle;
			//fengyHelper::Notify(tmpMsg);
			cout <<   tmpMsg << endl;
			return isConformed;
		}
		// 赋值
		onPreffix  = nNamePreffixNumber;
		onSuffix = asciiNum;
		return true;

	}
	if (size1 == 2)
	{
		if (strOpTitleList[1].GetLengthInChar() != 3)
			return isConformed;

		nNamePreffixNumber = fengyHelper::Str2Int(strOpTitleList[1]);
		cout << " nNamePreffixNumber: " << nNamePreffixNumber << endl;
		if (nNamePreffixNumber < 0)
		{
			tmpMsg = "所选工序节点 Str2Int KO!" + istrOPReftitle;
			//fengyHelper::Notify(tmpMsg);
			cout << tmpMsg << endl;
			return isConformed;
		}

		// 字母转换！
		CATUnicodeString strABC = strOpTitleList[2];
		asciiNum = fengyHelper::getAsciiNum(strABC);

		// 预检
		if (asciiNum >= nAsciiCharA && asciiNum <= nAsciiCharZ)
		{
			// 赋值
			onPreffix = nNamePreffixNumber;
			onSuffix = asciiNum;
			return true;
		}
		else
			return isConformed;
	}
	return isConformed;
}


// fengy 2022.1.10 找到当前 list下需要更改的三种类别
// 自然增加 计数 010，020...
// 自然增加 计数 ，添加字母后缀
// 自然增加 计数 ，保持字母后缀
HRESULT ComacReNameOperationsCmd::SeekIndexToMod( CATListOfInt &onList_index_ChangePre,
												  CATListOfInt &onList_index_ChangePreAddSuffix,
												  CATListOfInt &onList_index_ChangePreKeepSuffix)
{
	HRESULT rc = E_FAIL;
	CATUnicodeString tmpMsg ="";
	int  size_OP= _strListOPReftitle_before.Size();

	// 遍历解析！
	for (int i = 1; i <= size_OP; i++)
	{
		int nPre = -1;
		int nSuffix = -1;
		bool ifGotten= GetOPPreAndSuffix(_strListOPReftitle_before[i], nPre, nSuffix);
		if (!ifGotten)
		{
			tmpMsg = "所选工序节点命名不规范！当前： " + _strListOPReftitle_before[i];
			tmpMsg.Append("\n应为：3位数字（eg：010），或 3位数字+连字符+1位大写字母（eg：010-A）");
			fengyHelper::Notify(tmpMsg);
			return rc;
		}
		else
		{
			if(nSuffix!=-1)
				onList_index_ChangePreKeepSuffix.Append(i);
			else
			{
				int count = _strListOPReftitle_before.NbOccur(_strListOPReftitle_before[i]);
				if (count>1)
					onList_index_ChangePreAddSuffix.Append(i);
				else
					onList_index_ChangePre.Append(i);
			}
		}
	}
	return S_OK;
}

// fengy 2022.1.10 对当前 list下三种类别 做改名动作！
// 自然增加 计数 010，020...
// 自然增加 计数 ，添加字母后缀
// 自然增加 计数 ，保持字母后缀
HRESULT ComacReNameOperationsCmd::RunOPNameModify( CATListOfInt inList_index_ChangePre,
												   CATListOfInt inList_index_ChangePreAddSuffix,
												   CATListOfInt inList_index_ChangePreKeepSuffix,
												   CATIPLMNavReference *ipFO_OPFatherRef)
{
	HRESULT rc = E_FAIL;
	if (!ipFO_OPFatherRef)
		return rc;

	CATListOfCATUnicodeString   strListOPReftitle_tmp;			// for 最终打印下 做check！
	CATListOfCATUnicodeString   strListOPInsttitle_tmp;

	CATUnicodeString newRefName = "";							    // 用于改名
	int case2Count = 0;												// for ABC 后缀
	int case3Count = 0;
	int nPreExpect = 1;												// 前缀 真实 自增！

	// 控制 退出的变量

	for (int i= 1;i<= _ListOPRef.Size();i++)
	{
		// 先行准备OP name
		CATUnicodeString strPre;
		strPre.BuildFromNum( nPreExpect*10 , "%03d");
		cout << " #RunOPNameModify  strPre: " << strPre << endl;

		// case3
		int Nb3 = inList_index_ChangePreKeepSuffix.NbOccur(i);
		if (Nb3)
		{
			////获取 后缀！――缺陷：BC会颠倒！
			//int nPre = -1;
			//int nSuffix = -1;
			//GetOPPreAndSuffix(_strListOPReftitle_before[i], nPre, nSuffix);
			//newRefName = strPre + "-" + fengyHelper::getAsciiCATUnicodeString(nSuffix);

			CATUnicodeString strSuffix = fengyHelper::getAsciiCATUnicodeString(case3Count + 65);
			newRefName = strPre + "-" + strSuffix;

			case3Count++;

			// 到达最后一个 i ，自增 nPreExpect  复位
			int ntmp = fengyHelper::getCountByFuzzySearch(_strListOPReftitle_before, _strListOPReftitle_before[i].SubString(0, 4));

			if (case3Count == ntmp)
				//if (case3Count == _strListOPReftitle_before.NbOccur(_strListOPReftitle_before[i].SubString(0, 4)))
			{
				case3Count = 0;			// 复位
				nPreExpect++;
			}
		}

		// case2
		int Nb2 = inList_index_ChangePreAddSuffix.NbOccur(i);
		if (Nb2   )									
		{
			// 并且相邻！
			bool bContinue = isNextContinue(_strListOPReftitle_before,i);
			if(!bContinue)
			{
				CATUnicodeString strSuffix = fengyHelper::getAsciiCATUnicodeString(case2Count + 65);
				newRefName = strPre + "-" + strSuffix;
				case2Count++;											// 每次case2 都自增

				//newRefName = strPre;
				nPreExpect++;
			}
			else
			{
				CATUnicodeString strSuffix = fengyHelper::getAsciiCATUnicodeString(case2Count + 65);
				newRefName = strPre + "-" + strSuffix;
				case2Count++;											// 每次case2 都自增

				// 到达最后一个 i ，自增 nPreExpect  复位
				if (case2Count == _strListOPReftitle_before.NbOccur(_strListOPReftitle_before[i]))
				{
					case2Count = 0;			// 复位
					nPreExpect++;
				}
			}
		}

		// case1
		int Nb1 = inList_index_ChangePre.NbOccur(i);
		if (Nb1)
		{
			newRefName = strPre;
			nPreExpect++;
		}

		CUSCAAUtilService::SetObjectAttrString(_ListOPRef[i], "V_Name", newRefName);
		CUSCAAUtilService::SetObjectAttrString(_ListOPInst[i], "PLM_ExternalID", newRefName + ".1");
		strListOPReftitle_tmp.Append(newRefName);
		strListOPInsttitle_tmp.Append(newRefName + ".1");
	}
	//cout << "************  SearchModifyCase4 前 ***************" << endl;
	//fengyHelper::printListString(strListOPReftitle_tmp);
	//fengyHelper::printListString(strListOPInsttitle_tmp);

	//// patch
	////  逻辑内部补充太费事了！！直接最后再刷一遍！！@@  弥补一处：确保并行工序 和 正常工序 前缀数字相邻差值 10

	//// 0 检测出：是否 含有 相邻的前缀差值为10 ，跳过并行工序 tmpStr ―― 修改成 前缀数字 差值为10！
	//rc = SearchModifyCase4(strListOPReftitle_tmp, strListOPInsttitle_tmp);			// io 变量！
	//if (FAILED(rc))
	//{
	//	cout << "FAILED at: SearchModifyCase4 " << endl;
	//	return rc;
	//}
	//else
	//	cout << "OK : SearchModifyCase4 " << endl;


	cout << "************  SearchModifyCase3_1 前 ***************" << endl;
	fengyHelper::printListString(strListOPReftitle_tmp);
	fengyHelper::printListString(strListOPInsttitle_tmp);

	// patch
	//  逻辑内部补充太费事了！！直接最后再刷一遍！！@@  弥补两处： 不连续的case3
	
	// 1 检测出：是否 含有相同前缀，但后缀不是以A打头（不相邻！）的tmpStr ―― 修改成 以A打头后缀！
	rc = SearchModifyCase3_1(strListOPReftitle_tmp, strListOPInsttitle_tmp);			// io 变量！
	if (FAILED(rc))
	{
		cout << "FAILED at: SearchModifyCase3_1 " << endl;
		return rc;
	}
	else
		cout << "OK : SearchModifyCase3_1 "  << endl;

	cout << "************  SearchModifyCase3_1 后 ***************" << endl;
	fengyHelper::printListString(strListOPReftitle_tmp);
	fengyHelper::printListString(strListOPInsttitle_tmp);

	// 2 检测出：是否 带有后缀字母，但前缀字母唯一的 cese―― 修改成 去掉后缀，保留前缀！
	rc = SearchModifyCase3_2(strListOPReftitle_tmp,strListOPInsttitle_tmp);
	if (FAILED(rc))
	{
		cout << "FAILED at: SearchModifyCase3_2 " << endl;
		return rc;
	}
	else
		cout << "OK : SearchModifyCase3_2 " << endl;

	// 3 打印出 strListOPReftitle_tmp 作为最终的list 名称！
	cout << "************  FINAL ***************" << endl;

	fengyHelper::printListString(strListOPReftitle_tmp);
	fengyHelper::printListString(strListOPInsttitle_tmp);

	return S_OK;
}

// fengy 2022.1.10  判断list内 与当前 index 相邻（后一个）是否相同
bool ComacReNameOperationsCmd::isNextContinue(CATListOfCATUnicodeString strList,int i)

{
	bool bContinue = false;
	int size = strList.Size();
	if (size  == 0)
		return bContinue;
	if (i > size)
	{
		cout<<"i越界了！最大："<< size <<endl;
		return bContinue;
	}
	else
	{
		if(strList.NbOccur(strList[i])==1 )
			return bContinue;

		if (i < size && strList[i] == strList[i + 1])
			return true;
		if (i == size)
		{
			if(strList[i] == strList[i - 1])
				return true;					// 最后一个，视为相邻
			else
				return bContinue;
		}
	}
	return bContinue;
}


// 1 检测出：是否 含有相同前缀，但后缀不是以A打头（不相邻！）的tmpStr ―― 修改成 以A打头后缀！
HRESULT ComacReNameOperationsCmd::SearchModifyCase3_1(CATListOfCATUnicodeString & iostrListOPReftitle_tmp, CATListOfCATUnicodeString & iostrListOPInsttitle_tmp)			// io 变量！
{
	HRESULT rc = E_FAIL;
	int sizeofList = iostrListOPReftitle_tmp.Size();
	if (sizeofList == 0)
		return rc;

	CATUnicodeString	tmpMsg = "";
	CATListOfInt		nlistPre;								// 带 前后缀的 ，下标 记录
	CATListOfInt		nlistSuffix;
	CATListOfInt		nIndex;

	for (int i = 1; i <= sizeofList; i++)
	{
		int nPre = -1;
		int nSuffix = -1;
		bool ifGotten = GetOPPreAndSuffix(iostrListOPReftitle_tmp[i], nPre, nSuffix);
		if (!ifGotten)
		{
			tmpMsg = "所选工序节点命名不规范！当前： " + iostrListOPReftitle_tmp[i];
			tmpMsg.Append("\n应为：3位数字（eg：010），或 3位数字+连字符+1位大写字母（eg：010-A）");
			fengyHelper::Notify(tmpMsg);
			return rc;
		}
		else
		{
			if (nSuffix == -1)
				continue;
			else                       // 所有的 带后缀的
			{
				nlistPre.Append(nPre);
				nlistSuffix.Append(nSuffix);
				nIndex.Append(i);		// 用于 最后的修改！
			}
		}
	}

	// 筛选下标 做修改
	CATUnicodeString	tmpRefName = "";		// 当前的 要改成的 refname

	for (int i = 1; i <= nIndex.Size()-1; i++)
	{
		// 另外：首个 后缀不为A的！
		if ( i==1 && nlistSuffix[i] != nAsciiCharA)
		{
			tmpRefName = iostrListOPReftitle_tmp[nIndex[i]].SubString(0, 4) + fengyHelper::getAsciiCATUnicodeString(nAsciiCharA);
			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i]], "V_Name", tmpRefName);
			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i]], "PLM_ExternalID", tmpRefName + ".1");
			iostrListOPReftitle_tmp.Replace(nIndex[i], tmpRefName);
			iostrListOPInsttitle_tmp.Replace(nIndex[i], tmpRefName + ".1");

			// 更新当前的 后缀字母！关键！！
			nlistSuffix[i] = nAsciiCharA;
		}

		bool bNeedToChange = false;
		
		// 相邻前缀不同，后一个的 后缀应该都为A
		if (nlistPre[i] != nlistPre[i + 1] && nlistSuffix[i + 1] != nAsciiCharA)
		{
			bNeedToChange = true;
			tmpRefName = iostrListOPReftitle_tmp[nIndex[i + 1]].SubString(0, 4) + fengyHelper::getAsciiCATUnicodeString(nAsciiCharA);
			// 更新当前的 后缀字母！关键！！
			nlistSuffix[i + 1] = nAsciiCharA;
		}

		// 相邻前缀相同，后一个的 后缀与当前的 前缀 应该差值1
		if (nlistPre[i] == nlistPre[i + 1] && ((nlistSuffix[i + 1] - nlistSuffix[i]) != 1))
		{
			bNeedToChange = true;
			tmpRefName = iostrListOPReftitle_tmp[nIndex[i + 1]].SubString(0, 4) + fengyHelper::getAsciiCATUnicodeString(nlistSuffix[i] + 1);
			// 更新当前的 后缀字母！关键！！
			nlistSuffix[i + 1] = nlistSuffix[i] + 1;
		}

		// change Action
		if(bNeedToChange)
		{
			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i + 1]], "V_Name", tmpRefName);
			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i + 1]], "PLM_ExternalID", tmpRefName + ".1");
			iostrListOPReftitle_tmp.Replace(nIndex[i + 1], tmpRefName);
			iostrListOPInsttitle_tmp.Replace(nIndex[i + 1], tmpRefName + ".1");
		}
	}

	return S_OK;
}

// 2 检测出：是否 带有后缀字母，但前缀字母唯一的 cese―― 修改成 去掉后缀，保留前缀！
HRESULT ComacReNameOperationsCmd::SearchModifyCase3_2(CATListOfCATUnicodeString & iostrListOPReftitle_tmp, CATListOfCATUnicodeString & iostrListOPInsttitle_tmp)			// io 变量！
{
	HRESULT rc = E_FAIL;
	int sizeofList = iostrListOPReftitle_tmp.Size();
	if (sizeofList == 0)
		return rc;

	CATUnicodeString	tmpMsg = "";
	CATListOfInt		nlistPre;								// 带 前后缀的 ，下标 记录
	CATListOfInt		nlistSuffix;
	CATListOfInt		nIndex;

	for (int i = 1; i <= sizeofList; i++)
	{
		int nPre = -1;
		int nSuffix = -1;
		bool ifGotten = GetOPPreAndSuffix(iostrListOPReftitle_tmp[i], nPre, nSuffix);
		if (!ifGotten)
		{
			tmpMsg = "所选工序节点命名不规范！当前： " + iostrListOPReftitle_tmp[i];
			tmpMsg.Append("\n应为：3位数字（eg：010），或 3位数字+连字符+1位大写字母（eg：010-A）");
			fengyHelper::Notify(tmpMsg);
			return rc;
		}
		else
		{
			if (nSuffix == -1)
				continue;
			else                       // 所有的 带后缀的
			{
				nlistPre.Append(nPre);
				nlistSuffix.Append(nSuffix);
				nIndex.Append(i);		// 用于 最后的修改！
			}
		}
	}

	// 筛选下标 做修改
	CATUnicodeString	tmpRefName = "";		// 当前的 要改成的 refname

	for (int i = 1; i <= nIndex.Size() - 1; i++)
	{
		// 另外：末尾 后缀不为A的！
		if ( (i == nIndex.Size() - 1) && nlistSuffix[i+1] == nAsciiCharA)
		{
			tmpRefName = iostrListOPReftitle_tmp[nIndex[i+1]].SubString(0, 3) ;
			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i + 1]], "V_Name", tmpRefName);
			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i + 1]], "PLM_ExternalID", tmpRefName + ".1");
			iostrListOPReftitle_tmp.Replace(nIndex[i + 1], tmpRefName);
			iostrListOPInsttitle_tmp.Replace(nIndex[i + 1], tmpRefName + ".1");
			// 更新当前的 后缀字母！关键！！
			nlistSuffix[i + 1] = -1;			// 对应后缀字母为空
		}

		bool bNeedToChange = false;

		// 相邻前缀不同，后一个的 后缀为A，更改删除 当前的 连字符 和 字母后缀
		if (nlistPre[i] != nlistPre[i + 1] && nlistSuffix[i + 1] == nAsciiCharA && nlistSuffix[i] == nAsciiCharA)
		{
			bNeedToChange = true;
			tmpRefName = iostrListOPReftitle_tmp[nIndex[i]].SubString(0, 3);
			// 更新当前的 后缀字母！关键！！
			nlistSuffix[i] = -1;
		}

		// change Action
		if (bNeedToChange)
		{
			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i]], "V_Name", tmpRefName);
			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i]], "PLM_ExternalID", tmpRefName + ".1");
			iostrListOPReftitle_tmp.Replace(nIndex[i], tmpRefName);
			iostrListOPInsttitle_tmp.Replace(nIndex[i], tmpRefName + ".1");
		}
	}

	return S_OK;
}


//// 0 检测出：是否 含有 相邻的前缀差值为10 ，跳过并行工序 tmpStr ―― 修改成 前缀数字 差值为10！
//// 加减10 删后缀！____――――――――麻烦~~！
//HRESULT ComacReNameOperationsCmd::SearchModifyCase4(CATListOfCATUnicodeString & iostrListOPReftitle_tmp, CATListOfCATUnicodeString & iostrListOPInsttitle_tmp)			// io 变量！
//{
//	HRESULT rc = E_FAIL;
//	int sizeofList = iostrListOPReftitle_tmp.Size();
//	if (sizeofList == 0)
//		return rc;
//
//	CATUnicodeString	tmpMsg = "";
//	CATListOfInt		nlistPre;								// 带 前后缀的 ，下标 记录
//	CATListOfInt		nlistSuffix;
//	CATListOfInt		nIndex;
//	CATUnicodeString	tmpRefName = "";		// 当前的 要改成的 refname
//
//	for (int i = 1; i <= sizeofList; i++)
//	{
//		int nPre = -1;
//		int nSuffix = -1;
//		bool ifGotten = GetOPPreAndSuffix(iostrListOPReftitle_tmp[i], nPre, nSuffix);
//		if (!ifGotten)
//		{
			//tmpMsg = "所选工序节点命名不规范！当前： " + iostrListOPReftitle_tmp[i];
			//tmpMsg.Append("\n应为：3位数字（eg：010），或 3位数字+连字符+1位大写字母（eg：010-A）");
			//fengyHelper::Notify(tmpMsg);
//			return rc;
//		}
//		else
//		{
//			if (nSuffix != -1)						// 所有的 带后缀的
//			{
//				// 更改相邻的 前缀不是 30-的 case
//				int countWithSuffix = fengyHelper::getCountByFuzzySearch(iostrListOPReftitle_tmp, iostrListOPReftitle_tmp[i].SubString(0, 4) );
//				if (countWithSuffix == 1 || -1 != iostrListOPReftitle_tmp[i + 1].SearchSubString(iostrListOPReftitle_tmp[i].SubString(0, 4)))
//				{
//					tmpRefName = iostrListOPReftitle_tmp[i].SubString(0, 3);
//					CUSCAAUtilService::SetObjectAttrString(_ListOPRef[i], "V_Name", tmpRefName);
//					CUSCAAUtilService::SetObjectAttrString(_ListOPInst[i], "PLM_ExternalID", tmpRefName + ".1");
//					iostrListOPReftitle_tmp.Replace(i, tmpRefName);
//					iostrListOPInsttitle_tmp.Replace(i, tmpRefName + ".1");
//				}
//			}
//			else
//			{
//
//			}
//		}
//	}
//
//	// 筛选下标 做修改
//	CATUnicodeString	tmpRefName = "";		// 当前的 要改成的 refname
//
//	for (int i = 1; i <= nIndex.Size() - 1; i++)
//	{
//		// 另外：末尾 后缀不为A的！
//		if ((i == nIndex.Size() - 1) && nlistSuffix[i + 1] == nAsciiCharA)
//		{
//			tmpRefName = iostrListOPReftitle_tmp[nIndex[i + 1]].SubString(0, 3);
//			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i + 1]], "V_Name", tmpRefName);
//			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i + 1]], "PLM_ExternalID", tmpRefName + ".1");
//			iostrListOPReftitle_tmp.Replace(nIndex[i + 1], tmpRefName);
//			iostrListOPInsttitle_tmp.Replace(nIndex[i + 1], tmpRefName + ".1");
//			// 更新当前的 后缀字母！关键！！
//			nlistSuffix[i + 1] = -1;			// 对应后缀字母为空
//		}
//
//		bool bNeedToChange = false;
//
//		// 相邻前缀不同，后一个的 后缀为A，更改删除 当前的 连字符 和 字母后缀
//		if (nlistPre[i] != nlistPre[i + 1] && nlistSuffix[i + 1] == nAsciiCharA && nlistSuffix[i] == nAsciiCharA)
//		{
//			bNeedToChange = true;
//			tmpRefName = iostrListOPReftitle_tmp[nIndex[i]].SubString(0, 3);
//			// 更新当前的 后缀字母！关键！！
//			nlistSuffix[i] = -1;
//		}
//
//		// change Action
//		if (bNeedToChange)
//		{
//			CUSCAAUtilService::SetObjectAttrString(_ListOPRef[nIndex[i]], "V_Name", tmpRefName);
//			CUSCAAUtilService::SetObjectAttrString(_ListOPInst[nIndex[i]], "PLM_ExternalID", tmpRefName + ".1");
//			iostrListOPReftitle_tmp.Replace(nIndex[i], tmpRefName);
//			iostrListOPInsttitle_tmp.Replace(nIndex[i], tmpRefName + ".1");
//		}
//	}
//
//	return S_OK;
//}
