//===================================================================
// COPYRIGHT Comac 2021/12/13
//===================================================================
// ComacNewVersionCmd.cpp
// Header definition of class ComacNewVersionCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/12/13 Creation: Code generated by the 3DS wizard
//===================================================================
#include "fengyHelper.h"
#include "ComacNewVersionCmd.h"
#include "CATCreateExternalObject.h"
CATCreateClass(ComacNewVersionCmd);

#include "CATDlgEditor.h"
//#include "CATDlgCombo.h"
#include "CATApplicationFrame.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

//from edu CAAPPRProcessItf.edu\CAAFmiProcessOutput.m\src\CAAFmiProcessOutput.cpp

// DELPPRProcessItf Framework
#include "DELPPRProcessAuthAccess.h"
#include "DELIPPRProcessAuth.h"
#include "DELPPRProcessNavAccess.h"
#include "DELIPPRProcessNav.h"
#include "DELIPPRProcessOutputNav.h"
#include "DELIPPRProcessOutputAuth.h"
//#include "CATIPrdOccurrenceMngt.h"
//#include "CATPrdGetOccurrenceMngt.h" 

//DELPPRProcessItf
#include "DELIPPRProcessOccAuth.h"
//DELPPRSystemItf
#include "DELIPPRSystemOccAuth.h"


// ProductStructureUseItf  Framework
#include "CATIPrdReferenceFactory.h"
#include "CATPrdFactory.h"
#include "CATIPrd3DPartReferenceFactory.h"
// ProductStructureInterfaces Framework
#include "CATIPLMProducts.h"
//ObjectModelerBase Framework
#include "CATOmbLifeCycleRootsBag.h"

// ProductStructureInterfaces Framework
#include "CATIPrdObject.h"
#include "CATIPLMProducts.h"
#include "CATIPrdIterator.h"
#include "CATIPrdOccurrenceMngt.h"
#include "CATPrdGetOccurrenceMngt.h"

// CATMecModUseItf Framework
#include "CATIMmiUseCreateImport.h"         // To copy mechanical feature
#include "CATMmiUseServicesFactory.h"

#include "DataCommonProtocolServices.h"
#include "CATIUseEntity.h"
#include "CATLISTV_CATIMmiMechanicalFeature.h"

// CATMecModLiveUseItf Framework
#include "CATIMmiMechanicalFeature.h"
#include "CATIBodyRequest.h"
#include "CATIPartRequest.h"
#include "CATIMmiViewServices.h"
#include "CATMmiUseServicesFactory.h"
#include "CATIMmiGeometricalSet.h"

//DataCommonProtocolUse Framework
#include "DataCommonProtocolCCPServices.h"

// CATPLMIntegrationAccess 
#include "CATAdpVersioningServices.h"

#include "CATEditor.h"
#include "CATPLMSessionServices.h"


// VB 实现MainBody 赋值
#include "CATIABody.h"
#include "CATIAPart.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATLib.h"


//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : constructor
//-----------------------------------------------------------------------------
ComacNewVersionCmd::ComacNewVersionCmd() :
	CATStateCommand("ComacNewVersionCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here

	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new ComacNewVersionDlg(pWnd, "Insert FO & instruction");
	_Panel->Build();
	_Panel->SetFather(this);

	pFO_OPFatherRef = NULL;
	pFO_OPFatherOcc = NULL;
	
}

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : destructor
//-----------------------------------------------------------------------------

ComacNewVersionCmd::~ComacNewVersionCmd()
{
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)								// 析构时 按钮使能消失！
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	pFO_OPFatherRef = NULL;
	pFO_OPFatherOcc = NULL;

}


void ComacNewVersionCmd::BuildGraph()
{
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

																			  // Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);		 //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&ComacNewVersionCmd::OKAction)), NULL);
	//AddTransition(pSelectionState, NULL, IsOutputSetCondition(_OKAgent), Action((ActionMethod)&ComacNewVersionCmd::OKAction));

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&ComacNewVersionCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&ComacNewVersionCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&ComacNewVersionCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&ComacNewVersionCmd::ElementSelection, NULL, NULL, (void*)1));


	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);		// 一定要显示！

}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean ComacNewVersionCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

CATBoolean ComacNewVersionCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;
			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void ComacNewVersionCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	cout << "## sSelectObjectType:" << sSelectObjectType << endl;

	
	////  Test 0 测试打印出 V_TreeOrder
	//if ( sSelectObjectType == TYPE_ProvidePart || sSelectObjectType == TYPE_ManufacturingPart)																// OPeration
	//{
	//	pFO_OPStartingOcc = _pSelectedOccurrence;
	//	pFO_OPStartingRef = _pSelectedReference;
	//	CATBoolean iAllAtributes = TRUE;

	//	HRESULT hr = fengyHelper::BrowseReference(pFO_OPStartingRef, 1, iAllAtributes, 0);
	//	if (FAILED(hr))
	//	{
	//		fengyHelper::Notify("BrowseReference  KO!");
	//		return;
	//	}
	//}

	//// Test 1
	//CATSystemInfo iSystemInfo /*=NULL*/;
	//CATLibStatus sStatus =  CATGetSystemInfo(&iSystemInfo);
	//if (CATLibSuccess == sStatus)
	//{
	//	cout << "iSystemInfo-HostName :" << iSystemInfo.HostName << endl
	//		<< "iSystemInfo-OSName :" << iSystemInfo.OSName << endl
	//		<< "iSystemInfo-OSVersion :" << iSystemInfo.OSVersion << endl
	//		<< "iSystemInfo-MajorVersion :" << iSystemInfo.MajorVersion << endl
	//		<< "iSystemInfo-MinorVersior :" << iSystemInfo.MinorVersion << endl
	//		<< "iSystemInfo-OSType :" << iSystemInfo.OSType << endl;
	//}
	//if (CATLibError == sStatus)
	//{
	//	cout << "CATGetSystemInfo  ERROR! " << iSystemInfo.HostName << endl;
	//}



	if ((sSelectObjectType == TYPE_Workplan) || (sSelectObjectType == TYPE_CUS_FO_Workplan) /*|| (sSelectObjectType == TYPE_Product)*/ )					// workplan
	{
		pFO_OPFatherOcc = _pSelectedOccurrence;
		pFO_OPFatherRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_FatherWorkPlanEditor);
		pEditor->SetText("COMACCAABatchNewVersion PLM1 https://int-plm.comac.intra:443/3dspace ODREMTlBRUMyMUE4NEU3REI1N0IzMjEyMzk3MDQwMDl8NTAwNzgwfDUwMDc4MHx8fDB8 "
			+ CUSCAAUtilService::GetObjectAttrValue(pFO_OPFatherRef, "PLM_ExternalID")
			+" "
			+ CUSCAAUtilService::GetObjectAttrValue(pFO_OPFatherRef, "V_version"));

	}
}

CATBoolean ComacNewVersionCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}
	if (!CheckSelectObject())
	{
		return FALSE;
	}

	//_strListOPReftitle.RemoveAll();
	//_strListOPInsttitle.RemoveAll();
	// 主函数： 升版动作
	RunNewVersion();

	return FALSE;
}

CATBoolean ComacNewVersionCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}
	if (!CheckSelectObject())
	{
		return FALSE;
	}
	// 主函数： 升版动作
	RunNewVersion();

	return TRUE;
}

CATBoolean ComacNewVersionCmd::CheckSelectObject()
{
	if ( (pFO_OPFatherRef == NULL) && (pFO_OPFatherOcc == NULL) )
	{
		fengyHelper::Notify("请选择 WorkPlan 节点！");
		return FALSE;
	}
	return TRUE;
}

CATBoolean ComacNewVersionCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

//===========================================
//	@func		: RunNewVersion
//	@retval		: void
//	@from		: CopyRight @Comac
//  fengy 		: 2022.1.14 9:34:58			升版
void ComacNewVersionCmd::RunNewVersion()
{
	//	pFO_OPFatherRef	pFO_OPFatherOcc
	CATUnicodeString tmpMsg="";
	HRESULT rc = E_FAIL;

	// 调用批处理 exe？？在batch内部搜索 by id version
	// ===== 法三 
	//CATUnicodeString strPath = "E:/C02 download/A01 小工具/to 虚拟机/notepad.7.7.1.Installer.exe";
	//HINSTANCE hi = ShellExecute(NULL, _T("open"), strPath, NULL, NULL, SW_SHOWNORMAL);

	CATDlgEditor *pEditor = _Panel->GetEditor(ID_FatherWorkPlanEditor);
	CATUnicodeString strCmdline = pEditor->GetText();
	cout << "strCmdline:  " << strCmdline << endl;

	CUSCAAUtilService::StartBatchCmd(strCmdline);

	// 主函数内改名字
	CATUnicodeString strFORev = fengyHelper::GetObjectAttrValue(pFO_OPFatherRef, "CUS_FORev");
	cout << "改前 strFORev:  " << strFORev << endl;

	strFORev = "D-002";
	fengyHelper::SetObjectAttrString(pFO_OPFatherRef, "CUS_FORev", strFORev);		// 写入失败！
	cout << "改后 strFORev:  " << strFORev << endl;


	//// Close window
	//// ===== 法二 
	//CATFrmLayout * pLayout = CATFrmLayout::GetCurrentLayout();
	//if (NULL != pLayout)
	//{
	//	CATFrmWindow * pWnd = pLayout->GetCurrentWindow();
	//	cout << "pWnd Name:  " << pWnd->GetBaseName() << endl;
	//	//cout << "pWnd GetEditorTitle:  " << (CATEditor*)pWnd->GetEditorTitle() << endl;

	//	pWnd->DeleteWindow();			// 貌似 仅仅是关闭窗口~！没有移除session			// CloseWindowFromEditor
	//	cout << "pWnd DeleteWindow   " << endl;
	//}
	//else
	//{
	//	fengyHelper::Notify("杀掉 窗口KO！！");
	//	return;
	//}

	//// ClosePLMSession 
	//// ===== 法一
	//rc = CATPLMSessionServices::ClosePLMSession();
	//if (FAILED(rc))
	//{
	//	cout << "The SESSION is not Closed \n." << endl;
	//	return  ;																		// 返回1 表示KO！
	//}

	// ***********************************************************
	//// 0 -测试点选一个 FO，做升版！
	//// Create a new version of the input PLM Component with this new time

	//CATIAdpPLMIdentificator* opiIDComp = NULL;
	//rc  = fengyHelper::GetRefIdentificator(pFO_OPFatherRef,opiIDComp);
	//if (!opiIDComp  || FAILED(rc) )
	//{
	//	tmpMsg = "CATIPLMNavReference  QI  CATIAdpPLMIdentificator KO!";
	//	cout<< tmpMsg <<endl;
	//	return;
	//}

	//CATTime TimeVersion = CATTime::GetCurrentLocalTime();
	//CATIAdpPLMIdentificator* pNewIdentificatorOnVersionedComp = NULL;
	//rc = CATAdpVersioningServices::NewVersion(opiIDComp, TimeVersion, pNewIdentificatorOnVersionedComp);
	//if ( FAILED(rc))
	//{
	//	fengyHelper::DisplayErrorMessage(rc, "CATAdpVersioningServices::NewVersion");
	//	return;
	//}
	//else
	//	cout << "   a New version has been done" << endl;
	//fengyHelper::Notify("NewVersion OK！！");

	// ***********************************************************

	////   以搜索的方式 进行NewVersion OK
	//CATUnicodeString strTitle = "wpl-14182662-00001931" /*"mass-14182662-00003448"*/ /*"prd-14182662-00097964"*/;				// UAT:  mass-14182662-00000145  TYPE_MBOMAssembly -KO 缺权限
	//CATUnicodeString strType = TYPE_CUS_FO_Workplan;									 
	//CATUnicodeString iKey = "PLM_ExternalID";
	//strTitle = strTitle + "*";
	//CATUnicodeString strRevision = "B";
	//CATListPtrCATIAdpPLMIdentificator olistIdentificator;
	//rc = CUSCAAUtilService::GetObjIdentificator(strTitle, strRevision, olistIdentificator, strType, iKey);
	//int n_Size = olistIdentificator.Size();
	//cout<<"#n_Size: "<< n_Size <<endl;
	//if (n_Size <= 0)
	//{
	//	cout << "==== FAILED  ==== >> GetObjIdentificator ! " << endl;
	//	return  ;
	//}
	//else
	//	cout << "==== OK ==== >> GetObjIdentificator ! " << endl;

	//for(int i =1;i<= n_Size;i++)
	//{
	//	CATTime TimeVersion = CATTime::GetCurrentLocalTime();
	//	CATIAdpPLMIdentificator* opiIDComp = olistIdentificator[i];
	//	CATIAdpPLMIdentificator* pNewIdentificatorOnVersionedComp = NULL;
	//	rc = CATAdpVersioningServices::NewVersion(opiIDComp, TimeVersion, pNewIdentificatorOnVersionedComp);
	//	if (!pNewIdentificatorOnVersionedComp)
	//	{
	//		fengyHelper::DisplayErrorMessage(rc, "CATAdpVersioningServices::NewVersion");
	//		return;
	//	}
	//	else
	//		cout << "   a New version has been done" << endl;
	//}
	

	// 1- 获取该workplan节点下的所有子集节点，放到list内部
	
	// 2- 对list内元素进行升版


	return;
}


