//===================================================================
// COPYRIGHT DS 2018/05/31
//===================================================================
// CUSXMLServices.cpp
// Header definition of class CUSXMLServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/05/31 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CUSXMLServices.h"

// XMLParser
#include "CATIDOMElement.h"
#include "CATIDOMImplementation.h"
#include "CATIDOMText.h"
#include "CATListOfCATUnicodeString.h"
#include "CATIDOMDocumentType.h"
#include "CATIXMLSAX2Factory.h"
//#include "CAAXMLMultiFileStream.h"
#include "CATIXMLInputStream.h"
#include "CATISAXInputSource.h"
#include "CATIDOMNodeList.h"
#include "CATListOfInt.h"
#include "CATIDOMAttr.h"

#include <iostream>
using namespace std;

CATImplementClass(CUSXMLServices,Implementation,CATBaseUnknown,CATNull);



//-----------------------------------------------------------------------------
// CUSXMLServices : constructor
//-----------------------------------------------------------------------------
CUSXMLServices::CUSXMLServices():CATBaseUnknown()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// CUSXMLServices : destructor
//-----------------------------------------------------------------------------
CUSXMLServices::~CUSXMLServices()
{
//
// TODO: Place code here.
//
}

HRESULT CUSXMLServices::ReadXmlFile(CATUnicodeString iPath,CATIDOMDocument_var &oDoc,CATIXMLDOMDocumentBuilder_var & oBuilder)
{
	HRESULT rc=E_FAIL;
	rc = ::CreateCATIXMLDOMDocumentBuilder(oBuilder);
	if(!SUCCEEDED(rc)||NULL_var==oBuilder)
	{
		cout<<"Error: Failed to create CreateCATIXMLDOMDocumentBuilder"<<endl;
		return rc;
	}
	CATIXMLSAX2Factory_var factory=NULL_var;
	rc = ::CreateCATIXMLSAX2Factory(factory);
	if(!SUCCEEDED(rc)||NULL_var==factory)
	{
		cout<<"Error: Failed to create CreateCATIXMLSAX2Factory"<<endl;
		return rc;
	}

	CATListOfCATUnicodeString files;
	files.Append(iPath);
	//CAAXMLMultiFileStream* customStreamImpl = new CAAXMLMultiFileStream(files);
	//CATIXMLInputStream_var customStream = NULL_var;//customStreamImpl;
	//customStreamImpl->Release();
	//customStreamImpl = NULL;
	//if (customStream == NULL_var) 
	//{
	//	cout<<"Error: Failed to create CATIXMLInputStream"<<endl;
	//	return E_FAIL;
	//}
	//CATISAXInputSource_var source;
	//rc = factory->CreateInputSourceFromStream(customStream, "MyCustomSource", source);
	//if (FAILED(rc) || (source == NULL_var)) 
	//{
	//	cout<<"Error: Failed to create CreateInputSourceFromStream"<<endl;
	//	return rc;
	//}
	//CATListOfCATUnicodeString readOptions;
	//readOptions.Append("CATDoValidation");
	//CATListOfCATUnicodeString readOptionValues;
	//readOptionValues.Append("false");
	//rc = oBuilder->Parse(source, oDoc, readOptions, readOptionValues);
	return rc;
}

HRESULT CUSXMLServices::ReadXmlStream(CATUnicodeString iXMLString, CATIDOMDocument_var &oDoc, CATIXMLDOMDocumentBuilder_var & oBuilder)
{
	HRESULT rc = E_FAIL;
	rc = ::CreateCATIXMLDOMDocumentBuilder(oBuilder);
	if (!SUCCEEDED(rc) || NULL_var == oBuilder)
	{
		cout << "Error: Failed to create CreateCATIXMLDOMDocumentBuilder" << endl;
		return rc;
	}
	CATIXMLSAX2Factory_var factory = NULL_var;
	rc = ::CreateCATIXMLSAX2Factory(factory);
	if (!SUCCEEDED(rc) || NULL_var == factory)
	{
		cout << "Error: Failed to create CreateCATIXMLSAX2Factory" << endl;
		return rc;
	}

	//CATListOfCATUnicodeString files;
	//files.Append(iPath);
	//CAAXMLMultiFileStream* customStreamImpl = new CAAXMLMultiFileStream(files);
	//CATIXMLInputStream_var customStream = customStreamImpl;
	//customStreamImpl->Release();
	//customStreamImpl = NULL;
	//if (customStream == NULL_var)
	//{
	//	cout << "Error: Failed to create CATIXMLInputStream" << endl;
	//	return E_FAIL;
	//}
	CATISAXInputSource_var source;
	rc = factory->CreateInputSourceFromMemoryBuffer(iXMLString, "MyCustomSource", source);
	if (FAILED(rc) || (source == NULL_var))
	{
		cout << "Error: Failed to create CreateInputSourceFromStream" << endl;
		return rc;
	}
	CATListOfCATUnicodeString readOptions;
	readOptions.Append("CATDoValidation");
	CATListOfCATUnicodeString readOptionValues;
	readOptionValues.Append("false");
	rc = oBuilder->Parse(source, oDoc, readOptions, readOptionValues);
	return rc;
}

HRESULT CUSXMLServices::ReadDeviceNodesFromXml(CATIDOMDocument_var &iDocument,CATIDOMNodeList_var &oListDeviceNode)
{
	HRESULT rc=E_FAIL;

	if (iDocument == NULL_var)
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return rc;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = iDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return rc;
	}

	rootElement->GetChildNodes(oListDeviceNode);

	return S_OK;
}
HRESULT CUSXMLServices::RemoveParameterNodeFromDevice(CATIDOMNode_var &iDeviceNode,CATIDOMNode_var &iParameter)
{
	HRESULT rc=E_FAIL;
	if (iDeviceNode== NULL_var)
	{
		cout<<"XMLReadAndWrite::RemoveParameterNodeFromDevice == NULL_var"<<endl;
		return rc;
	}
	iDeviceNode->RemoveChild(iParameter);
	return S_OK;
}
HRESULT CUSXMLServices::RemoveDeviceNodeFromXml(CATIDOMDocument* &iDocument,CATIDOMNode_var &iDeviceNode)
{
	HRESULT rc=E_FAIL;

	if (iDocument == NULL_var)
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-oDocument == NULL_var"<<endl;
		return rc;
	}

	CATIDOMElement_var rootElement = NULL_var;
	rc = iDocument->GetDocumentElement(rootElement);
	if (FAILED(rc)||(rootElement == NULL_var))
	{
		cout<<"XMLReadAndWrite::ReadFtrsFromFile-rootElement == NULL_var"<<endl;
		return rc;
	}
	rc=rootElement->RemoveChild(iDeviceNode);
	return S_OK;
}
HRESULT CUSXMLServices::CheckDeviceinXML(CATIDOMNodeList_var &iListDeviceNode,
									  CATUnicodeString& usrDeviceTitle,
									  CATUnicodeString& usrNodeName,
									  CATUnicodeString& usrTextName)
{
	HRESULT rc=E_FAIL;
	if (iListDeviceNode==NULL_var)
	{
		cout<<"XML DeviceNodeList == NULL_var"<<endl;
		return rc;
	}
	unsigned int DeviceNum;
	iListDeviceNode->GetLength(DeviceNum);
	CATIDOMElement_var DeviceElement = NULL_var;
	for (int i=0;i<DeviceNum;i++)
	{
		iListDeviceNode->Item(i,DeviceElement);
		if (DeviceElement != NULL_var)
		{
			CATUnicodeString nodeName("");
			DeviceElement->GetNodeName(nodeName);
			if (nodeName == CATUnicodeString(usrNodeName))
			{
				CATUnicodeString TitleName("");
				//DeviceElement->GetAttribute("Title",TitleName);
				DeviceElement->GetAttribute(usrTextName,TitleName);
				if (TitleName==usrDeviceTitle)
				{
					rc=S_OK;
					break;
				}
			}
	}
	}
	return rc;
}

HRESULT CUSXMLServices::addXMLNode(const CATIDOMDocument_var& m_pXMLDoc,
								const CATIDOMElement_var& pParentElem, 
								CATIDOMElement_var& iopNewElm,
								const CATUnicodeString uName, 
								const CATUnicodeString uValue, 
								const CATListOfCATUnicodeString listAttNames, 
								const CATListOfCATUnicodeString listAttValues, 
								CATBoolean flagHasSon)
{
	HRESULT RC=S_OK;

	//1 创建子节点内容
	RC=m_pXMLDoc->CreateElement(uName,iopNewElm);
	if(SUCCEEDED(RC) && iopNewElm != NULL_var)
	{
		//挂载属性
		for (int i = 1; i <= listAttNames.Size(); i++)
		{
			iopNewElm->SetAttribute(listAttNames[i],listAttValues[i]);
		}

		pParentElem->AppendChild(iopNewElm);

	}
	//4 父节点自动换行
		CATIDOMText_var pBLine = NULL_var;
	m_pXMLDoc->CreateTextNode(CATUnicodeString("\n"), pBLine) ;
	pParentElem->AppendChild(pBLine);
	return RC;
}

HRESULT CUSXMLServices::ModXMLNode(CATIDOMElement_var& ispModElm,const CATListOfCATUnicodeString listAttNames, const CATListOfCATUnicodeString listAttValues)
{
	HRESULT rc=E_FAIL;
	if (!!ispModElm)
	{
		CATIDOMAttr_var ospAttributeNode;
		CATUnicodeString usrAttributeName;
		for (int i = 1; i <=listAttNames.Size(); i++)
		{
			ispModElm->GetAttributeNode(listAttNames[i],ospAttributeNode);
			ospAttributeNode->GetName(usrAttributeName);
			ospAttributeNode->SetValue(listAttValues[i]);
		}
		rc=S_OK;
	}
	return rc;
}


CATUnicodeString CUSXMLServices::GetNodeValue(CATIDOMNode_var spNode, CATUnicodeString iNodeAtt)
{

	CATIDOMElement_var spElement = spNode;

	CATIDOMAttr_var spDOMAttr;
	HRESULT rc = spElement->GetAttributeNode(iNodeAtt, spDOMAttr);

	CATUnicodeString strValue("");
	if (spDOMAttr == NULL_var)
	{
		return strValue;
	}

	rc = spDOMAttr->GetValue(strValue);
	cout << "The Node value is " << strValue << endl;

	return strValue;

}









