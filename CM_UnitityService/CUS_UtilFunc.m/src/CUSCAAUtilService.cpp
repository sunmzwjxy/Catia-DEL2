//===================================================================
// COPYRIGHT  2020/09/18
//===================================================================
// CUSCAAUtilService.cpp
// Header definition of class CUSCAAUtilService
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/18 Creation: Code generated by the 3DS wizard
//===================================================================

//MecModInterfaces Framework
#include "CATIMmiPrtContainer.h"
#include "CATIMmiMechanicalFeature.h"


//CATPLMIdentificationAccess Framework
#include "CATPLMCoreType.h"

//ObjectSpecsModeler Framework
//#include "CATIPartRequest.h"

// CATPLMComponentInterfaces Framework
#include "CATIPLMNavInstance.h"
#include "CATIPLMNavRepInstance.h"
#include "CATIPLMNavReference.h"
#include "CATIPLMNavRepReference.h"
#include "CATIPLMNavEntity.h"
#include "CATListPtrCATIPLMNavEntity.h"

// CAT3DPhysicalRepInterfaces Framework
#include "CATIPsiRepresentationLoadMode.h"
#include "CATIMmiUseBodyContent.h"
// System Framework
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CUSCAAUtilService.h"
// others
#include "iostream.h"
//-----------------------------------------------------------------------------
// CUSCAAUtilService : constructor
//-----------------------------------------------------------------------------
CUSCAAUtilService::CUSCAAUtilService():CATBaseUnknown()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// CUSCAAUtilService : destructor
//-----------------------------------------------------------------------------

CUSCAAUtilService::~CUSCAAUtilService()
{
//
// TODO: Place code here.
//
}





CATUnicodeString CUSCAAUtilService::GetAliasName(CATBaseUnknown * ipBaseUnknown)
{
	CATUnicodeString ElementName("");

	if (NULL != ipBaseUnknown)
	{

		CATIAlias_var spAlias = ipBaseUnknown;

		if (NULL_var != spAlias)
		{
			ElementName = spAlias->GetAlias();

		}

	}

	return ElementName;
}

CATUnicodeString CUSCAAUtilService::GetObjectType(CATBaseUnknown * ipBaseUnknown)
{

	CATUnicodeString ElementType("");
	if (NULL != ipBaseUnknown) ElementType = ipBaseUnknown->GetImpl()->IsA();

	return ElementType;

}

CATUnicodeString CUSCAAUtilService::GetObjectKnowledgeType(CATBaseUnknown * ipBaseUnknown)
{

	CATUnicodeString ElementType("");
	//cout << "GetObjectKnowledgeType 1111111111 ! " << endl;
	if (NULL == ipBaseUnknown)
		return ElementType;
	//cout << "GetObjectKnowledgeType 222222222222 " << endl;

	CATIPLMComponent * spObjectComp = NULL;
	ipBaseUnknown->QueryInterface(IID_CATIPLMComponent,(void**)&spObjectComp);
	if(spObjectComp == NULL)
		return ElementType;
	//cout << "GetObjectKnowledgeType 333333333 " << endl;

	CATIAdpType * spObjAdpType = NULL;
	spObjectComp->GetAdpType(spObjAdpType);
	_RELEASE_PTR_(spObjectComp);
	//cout << "GetObjectKnowledgeType 444444444444 " << endl;

	if(spObjAdpType == NULL)
		return ElementType;
	//cout << "GetObjectKnowledgeType 55555555555 " << endl;

	CATIType_var spObjectType;
	CATPLMTypeServices::GetKweTypeFromAdpType(spObjAdpType, (CATIType *&)spObjectType);
	if (spObjectType == NULL_var)
		return ElementType;
	//cout << "GetObjectKnowledgeType 66666666666 " << endl;

	ElementType = spObjectType->Name();
	CATUnicodeString ObjectType = spObjectType->UserName();
	cout << "# ObjectType : " << ObjectType << endl;

	_RELEASE_PTR_(spObjAdpType);
	cout << "# return ElementType : " << ElementType << endl;

	return ElementType;

}
//-----------------------------------------------------------------------------
// HighlightElement 
//-----------------------------------------------------------------------------
HRESULT CUSCAAUtilService::HighlightElement(CATBaseUnknown * ipOccurrence,
	CATBaseUnknown * ipRepInstance,
	CATBaseUnknown * ipElement)
{
	HRESULT rc = E_INVALIDARG;
	if (NULL != ipElement)
	{
		rc = S_OK;

		// Retrieve the HSO bag
		CATHSO * pHSO = NULL;
		CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();
		if (NULL != pEditor)
		{
			pHSO = pEditor->GetHSO();
			if (NULL == pHSO)  rc = E_UNEXPECTED;
		}
		else  rc = E_UNEXPECTED;

		// Create the PathElement object corresponding to the selected Element
		CATPathElement * pPathElement = NULL;
		//CUSCAAUtilService * pCAAUtilService;
		//if (SUCCEEDED(rc))  rc = pCAAUtilService->CreatePathElement(&pPathElement, ipOccurrence, ipRepInstance, ipElement);

		// Add the PathElement into the HSO 
		if (SUCCEEDED(rc)) pHSO->AddElement(pPathElement);
		if (NULL != pPathElement) { pPathElement->Release();  pPathElement = NULL; }
	}
	return rc;
}


HRESULT CUSCAAUtilService::CreatePathElement(CATPathElement ** opPathElement,
	CATBaseUnknown  * ipOccurrence,
	CATBaseUnknown  * ipRepInstance,
	CATBaseUnknown  * ipElement)
{
	HRESULT rc = E_INVALIDARG;
	if (NULL != opPathElement && NULL != ipElement)
	{
		// Initialisation
		*opPathElement = NULL;
		rc = S_OK;

		CATPathElement * pContextualPath = NULL;
		if (NULL != ipOccurrence && NULL != ipRepInstance)
		{
			// Retrieve Product Instance path
			CATPathElement * pProductInstancePath = NULL;
			CATIBuildPath * pProductInstanceBuildPath = NULL;
			rc = ipOccurrence->QueryInterface(IID_CATIBuildPath, (void**)&pProductInstanceBuildPath);
			if (SUCCEEDED(rc)) rc = pProductInstanceBuildPath->ExtractPathElement(NULL, &pProductInstancePath);
			if (NULL != pProductInstanceBuildPath) { pProductInstanceBuildPath->Release(); pProductInstanceBuildPath = NULL; }

			// Retrieve Representation Instance path
			//if (SUCCEEDED(rc))
			//{
			//	CATIBuildPath * pRepresentationInstanceBuildPath = NULL;
			//	rc = ipRepInstance->QueryInterface(IID_CATIBuildPath, (void**)&pRepresentationInstanceBuildPath);
			//	if (SUCCEEDED(rc)) rc = pRepresentationInstanceBuildPath->ExtractPathElement(pProductInstancePath, &pContextualPath);
			//	if (NULL != pRepresentationInstanceBuildPath) { pRepresentationInstanceBuildPath->Release(); pRepresentationInstanceBuildPath = NULL; }
			//}
			if (NULL != pProductInstancePath) { pProductInstancePath->Release(); pProductInstancePath = NULL; }

			// Retrieve Object path in order to get the Mechanical Part Feature
			CATBaseUnknown * pMechanicalPart = NULL;
			if (SUCCEEDED(rc))
			{
				CATIBuildPath * pBuildPath = NULL;
				rc = ipElement->QueryInterface(IID_CATIBuildPath, (void**)&pBuildPath);
				if (SUCCEEDED(rc))
				{
					CATPathElement * pObjectPath = NULL;
					rc = pBuildPath->ExtractPathElement(NULL, &pObjectPath);
					if (SUCCEEDED(rc))
					{
						pObjectPath->InitToTopElement();
						pMechanicalPart = pObjectPath->NextChildElement();
					}
				}
				if (NULL != pBuildPath) { pBuildPath->Release(); pBuildPath = NULL; }
			}

			// Build Mechanical Part Feature path -> the contextual path has to contain the Mechanical Part Feature
			if (SUCCEEDED(rc))
			{
				pContextualPath->InitToLeafElement();
				//pContextualPath->AddChildElement(pMechanicalPart);
			}
			if (NULL != pMechanicalPart) { pMechanicalPart->Release(); pMechanicalPart = NULL; }
		}

		// Retrieve the complete Object path
		if (SUCCEEDED(rc))
		{
			CATIBuildPath * pBuildPath = NULL;
			rc = ipElement->QueryInterface(IID_CATIBuildPath, (void**)&pBuildPath);

			// Here we finally get the value of opPathElement, our CATPathElement
			if (SUCCEEDED(rc)) rc = pBuildPath->ExtractPathElement(pContextualPath, opPathElement);

			if (NULL != pBuildPath) { pBuildPath->Release(); pBuildPath = NULL; }
		}
		if (NULL != pContextualPath) { pContextualPath->Release(); pContextualPath = NULL; }
	}
	return rc;
}

CATUnicodeString CUSCAAUtilService::GetAttributeValueFromList(CATBaseUnknown * ipBaseUnknown,
	CATUnicodeString attributeName)
{
	cout << "CUSCAAUtilService::GetResourceUDFTypeRef" << endl;

	CATIPLMComponent *spCompObject = NULL;
	HRESULT rc = ipBaseUnknown->QueryInterface(IID_CATIPLMComponent, (void**)&spCompObject);
	if (spCompObject == NULL)
		return S_FALSE;

	CATICkeObject_var spCkeObj = NULL_var;
	rc = spCompObject->QueryInterface(IID_CATICkeObject, (void**)&spCkeObj);

	CATListOfCATUnicodeString ioAttributeNameList, ioAttributeValueAsStringList;
	CATLISTV(CATICkeParm_var)  ioAttributeValueList;
	rc = CATCkeObjectAttrReadServices::GetListOfAttributes(spCkeObj, ioAttributeNameList,
		ioAttributeValueAsStringList, ioAttributeValueList);

	CATUnicodeString stringUDFType("");
	cout << "The number attribute is " << ioAttributeNameList.Size() << endl;
	for (int i = 1; i <= ioAttributeNameList.Size(); i++) {
		CATUnicodeString attrName = ioAttributeNameList[i];
		cout << "Attribute name is " << attrName << endl;
		if (attrName == attributeName) {
			stringUDFType = ioAttributeValueAsStringList[i];
			break;
		}
	}
	return stringUDFType;
}
CATUnicodeString CUSCAAUtilService::GetObjectAttrValue(CATBaseUnknown * ipBaseUnknown, CATUnicodeString sAttrName)
{
	CATUnicodeString sExternalID("");
	if (ipBaseUnknown == NULL)
		return sExternalID;
	CATIPLMComponent *spCompObject = NULL;
	HRESULT rc = ipBaseUnknown->QueryInterface(IID_CATIPLMComponent, (void**)&spCompObject);
	if (spCompObject == NULL)
		return S_FALSE;

	CATICkeObject * spCkeObject = NULL;
	rc = spCompObject->QueryInterface(IID_CATICkeObject, (void**)&spCkeObject);
	_RELEASE_PTR_(spCompObject);
	if (spCkeObject == NULL)
		return sExternalID;

	//PLM_ExternalID    majorrevision    revision
	CATCkeObjectAttrReadServices::GetValueAsString(spCkeObject, sAttrName, sExternalID);
	//cout << "==== OK ==== >> sExternalID!: " << sExternalID  << endl;

	_RELEASE_PTR_(spCkeObject);
	return sExternalID;
}

//Int数字转字符串
CATUnicodeString CUSCAAUtilService::IntToStr(int i)
{
	CATUnicodeString usStr;
	usStr.BuildFromNum(i, "%d");
	return usStr;
}

HRESULT CUSCAAUtilService::SetObjectAttrString(CATBaseUnknown * ipBaseUnknown, CATUnicodeString sAttrName, CATUnicodeString sAttrValue)
{
	if (sAttrName == "")
		return S_FALSE;
	if (ipBaseUnknown == NULL)
		return S_FALSE;
	CATIPLMComponent *spCompObject = NULL;
	HRESULT rc = ipBaseUnknown->QueryInterface(IID_CATIPLMComponent, (void**)&spCompObject);
	if(spCompObject == NULL)
		return S_FALSE;

	CATICkeObject * spCkeObject = NULL;
	rc = spCompObject->QueryInterface(IID_CATICkeObject, (void**)&spCkeObject);
	_RELEASE_PTR_(spCompObject);
	if (spCkeObject == NULL)
		return S_FALSE;

	rc = CATCkeObjectAttrWriteServices::SetValueWithString(spCkeObject, sAttrName, sAttrValue);
	_RELEASE_PTR_(spCkeObject);
	return rc;
}

void CUSCAAUtilService::ErrorMessage(const CATUnicodeString& srErrorMessageTitle, const CATUnicodeString& srErrorMessageContent)
{

	CATApplicationFrame* pAppFrame = CATApplicationFrame::GetFrame();
	if (pAppFrame != NULL) {
		CATDlgNotify *pNotifyDlg = new CATDlgNotify(pAppFrame->GetApplicationDocument(), "Error Message", CATDlgNfyWarning);
		if (NULL != pNotifyDlg) {
			pNotifyDlg->DisplayBlocked
			(srErrorMessageContent,
				srErrorMessageTitle);
			pNotifyDlg->RequestDelayedDestruction();
		}
	}
}

// fengy 2021.12.22
void CUSCAAUtilService::Notify(CATUnicodeString iMsg,
	CATUnicodeString iTitle)
{
	CATDlgNotify* piNotifyDlg = new CATDlgNotify((CATApplicationFrame::GetFrame())->GetMainWindow(), "Unauthorized Access", CATDlgNfyOK);
	if (NULL != piNotifyDlg)
	{
		cout << "Notify OK！" << endl;
		piNotifyDlg->DisplayBlocked(iMsg, iTitle);

	}
	//cout << "  dlg GetText:" << piNotifyDlg->GetText()<< endl;

	return;
}

HRESULT CUSCAAUtilService::GetObjReference(CATUnicodeString iKeyId, CATUnicodeString iRevisionId,
	CATListPtrCATIPLMNavReference  & olistReference, CATUnicodeString strCompType, CATUnicodeString iKey)		// 未写默认形参Revision: A.1 
{
	CATListPtrCATIAdpPLMIdentificator olistIdentificator;
	//cout<<"GetObjReference ====> iKey:"<< iKey <<endl;
	HRESULT rc = GetObjIdentificator(iKeyId, iRevisionId, olistIdentificator, strCompType,iKey);
	int n_Size = olistIdentificator.Size();
	if (n_Size <= 0)
		return E_FAIL;

	CATOmbLifeCycleRootsBag Bag;
	CATAdpOpenParameters params(CATAdpExpandParameters::Authoring);
	CATAdpOpenParameters::LoadingMode iLoadMode = params.EditMode;
	params.SetLoadingMode(iLoadMode);
	CATAdpOpener opener(Bag, params);
	CATAdpComponentData oOpenedComponents;
	rc = opener.CompleteAndOpen(olistIdentificator, oOpenedComponents);

	for (int i = 1; i <= n_Size; i++)
	{
		CATIPLMNavReference * spNavRef = NULL;
		oOpenedComponents.GetComponent(olistIdentificator[i],IID_CATIPLMNavReference,(void**)&spNavRef);
		if (spNavRef != NULL) {
			olistReference.Append(spNavRef);
		}
	}
	return S_OK;
}
//
HRESULT CUSCAAUtilService::GetObjIdentificator(CATUnicodeString iKeyId, CATUnicodeString iRevision,
	CATListPtrCATIAdpPLMIdentificator & olistSourceComponent, CATUnicodeString strCompType, CATUnicodeString iKey)
{
	cout << "CUSCAAUtilService :: =======GetObjReference Begin...========" << endl;
	//cout << "GetObjIdentificator ====> iKey:" << iKey << endl;

	HRESULT rc = E_FAIL;

	rc = QueryObjectFromDB(strCompType, iKeyId, iRevision, olistSourceComponent, iKey);
	if (FAILED(rc))
	{
		cout << "CUSCAAUtilService :: Failed to query the data [ " << iKeyId << " ] [ " << iRevision << " ] " << "in [ " << strCompType << " ]type" << endl;
		//return E_FAIL;
	}
	else
		cout << "CUSCAAUtilService :: Success to query the data [ " << iKeyId << " ] [ " << iRevision << " ] " << "in [ " << strCompType << " ]type" << endl;

	cout << "CUSCAAUtilService :: =======GetObjReference End...========" << endl;
	return rc;
}

HRESULT CUSCAAUtilService::QueryObjectFromDB(CATUnicodeString iObjType, CATUnicodeString iKeyId,
	CATUnicodeString iObjectrevision, CATListPtrCATIAdpPLMIdentificator & olistComponent, CATUnicodeString iKey)
{
	cout << "CUSCAAUtilService :: =======QueryObjectFromDB Begin...========" << endl;
	HRESULT rc = E_FAIL;
	//cout << "QueryObjectFromDB ====> iKey:" << iKey << endl;

	// Retrieve the Type of the object
	CATIType_var spCATITypeOnPLMType;
	rc = RetrieveType(iObjType, spCATITypeOnPLMType);
	if (FAILED(rc)) return E_FAIL;

	//Create attribute set
	CATAdpPLMQueryAttributeSet objPLMQueryAttrSet;
	if (CATUnicodeString("PLM_ExternalID") == iKey)							// CATUnicodeString 必须要加上！！！
		rc = objPLMQueryAttrSet.AddStringAttribute("PLM_ExternalID", iKeyId);		// title
	else if (CATUnicodeString("name") == iKey)
		rc = objPLMQueryAttrSet.AddStringAttribute("name", iKeyId);				// Name
	else if (CATUnicodeString("V_Name") == iKey)
		rc = objPLMQueryAttrSet.AddStringAttribute("V_Name", iKeyId);				// Title
	else if (CATUnicodeString("majorrevision") == iKey)
		rc = objPLMQueryAttrSet.AddStringAttribute("majorrevision", iKeyId);		// Major Vision
	else if (CATUnicodeString("revision") == iKey)
		rc = objPLMQueryAttrSet.AddStringAttribute("V_isLastVersion", "true");			 
	else
	{
		cout << " CUSCAAUtilService::QueryObjectFromDB 类型错误 iKey：" << iKey << endl;
		return E_FAIL;
	}

	////rc = objPLMQueryAttrSet.AddStringAttribute("PLM_ExternalID", iExternalId);
	//rc = objPLMQueryAttrSet.AddStringAttribute("name", iAttrId);
	////rc = objPLMQueryAttrSet.AddStringAttribute("V_Name", iTitleId);
	////rc = objPLMQueryAttrSet.AddStringAttribute("majorrevision",iObjectrevision);
	////rc = objPLMQueryAttrSet.AddStringAttribute("V_isLastVersion", "true");

	if(iObjectrevision != "")
		rc = objPLMQueryAttrSet.AddStringAttribute("revision", iObjectrevision);

	if (FAILED(rc)) return E_FAIL;

	//Query filter
	CATAdpPLMQueryFilter objPLMQueryFilter(spCATITypeOnPLMType, objPLMQueryAttrSet, CATAdpPLMQueryAttributeOperator::AND);
	objPLMQueryFilter.ReturnQueryAttributes(CATAdpPLMQueryFilter::CompleteQueryMaskAttributes);
	CATAdpPLMComponentsInfos oComponentsInfos;
	objPLMQueryFilter.CaseSensitiveMode();
	rc = CATAdpPLMExtendedQueryServices::GetElementsFromQueryFilter(objPLMQueryFilter, oComponentsInfos);

	cout << "CUSCAAUtilService :: Number of components Found [" << oComponentsInfos.Size() << " ]" << endl;
	if (FAILED(rc)) {
		cout << "CUSCAAUtilService :: Failed get Element from query filter " << endl;
		return E_FAIL;
	}

	//Retrieving the identificator from  ComponentInfo Retrieved from Query
	CATAdpPLMComponentsInfosIter iterator = oComponentsInfos.GetIterator();
	CATAdpPLMComponentInfos oInfos;

	CATIAdpPLMIdentificator * oCompIdentifier = NULL;
	do {
		rc = iterator.NextInfos(oCompIdentifier, oInfos);
		if(oCompIdentifier)
			olistComponent.Append(oCompIdentifier);
	} while (oCompIdentifier != NULL);
	
	//if (SUCCEEDED(rc) && NULL != oCompIdentifier)
	//{
	//	CATIAdpType* objPLMAdp = NULL;
	//	oCompIdentifier->GetAdpType(objPLMAdp);
	//	CATUnicodeString AliasName = "";
	//	objPLMAdp->GetAlias(AliasName);
	//	cout << "CUSCAAUtilService :: Name of the component [ " << AliasName << " ]" << endl;
	//}
	cout << "CUSCAAUtilService :: =======QueryObjectFromDB End...========" << endl;
	return rc;
}


HRESULT CUSCAAUtilService::RetrieveType(CATUnicodeString iObjType, CATIType_var & spoPLMType)
{
	cout << "CUSCAAUtilService :: =======RetrieveType Begin...========" << endl;
	HRESULT rc;
	CATBoolean bPLMTypeFound = FALSE;
	rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType(iObjType, spoPLMType);
	if (NULL_var == spoPLMType)
	{
		rc = CATCkePLMNavCustoAccessPublicServices::RetrieveCustoType(iObjType, spoPLMType);
		if (SUCCEEDED(rc) && (NULL_var != spoPLMType))
		{
			bPLMTypeFound = TRUE;
			cout << "CUSCAAUtilService :: Success to RetrieveCustoType " << (spoPLMType->Name()).ConvertToChar() << endl;
		}
	}
	else
	{
		bPLMTypeFound = TRUE;
		cout << "# CUSCAAUtilService :: Success to RetrieveKnowledgeType : " << (spoPLMType->Name()).ConvertToChar() << endl;		//正确的输出类型！
	}

	if (bPLMTypeFound == FALSE)
	{
		cout << "CUSCAAUtilService :: Failed to retrieve Custo and Knowledge types : Provide right PLM type" << endl;
		rc = CATCkePLMNavSpecializationAccessPublicServices::RetrieveSpecializationType(iObjType, spoPLMType);
		if (SUCCEEDED(rc))
		{
			cout << "CUSCAAUtilService :: Success to RetrieveSpecializationType " << (spoPLMType->Name()).ConvertToChar() << endl;
		}
		else
			cout << "CUSCAAUtilService :: RetrieveType FAILED! " << endl;

	}
	cout << "CUSCAAUtilService :: =======RetrieveType End...========" << endl;
	return rc;
}


CATListOfCATUnicodeString CUSCAAUtilService::GetListStringValue(CATUnicodeString sInputLine,CATUnicodeString splitString)
{
	CATListOfCATUnicodeString olistString;//= new CATUnicodeString;
	if (sInputLine == "" || splitString == "")
		return olistString;

	//CATUnicodeChar splitChar;
	//splitChar.BuildFromChar(splitString.ConvertToChar());

	int splitLength = splitString.GetLengthInChar();

	do {
		int n_index = sInputLine.SearchSubString(splitString);
		if (n_index > 0)
		{
			olistString.Append(sInputLine.SubString(0, n_index));
			sInputLine = sInputLine.SubString(n_index + splitLength, sInputLine.GetLengthInChar()- n_index- splitLength);
		}
		else if(sInputLine != "")
		{
			olistString.Append(sInputLine);
			sInputLine = "";
		}

	} while (sInputLine != "");

	return olistString;
}

CATUnicodeString CUSCAAUtilService::GetSelectComboValue(CATDlgCombo* ipCombo)
{
	int nIndex = ipCombo->GetSelect();
	CATUnicodeString sLineValue("");
	ipCombo->GetLine(sLineValue, nIndex);
	return sLineValue;
}

CATUnicodeString CUSCAAUtilService::GetSelectComboValue(CATDlgCombo* ipCombo, CATUnicodeString sNlsFileName, CATUnicodeString sNlsKeyValue, CATUnicodeString splitChar)
{
	CATUnicodeString sKeyRange = CATMsgCatalog::BuildMessage((CATString)sNlsFileName, (CATString)sNlsKeyValue);
	CATListOfCATUnicodeString listKeyRange = CUSCAAUtilService::GetListStringValue(sKeyRange, splitChar);

	int lineCount = ipCombo->GetLineCount();

	int nIndex = ipCombo->GetSelect();

	if (lineCount == listKeyRange.Size())
		return listKeyRange[nIndex + 1];		 
	else
		return "";
}

// fengy 2022.1.12  new
CATListOfCATUnicodeString CUSCAAUtilService::GetComboValueList(CATDlgCombo* ipCombo, CATUnicodeString sNlsFileName, CATUnicodeString sNlsKeyValue, CATUnicodeString splitChar)
{
	CATUnicodeString sKeyRange = CATMsgCatalog::BuildMessage((CATString)sNlsFileName, (CATString)sNlsKeyValue);
	CATListOfCATUnicodeString listKeyRange = CUSCAAUtilService::GetListStringValue(sKeyRange, splitChar);
	return listKeyRange;
}

void CUSCAAUtilService::ShowComboValue(CATDlgCombo* ipCombo, CATUnicodeString sNlsFileName,CATUnicodeString sNlsValue, CATUnicodeString splitChar)
{
	CATUnicodeString sProcessRange = CATMsgCatalog::BuildMessage((CATString)sNlsFileName, (CATString)sNlsValue);
	CATListOfCATUnicodeString listRange = CUSCAAUtilService::GetListStringValue(sProcessRange, splitChar);

	//ID_ManufactureLineEditor   ID_ProcessUnitEditor
	for (int i = 1; i <= listRange.Size(); i++)
	{
		ipCombo->SetLine(listRange[i], i - 1);
	}
}

void CUSCAAUtilService::ShowComboValue(CATDlgCombo* ipCombo, CATListOfCATUnicodeString iValueList)
{
	//ID_ManufactureLineEditor   ID_ProcessUnitEditor
	for (int i = 1; i <= iValueList.Size(); i++)
	{
		ipCombo->SetLine(iValueList[i], i - 1);
	}
}

CATIPLMNavOccurrence * CUSCAAUtilService::GetRootOcc(CATIPLMNavOccurrence * ipObjectOcc)
{
	CATIPLMNavOccurrence * oRootOcc;
	CATIPLMNavOccurrence * piFatherOcc;
	do {
		ipObjectOcc->GetFather(piFatherOcc);
		oRootOcc = ipObjectOcc;
		ipObjectOcc = piFatherOcc;
	} while (piFatherOcc != NULL);
	ReleasePointer(piFatherOcc);
	return oRootOcc;
}

void CUSCAAUtilService::ReleasePointer(CATBaseUnknown * ptr)
{
	if (NULL != (ptr)) { (ptr)->Release(); (ptr) = NULL; }
}

HRESULT CUSCAAUtilService::QueryDBExistID(CATUnicodeString iObjType, CATUnicodeString iExternalID, CATListOfCATUnicodeString & olistExistID)
{
	HRESULT rc = E_INVALIDARG;

	//CATUnicodeString sTypeQuery, sExternalIDQuery, sMajorQuery, sLatestObjMaturity, sLatestMajor;

	CATAdpIdentificationSet IdentificationlAttributeSet;
	rc = IdentificationlAttributeSet.AddAttribute("PLM_ExternalID", iExternalID);
	if (FAILED(rc)) { return rc; }


	CATIType_var spCATITypeOnPLMType;
	rc = RetrieveType(iObjType, spCATITypeOnPLMType);
	if (FAILED(rc)) return E_FAIL;

	CATLISTP(CATAdpQueryResult) QueryResults;
	rc = CATAdpPLMQueryServices::GetElementsFromAttributes(spCATITypeOnPLMType, IdentificationlAttributeSet, QueryResults);
	if (FAILED(rc)) { return rc; }

	int nObjResult = QueryResults.Size();
	if (0 == nObjResult) { return rc; }

	CATAdpQueryResult* pQueryResult = NULL;
	CATAdpAttributeSet  spAdpAttributeSet;
	int oSetIndex;
	CATString oAttributeID;
	CATUnicodeString oAttributeValue;
	CATAdpQueryResult *tempResult = NULL;
	for (int i = 1; i <= nObjResult; i++)
	{
		tempResult = QueryResults[i];
		oSetIndex = 0;
		CATUnicodeString tempAttrValue;
		tempResult->GetAttributeSet(spAdpAttributeSet);
		rc = spAdpAttributeSet.NextAttribute(oSetIndex, oAttributeID, tempAttrValue);
		cout << endl << "QueryDBExistID oAttributeID &  tempAttrValue " << oAttributeID << " : " << tempAttrValue<< endl << endl ;
		olistExistID.Append(tempAttrValue);
	}

	return S_OK;
}

// fengy 2021.11.25 重写 V_Name 搜索
HRESULT CUSCAAUtilService::QueryDBExistIDbyTitle(CATUnicodeString iObjType, CATUnicodeString iV_Name, CATListOfCATUnicodeString & olistExistID)
{
	HRESULT rc = E_INVALIDARG;

	//CATUnicodeString sTypeQuery, sExternalIDQuery, sMajorQuery, sLatestObjMaturity, sLatestMajor;

	CATAdpIdentificationSet IdentificationlAttributeSet;
	rc = IdentificationlAttributeSet.AddAttribute("V_Name", iV_Name);
	if (FAILED(rc)) { return rc; }


	CATIType_var spCATITypeOnPLMType;
	rc = RetrieveType(iObjType, spCATITypeOnPLMType);
	if (FAILED(rc)) return E_FAIL;

	CATLISTP(CATAdpQueryResult) QueryResults;
	rc = CATAdpPLMQueryServices::GetElementsFromAttributes(spCATITypeOnPLMType, IdentificationlAttributeSet, QueryResults);
	if (FAILED(rc)) { return rc; }

	int nObjResult = QueryResults.Size();
	if (0 == nObjResult) { return rc; }

	CATAdpQueryResult* pQueryResult = NULL;
	CATAdpAttributeSet  spAdpAttributeSet;
	int oSetIndex;
	CATString oAttributeID;
	CATUnicodeString oAttributeValue;
	CATAdpQueryResult *tempResult = NULL;
	for (int i = 1; i <= nObjResult; i++)
	{
		tempResult = QueryResults[i];
		oSetIndex = 0;
		CATUnicodeString tempAttrValue;
		tempResult->GetAttributeSet(spAdpAttributeSet);
		rc = spAdpAttributeSet.NextAttribute(oSetIndex, oAttributeID, tempAttrValue);
		cout << endl << "QueryDBExistIDbyTitle oAttributeID &  tempAttrValue " << oAttributeID << " & " << tempAttrValue << endl << endl;
		olistExistID.Append(tempAttrValue);
	}

	return S_OK;
}
HRESULT CUSCAAUtilService::RetrieveRootComp(CATIPLMNavReference *& opRootEditorRef)
{
	CATFrmEditor * pEditor = CATFrmEditor::GetCurrentEditor();		// 从当前的 editor 获取 root 所在 list
	CATListPtrCATIPLMComponent rootPLMCompList;
	HRESULT hr = CATPLMComponentInterfacesServices::GetEditedRootPLMComponents(pEditor, rootPLMCompList);

	int nbPLMComp = rootPLMCompList.Size();
	if (nbPLMComp <= 0)
		return hr;

	CATIPLMComponent * spRootComp = rootPLMCompList[1];

	hr = spRootComp->QueryInterface(IID_CATIPLMNavReference, (void**)&opRootEditorRef);

	return hr;
}
CATUnicodeString CUSCAAUtilService::GetNameFormat(CATUnicodeString sExternalId)
{
	CATUnicodeString sFormatName("");

	int nIndex = sExternalId.SearchSubString("-",0, CATUnicodeString::CATSearchModeBackward);
	if (nIndex <= 0)
		sFormatName = sExternalId;
	else
		sFormatName = sExternalId.SubString(0, nIndex);

	return sFormatName;
}

HRESULT CUSCAAUtilService::CopyObjectAttribute(CATIPLMNavReference * ipSourceObjectRef, CATIPLMNavReference * ipTargetObjectRef)
{
	cout << "CUSCAAUtilService::CopyObjectAttribute" << endl;

	CATICkeObject *piCkeSourceObject = NULL;
	HRESULT rc = ipSourceObjectRef->QueryInterface(IID_CATICkeObject, (void**)&piCkeSourceObject);
	if (FAILED(rc) || (NULL == piCkeSourceObject)) {
		cout << "CUSCAAUtilService::Query the CATICkeObject failed" << endl;
		return S_FALSE;
	}

	CATListValCATAttributeInfos ListOfSourceAttributeInfos;
	rc = CATCkePLMNavPublicServices::ListAttributesFromObject(CATCkePLMTypeAttrServices::All, piCkeSourceObject, ListOfSourceAttributeInfos, FALSE);

	int iSizeList = ListOfSourceAttributeInfos.Size();
	cout << " CUSCAAUtilService::There are " << iSizeList << " attributes" << endl;
	if (iSizeList <= 0)
	{
		cout << " CUSCAAUtilService::no attribute in object" << endl;
		return S_FALSE;
	}


	CATICkeObject *piCkeTargetObject = NULL;
	rc = ipTargetObjectRef->QueryInterface(IID_CATICkeObject, (void**)&piCkeTargetObject);
	if (FAILED(rc) || (NULL == piCkeTargetObject)) {
		cout << "CUSCAAUtilService::Query the CATICkeObject failed" << endl;
		return S_FALSE;
	}

	CATUnicodeString sSourceExternalID("");
	for (int i = 1; i <= iSizeList; i++)
	{
		CATAttributeInfos AttrInfo = ListOfSourceAttributeInfos[i];

		CATUnicodeString attrName, stringValue;
		attrName = AttrInfo.Name();

		//string
		if (attrName == "V_CustoDiscipline" || attrName == "V_fromExternalID" ||
			attrName == "V_versionComment" || 
			attrName == "V_Name" || attrName == "V_description")
		{
			CATCkeObjectAttrReadServices::GetValueAsString(piCkeSourceObject, attrName, stringValue);
			cout << "   Attribute  and Value is :	" << attrName << " " << stringValue.ConvertToChar() << "\n" << endl;
			rc = CATCkeObjectAttrWriteServices::SetValueWithString(piCkeTargetObject, attrName, stringValue);
		}

		//boolean
		if (attrName == "KeyPosion" || attrName == "V_UseGanttTimeSolver")
		{
			CATBoolean booleanValue = FALSE;
			CATCkeObjectAttrReadServices::GetValueAsBoolean(piCkeSourceObject, attrName, booleanValue);
			cout << "   Attribute Value :	" << stringValue.ConvertToChar() << "\n" << endl;
			rc = CATCkeObjectAttrWriteServices::SetValueWithBoolean(piCkeTargetObject, attrName, booleanValue);
		}

		//real
		if (attrName == "V_MeasuredTime" || attrName == "V_EstimatedTime_AddedValueRatio" ||
			attrName == "V_EstimatedTime" || attrName == "V_MaterialScrap")
		{
			double realValue;
			CATCkeObjectAttrReadServices::GetValueAsReal(piCkeSourceObject, attrName, realValue);
			cout << "   Attribute Value :	" << stringValue.ConvertToChar() << "\n" << endl;
			rc = CATCkeObjectAttrWriteServices::SetValueWithReal(piCkeTargetObject, attrName, realValue);
		}

		//int		
		if (attrName == "V_TimeMode" || attrName == "V_sec_level")
		{
			int intValue;
			CATCkeObjectAttrReadServices::GetValueAsInteger(piCkeSourceObject, attrName, intValue);
			cout << "   Attribute Value :	" << stringValue.ConvertToChar() << "\n" << endl;
			rc = CATCkeObjectAttrWriteServices::SetValueWithInteger(piCkeTargetObject, attrName, intValue);
		}
	}
	ListOfSourceAttributeInfos.RemoveAll();

	_RELEASE_PTR_(piCkeSourceObject);

	return rc;
}

#include "PLMISetupDataFinder.h"
#include "PLMSetupDataGlobalFunctions.h"
#include "PLMCLGPublicLibraryNavServices.h"
HRESULT CUSCAAUtilService::RetrieveTxtFromDataSetup(const CATUnicodeString iKey, CATUnicodeString &ioValue)
{
	HRESULT rc;
	CATUnicodeString SetupDataFinderId = "Find Txt";
	PLMISetupDataFinder_var setupDataFinder = PLMSetupDataGlobalFunctions::GetPLMSetupDataFinder(SetupDataFinderId);
	if (setupDataFinder == NULL_var)
		return E_FAIL;

	CATUnicodeString resoureId = "KnowledgeResources|Config_TXT";
	CATUnicodeString oTextDocument = "";

	rc = setupDataFinder->FindDocument(resoureId,NULL_var, oTextDocument);

	if ((rc == E_FAIL) || (oTextDocument == ""))
		return rc;

	unsigned int oFileDescriptor = 0;
	rc = CATFOpen(&oTextDocument, "r", &oFileDescriptor);
	char line[1000];
	rc = CATFGets(line, 1000, oFileDescriptor);
	CATUnicodeString txtContent;
	if (SUCCEEDED(rc)) {
		int nLen = ::MultiByteToWideChar(CP_UTF8, 0, line, -1, NULL, 0);
		wchar_t *pWstr = new wchar_t[nLen + 1];
		::MultiByteToWideChar(CP_UTF8, 0, line, -1, pWstr, nLen);
		CATUnicodeString newline = CATUnicodeString(line);
		newline.BuildFromWChar(pWstr);
		txtContent = newline.Strip(CATUnicodeString::CATStripModeTrailing, '\n');
		rc = CATFClose(oFileDescriptor);
	}
	rc = PLMSetupDataGlobalFunctions::RemovePLMSetupDataFinder(SetupDataFinderId);

	int nKeyIndex = txtContent.SearchSubString(iKey);
	txtContent = txtContent.SubString(nKeyIndex, txtContent.GetLengthInChar()- nKeyIndex);
	int nKeyEnds = txtContent.SearchSubString("\n");
	if(nKeyEnds > 0)
		txtContent = txtContent.SubString(0, nKeyEnds);
	int splitChar = txtContent.SearchSubString("=");
	ioValue = txtContent.SubString(splitChar+1, txtContent.GetLengthInChar()- splitChar -1);
	ioValue = ioValue.Strip(CATUnicodeString::CATStripModeTrailing, '\n');
	return rc;
}

#include "CATOmbLifeCycleRootsBag.h"
HRESULT CUSCAAUtilService::RetrieveCatalog(CATOmbLifeCycleRootsBag &ioBag, PLMICLGLibrary *&opCLGLibrary)
{
	
	CATUnicodeString SetupDataFinderId = "Find Catalog";
	PLMISetupDataFinder_var setupDataFinder = PLMSetupDataGlobalFunctions::GetPLMSetupDataFinder(SetupDataFinderId);
	if (setupDataFinder == NULL_var)
		return E_FAIL;

	CATUnicodeString resoureId = "KnowledgeResource|Catalog_Path";
	CATUnicodeString oTextDocument = "";

	CATBaseUnknown_var spCatalogAsCBU;
	HRESULT rc = setupDataFinder->FindPointedResource(resoureId,NULL_var, spCatalogAsCBU);

	if (spCatalogAsCBU == NULL_var) {
		return E_FAIL;
	}

	CATIPLMComponent_var spPLMComp = spCatalogAsCBU;
	CATIAdpPLMIdentificator * pAdp = NULL;

	rc = spPLMComp->GetAdpID(pAdp);
	if (pAdp == NULL)
		return rc;

	rc = PLMCLGPublicLibraryNavServices::GetLibrary(pAdp, opCLGLibrary, ioBag);
	pAdp->Release();  pAdp = NULL;
	if (opCLGLibrary == NULL)
		return E_FAIL;
	

	rc = PLMSetupDataGlobalFunctions::RemovePLMSetupDataFinder(SetupDataFinderId);
	return rc;
}



void CUSCAAUtilService::StartBatchCmd(CATUnicodeString cmdLine)
{
	int result = -1;

	STARTUPINFO si = { sizeof(si) };
	wchar_t *pChar = new wchar_t[cmdLine.GetLengthInChar()+1];

	cmdLine.ConvertToWChar(pChar);
	PROCESS_INFORMATION pi;
	BOOL fRef = CreateProcess(NULL, LPTSTR(pChar), NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
	if (fRef == TRUE) {
		WaitForSingleObject(pi.hThread, INFINITE);
		GetExitCodeProcess(pi.hThread, LPDWORD(&result));
		CloseHandle(pi.hThread);
		CloseHandle(pi.hProcess);
		cout << "StartBatchCmd OK! " << endl;

	}
	else
		cout << "StartBatchCmd FAILED! " << endl;
}

CATUnicodeString CUSCAAUtilService::WebService(const CATUnicodeString security, const CATUnicodeString iUrl)
{
	HRESULT rc = E_FAIL;

	CATUnicodeString RecvStr;
	char file[MaxSize + 1];
	unsigned long read;
	CATUnicodeString UserId, OrgId, ProjectId, RoleId;

	HINTERNET hOpen, hURL;
	LPCWSTR nameProgram = L"TaskReader";
	LPCWSTR webSite;
	if (!(hOpen = InternetOpen(nameProgram, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0)))    //INTERNET_FLAG_ASYNC
	{
		cout << "Error in Opening internet!" << endl;
		return "Error";
	}

	CATUnicodeString sWebSite = iUrl;
	wchar_t wc[MaxCharSize];
	sWebSite.ConvertToWChar(wc);
	webSite = wc;

	//LPCWSTR header(_T"")
	hURL = InternetOpenUrl(hOpen, webSite, security, 0, INTERNET_FLAG_PRAGMA_NOCACHE|
		INTERNET_FLAG_HYPERLINK | INTERNET_FLAG_RELOAD, 0);
	if (hURL == nullptr)
	{
		cout << "OpenUrlError" << endl;
	}

	InternetReadFile(hURL, file, MaxSize, &read);

	string RecvStrS;
	while (read > 0 && read <= MaxSize)
	{
		file[read] = '\0';
		CATUnicodeString UTFStr;

		UTFStr.BuildFromUTF8(file, sizeof(file));
		RecvStrS += UTFStr.ConvertToChar();
		InternetReadFile(hURL, file, MaxSize, &read);
	}

	if (RecvStrS.length() > 0)
	{
		RecvStr = RecvStrS.c_str();
	}

	InternetCloseHandle(hURL);
	return RecvStr;
}

CATUnicodeString CUSCAAUtilService::WebService(const CATUnicodeString iServer, 
	const CATUnicodeString iUrl, const CATUnicodeString iHttpType, const char *iData)
{
	CATUnicodeString RecvStr;

	string ret;

	LPCTSTR lpszAgent = TEXT("POST");
	HINTERNET hInternet = InternetOpen(lpszAgent, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
	if (!hInternet)
	{
		cout << "Error in Opening internet!" << endl;
		return "Error";
	}

	wchar_t server[MaxCharSize];
	iServer.ConvertToWChar(server);
	LPCTSTR lpszServerName = server;

	wchar_t url[MaxCharSize];
	iUrl.ConvertToWChar(url);
	LPCTSTR lpszObjectName = url;

	wchar_t httpType[MaxCharSize];
	iHttpType.ConvertToWChar(httpType);
	LPCTSTR lpszVerb = httpType;

	INTERNET_PORT nServerPort = INTERNET_DEFAULT_HTTPS_PORT;

	LPCTSTR lpszUserName = NULL;
	LPCTSTR lpszPassword = NULL;
	DWORD dwConnectFlags = 0;
	DWORD dwConnectContext = 0;
	HINTERNET hConnect = InternetConnect(hInternet, lpszServerName, nServerPort,
		lpszUserName, lpszPassword, INTERNET_SERVICE_HTTP, dwConnectFlags, dwConnectContext);
	if (!hConnect)
	{
		cout << "Error in InternetConnect" << endl;
		return "ConnectError";
	}

	LPCTSTR lpszVersion = NULL;
	LPCTSTR lpszReferrer = NULL;
	LPCTSTR *lplpszAcceptTypes = NULL;
	DWORD dwOpenRequestFlags = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP |
		INTERNET_FLAG_KEEP_CONNECTION |
		INTERNET_FLAG_NO_AUTH |
		INTERNET_FLAG_NO_COOKIES |
		INTERNET_FLAG_NO_UI |
		INTERNET_FLAG_SECURE |
		INTERNET_FLAG_IGNORE_CERT_CN_INVALID |
		INTERNET_FLAG_RELOAD;
	DWORD dwOpenReuquestContext = 0;

	HINTERNET hRequest = HttpOpenRequest(hConnect, lpszVerb, lpszObjectName,
		lpszVersion, lpszReferrer, lplpszAcceptTypes, dwOpenRequestFlags, dwOpenReuquestContext);
	if (!hRequest)
	{
		goto GOTO_EXIT;
	}

	bool bResult = false;
	
	DWORD dwTimeout = 120000000;
	DWORD dwSetOptionFlags = INTERNET_OPTION_DATA_RECEIVE_TIMEOUT |
		INTERNET_OPTION_RECEIVE_TIMEOUT |
		INTERNET_OPTION_CONNECT_TIMEOUT |
		INTERNET_OPTION_SEND_TIMEOUT |
		INTERNET_OPTION_DATA_SEND_TIMEOUT |
		INTERNET_OPTION_FROM_CACHE_TIMEOUT |
		INTERNET_OPTION_LISTEN_TIMEOUT;
	InternetSetOption(hRequest, dwSetOptionFlags, &dwTimeout, sizeof(dwTimeout));

	char * szReqBuff = const_cast<char*>(iData);
	//int nReqSize = strlen(szReqBuff);
	bResult = HttpSendRequest(hRequest, NULL, 0, szReqBuff, (DWORD)strlen(szReqBuff));
	if (!bResult)
	{
		DWORD dwError = GetLastError();
		printf("%d/n", dwError);
		goto GOTO_EXIT;
	}

	DWORD dwReadSize(0);
	do {
		bResult = InternetQueryDataAvailable(hRequest, &dwReadSize, 0, 0);
		if (!bResult || !dwReadSize){
			break;
		}
		char * szBuff = new char[dwReadSize + 1];
		ZeroMemory(szBuff, dwReadSize + 1);
		DWORD dwByteRead(0);
		bResult = InternetReadFile(hRequest, szBuff, dwReadSize, &dwByteRead);
		if (!bResult) {
			break;
		}
		szBuff[dwReadSize] = '\0';
		ret += szBuff;

		delete[] szBuff;

		if (!dwByteRead) {
			break;
		}
	} while (dwReadSize > 0);

	RecvStr.BuildFromUTF8(ret.c_str(), ret.size());

GOTO_EXIT:
	if (hRequest) {
		InternetCloseHandle(hRequest);
	}
	if (hConnect) {
		InternetCloseHandle(hConnect);
	}
	if (hInternet) {
		InternetCloseHandle(hInternet);
	}

	return RecvStr;
}


HRESULT CUSCAAUtilService::CopyDictionariesModel(CATBaseUnknown * ipSourceReference, CATBaseUnknown * opTargetReference)
{
	CATIConfiguredEntity* piCfgEntity = NULL;
	HRESULT hr = ipSourceReference->QueryInterface(IID_CATIConfiguredEntity, (void**)&piCfgEntity);
	if (piCfgEntity == NULL)
		return S_FALSE;

	CATOmbLifeCycleRootsBag iBag;
	if (SUCCEEDED(hr)) hr = CATConfigLoadingServices::LoadDictionaries(*piCfgEntity, iBag);

	CATListPtrCATIConfiguration olistConfiguration;
	hr = piCfgEntity->GetConfigurations(olistConfiguration);
	_RELEASE_PTR_(piCfgEntity);
	int n_model = olistConfiguration.Size();
	if (n_model <= 0)
		return S_FALSE;

	CATIConfiguredEntityAuthoring * spConfigAuthoring = NULL;
	hr = opTargetReference->QueryInterface(IID_CATIConfiguredEntityAuthoring, (void**)&spConfigAuthoring);
	if (spConfigAuthoring == NULL)
	{
		cout << "CUSCAAUtilService :: =======Failed get CATIConfiguredEntityAuthoring from Target reference...========" << endl;
		return S_FALSE;
	}


	for (int i = 1; i <= n_model; i++)
	{
		CATIConfiguration * sTempConfiguration = olistConfiguration[i];
		CATIConfigDictionary * spConfigDic = NULL;
		hr = sTempConfiguration->GetDictionary(spConfigDic);
		if (spConfigDic == NULL)
			continue;
		hr = spConfigAuthoring->AttachDictionary(*spConfigDic);
	}

	hr = spConfigAuthoring->EnableConfigCriteria(CATConfigCriteria::ConfigCriteria_Evolution_ProductState);

	hr = spConfigAuthoring->EnableConfigCriteria(CATConfigCriteria::ConfigCriteria_Variant_ConfigFeature);

	olistConfiguration.RemoveAll();
	_RELEASE_PTR_(spConfigAuthoring);

	return hr;
}

HRESULT CUSCAAUtilService::SetSessionEffectity(CATBaseUnknown * ipSourceInstance)
{
	HRESULT hr = E_FAIL;
	CATIConfigFilterableAuthoring *piConfigAuthoring;
	hr = ipSourceInstance->QueryInterface(IID_CATIConfigFilterableAuthoring, (void**)&piConfigAuthoring);
	if (piConfigAuthoring == NULL)
		return hr;

	CATIConfigEffectivityExpression *piWorkUnderEffectity = NULL;
	CATIPLMAuthoringContextServices::GetSessionEffectivity(piWorkUnderEffectity);
	if (piWorkUnderEffectity) {
		CATListPtrCATIConfigEffectivityExpression olistEffectExp;
		olistEffectExp.Append(piWorkUnderEffectity);
		hr = piConfigAuthoring->SetEffectivities(olistEffectExp);
	}
	return hr;
}

HRESULT CUSCAAUtilService::CopyDicVariants(CATBaseUnknown * ipSourceInstance, CATBaseUnknown * ipSourceFatherReference,
	CATBaseUnknown *& opTargetInstance, CATBaseUnknown * opTargetFatherReference)
{
	if (ipSourceInstance == NULL || opTargetInstance == NULL)
		return E_FAIL;

	CATIConfigFilterable *iCfgFilter = NULL;
	HRESULT hr = ipSourceInstance->QueryInterface(IID_CATIConfigFilterable, (void**)&iCfgFilter);
	if (iCfgFilter == NULL)
		return E_FAIL;

	CATIConfigFilterableAuthoring *piConfigAuthoring;
	hr = opTargetInstance->QueryInterface(IID_CATIConfigFilterableAuthoring, (void**)&piConfigAuthoring);
	if (piConfigAuthoring == NULL)
		return E_FAIL;

	CATOmbLifeCycleRootsBag iBag;
	hr = CATConfigLoadingServices::LoadEffectivityDependencies(*iCfgFilter, iBag);

	hr = iCfgFilter->HasEffectivity();
	if (SUCCEEDED(hr))  hr = iCfgFilter->IsFilteringCacheUpToDate();

	CATListPtrCATIConfigEffectivityExpression olistEffectExp;
	CATListOfInt in_listViews;
	in_listViews.Append(CATConfigDiversityDomain::ConfigDomain_ConfigChange);
	hr = iCfgFilter->GetEffectivityExpressions(in_listViews, olistEffectExp);

	if (olistEffectExp.Size() <= 0)
		return E_FAIL;

	_RELEASE_PTR_(iCfgFilter);

	hr = piConfigAuthoring->SetEffectivities(olistEffectExp);
	_RELEASE_PTR_(piConfigAuthoring);

	return hr;

	//CATUnicodeString outSourceExpressionXML;
	//CATListPtrCATIConfigFilterable outSourceListFilterables;
	//CATListPtrCATIConfigPLMEntity  outSourceListOperationHandlers;
	//HRESULT hr = outSourceExpression->GetXMLExpression(outSourceExpressionXML, outSourceListFilterables, outSourceListOperationHandlers);
	//if (SUCCEEDED(hr)) cout << " XML Expression is :" << endl << outSourceExpressionXML.ConvertToChar() << endl;
	//CATListPtrCATIConfigDictionary outSourceListDictionaries;
	//hr = outSourceExpression->GetDictionaries(outSourceListDictionaries);

	//CATListPtrCATIConfigEffectivityExpression olistConfigExp;
	//olistConfigExp.Append(outSourceExpression);
	//if (SUCCEEDED(hr) && outSourceListDictionaries.Size() != 0)
	//{
	//	cout << "  Dictionaries attached to Product are : " << outSourceListDictionaries.Size() << endl;
	//	for (int i = 1; i <= outSourceListDictionaries.Size(); i++)
	//	{
	//		CATUnicodeString in_criteria_stExpressionXML;
	//		CATUnicodeString tempin_ExpressionXML;
	//		CATConfigXMLContentError oError;
	//		CATIConfigDictionary *iCfgDictionary = outSourceListDictionaries[i];

	//		CATIConfigFilterExpression *out_pCfgExpression;
	//		CATConfigExpressionFactory::CreateFilterExpression(iCfgDictionary, 
	//			outSourceListOperationHandlers, outSourceExpressionXML, oError, out_pCfgExpression);

	//		if (out_pCfgExpression != NULL)
	//			olistConfigExp.Append(out_pCfgExpression);
	//	}
	//}

}

CATIConfigEffectivityExpression* CUSCAAUtilService::GetConfigExpression(CATIPLMNavInstance * ipNavInstance, CATBaseUnknown * ipNavFatherReference)
{
	cout << " CUSCAAUtilService::GetConfigExpression " << endl ;
	//if (NULL == ipNavInstance || ipNavFatherReference == NULL)
	//	return NULL;

	//CATIConfiguredEntity* piCfgEntity = NULL;
	//HRESULT hr = ipNavFatherReference->QueryInterface(IID_CATIConfiguredEntity, (void**)&piCfgEntity);
	//if(piCfgEntity == NULL)
	//	return NULL;
	//CATOmbLifeCycleRootsBag iBag;
	//hr = CATConfigLoadingServices::LoadDictionaries(*piCfgEntity, iBag);



	//CATIPLMNavEntity *piNavEntity = NULL;
	//CATIConfigPLMEntity *piConfigEntity = NULL;
	//CATIConfiguredEntity *piConfiguredEntity = NULL;
	//hr = ipNavInstance->QueryInterface(IID_CATIConfiguredEntity, (void**)&piConfiguredEntity);
	//if(piConfiguredEntity ==NULL)
	//	return NULL;

	//CATListPtrCATIConfiguration olistConfiguration;
	//hr = piConfiguredEntity->GetConfigurations(olistConfiguration);
	//_RELEASE_PTR_(piConfiguredEntity);

	//int n_model = olistConfiguration.Size();
	//for (int i = 1; i <= n_model; i++)
	//{
	//	CATIConfiguration * sTempConfiguration = olistConfiguration[i];
	//	//CATIConfigDictionary * spConfigDic = NULL;
	//	CATIConfigFilterExpression * spConfigFilterExp = NULL;
	//	hr = sTempConfiguration->GetExpression(spConfigFilterExp);
	//	if (spConfigFilterExp == NULL)
	//		continue;
	//	CATUnicodeString out_stExpressionXML;
	//	CATListPtrCATIConfigPLMEntity olistConfigEntity;
	//	hr = spConfigFilterExp->GetXMLExpression(out_stExpressionXML, olistConfigEntity);
	//	if (SUCCEEDED(hr)) cout << " XML Expression is :" << endl << out_stExpressionXML.ConvertToChar() << endl;
	//}

	CATIConfigFilterable *iCfgFilter = NULL;
	HRESULT hr = ipNavInstance->QueryInterface(IID_CATIConfigFilterable, (void**)&iCfgFilter);
	//_RELEASE_PTR_(piCfgEntity);
	if (iCfgFilter == NULL)
		return NULL;

	CATOmbLifeCycleRootsBag iBag;
	hr = CATConfigLoadingServices::LoadEffectivityDependencies(*iCfgFilter, iBag);

	hr = iCfgFilter->HasEffectivity();
	if (SUCCEEDED(hr))  hr = iCfgFilter->IsFilteringCacheUpToDate();

	CATIConfigEffectivityExpression* out_pExpression = NULL;
	if (SUCCEEDED(hr))
	{
		CATListPtrCATIConfigEffectivityExpression olistEffectExp;
		CATListOfInt in_listViews;
		in_listViews.Append(CATConfigDiversityDomain::ConfigDomain_ConfigChange);
		hr = iCfgFilter->GetEffectivityExpressions(in_listViews, olistEffectExp);
		int n_size = olistEffectExp.Size();
		if (n_size > 0)
			out_pExpression = olistEffectExp[1];
	}


	CATUnicodeString outSourceExpressionXML;
	CATListPtrCATIConfigFilterable outSourceListFilterables;
	CATListPtrCATIConfigPLMEntity  outSourceListOperationHandlers;
	hr = out_pExpression->GetXMLExpression(outSourceExpressionXML, outSourceListFilterables, outSourceListOperationHandlers);
	if (SUCCEEDED(hr)) cout << " XML Expression is :" << endl << outSourceExpressionXML.ConvertToChar() << endl;


	_RELEASE_PTR_(iCfgFilter);
	return out_pExpression;

}



HRESULT CUSCAAUtilService::CAACallOOTBCmd(const char * iCmdHdr)
{
	cout << "********************CUSCAAUtilService::CAACallOOTBCmd*******************" << endl;
	CATString cmdHdr = iCmdHdr;
	CATCommand * pCATCommand = NULL;
	HRESULT hr = CATAfrStartCommand(cmdHdr, pCATCommand);
	if (FAILED(hr) && pCATCommand == NULL) {
		cout << "Failed find the command, the command Hdr is wrong" << endl;
		hr = CATAfrStartCommand("DELMSDAssignmentAssistantHdr", pCATCommand);
	}
	cout << "Success find the command, the command Hdr is wrong" << endl;

	CATStatusChangeRC rcStatus = pCATCommand->Activate(NULL, NULL);

	return hr;
}

bool CUSCAAUtilService::CheckEffectivity(const CATUnicodeString iEffectivity)
{
	bool IsFormat = FALSE;

	std::string pattern{ "2\\d{4}-2\\d{4}(,2\\d{4}-2\\d{4})*" }; // 20101-20105,20106-29999
	std::regex re(pattern);

	IsFormat = std::regex_match(iEffectivity.ConvertToChar(), re);

	cout << "CheckEffectivity *******" << iEffectivity << "****** Result is " << IsFormat << endl;

	return IsFormat;
}


// fengy 2021.12.21 显示/隐藏特征
HRESULT CUSCAAUtilService::ShowOrHideFeature(CATBaseUnknown_var ispFeature, CATBoolean iShow)
{
	CATIVisProperties_var spVisProperties = ispFeature;
	if (NULL_var == spVisProperties)
	{
		cout << "Change CATIMmiMechanicalFeature_var to CATIVisProperties_var KO" << endl;
		return E_FAIL;
	}

	CATVisPropertiesValues VisPropValues;
	if (iShow)
		VisPropValues.SetShowAttr(CATShowAttr);
	else
		VisPropValues.SetShowAttr(CATNoShowAttr);

	spVisProperties->SetPropertiesAtt(VisPropValues, CATVPShow, CATVPGlobalType);

	return S_OK;
}

HRESULT CUSCAAUtilService::RetrieveObjectFromResourceTable(CATUnicodeString& iResourceId, CATIPLMComponent_var& ospPLMComp)
{
	HRESULT hr;
	// ===========================================================================================================
	// 1- Retrieves  SetupData Finder
	// ===========================================================================================================
	CATUnicodeString SetupDataFinderID = "MyFinder";
	PLMISetupDataFinder_var setupDataFinder = PLMSetupDataGlobalFunctions::GetPLMSetupDataFinder(SetupDataFinderID);
	if (NULL_var == setupDataFinder)
	{
		return E_FAIL;
	}

	// ===========================================================================================================
	// 2.1- Retrieves the Resource ------Object
	// ===========================================================================================================

	CATBaseUnknown_var spCatalogAsCBU;
	hr = setupDataFinder->FindPointedResource(iResourceId, NULL_var, spCatalogAsCBU);

	if (spCatalogAsCBU != NULL_var)
	{
		ospPLMComp = spCatalogAsCBU;
		if (NULL_var == ospPLMComp) return E_FAIL;
	}
	// ===========================================================================================================
	// 3- Removes the SetupData Finder
	// ===========================================================================================================
	hr = PLMSetupDataGlobalFunctions::RemovePLMSetupDataFinder(SetupDataFinderID);

	return hr;
}

HRESULT CUSCAAUtilService::RetrieveFileFromResourceTable(CATUnicodeString& iResourceId, CATUnicodeString& oFilePath)
{
	HRESULT hr;
	// ===========================================================================================================
	// 1- Retrieves  SetupData Finder
	// ===========================================================================================================
	CATUnicodeString SetupDataFinderID = "MyFinder";
	PLMISetupDataFinder_var setupDataFinder = PLMSetupDataGlobalFunctions::GetPLMSetupDataFinder(SetupDataFinderID);
	if (NULL_var == setupDataFinder)
	{
		return E_FAIL;
	}

	// ===========================================================================================================
	// 2.1- Retrieves the Resource ------XML
	// ===========================================================================================================
	CATUnicodeString oXMLDocument = "";
	hr = setupDataFinder->FindDocument(iResourceId, NULL_var, oXMLDocument);
	if ((E_FAIL == hr) || (oXMLDocument == ""))
	{
		return E_FAIL;
	}
	oFilePath = oXMLDocument;
	// ===========================================================================================================
	// 3- Removes the SetupData Finder
	// ===========================================================================================================
	hr = PLMSetupDataGlobalFunctions::RemovePLMSetupDataFinder(SetupDataFinderID);

	return hr;
}

CATUnicodeString CUSCAAUtilService::GetConfigInfoFromFile(CATUnicodeString iFilePath, CATUnicodeString iConfigName)
{
	CATUnicodeString strConfigValue = "";
	HRESULT hr;
	unsigned int FileDesc = 0;
	hr = CATFOpen(iFilePath, "r", &FileDesc);
	char line[1000];
	while (SUCCEEDED(hr) && CATFEof(FileDesc) != S_OK)
	{
		hr = CATFGets(line, 1000, FileDesc);
		if (SUCCEEDED(hr))
		{
			int nLen = ::MultiByteToWideChar(CP_UTF8, 0, line, -1, NULL, 0);
			wchar_t *pWstr = new wchar_t[nLen + 1];
			::MultiByteToWideChar(CP_UTF8, 0, line, -1, pWstr, nLen);
			CATUnicodeString strLine = "";
			strLine.BuildFromWChar(pWstr);
			strLine = strLine.Strip(CATUnicodeString::CATStripModeTrailing, '\n');
			int e = strLine.SearchSubString("=", 0);
			CATUnicodeString strConfigName = strLine.SubString(0, e);
			strConfigName = strConfigName.Strip(CATUnicodeString::CATStripModeBoth);
			int bo = std::strcmp(strConfigName.ConvertToChar(), iConfigName.ConvertToChar());
			if (bo == 0)
			{
				CATUnicodeString str = strLine.SubString(e + 1, strLine.GetLengthInChar() - e - 1);
				strConfigValue = str.Strip(CATUnicodeString::CATStripModeBoth);
				break;
			}
		}
	}
	CATFClose(FileDesc);
	return strConfigValue;
}


CATUnicodeString CUSCAAUtilService::GetServerURL()
{
	CATUnicodeString ResourceId = "KnowledgeResources|Config_TXT";
	CATUnicodeString strConfigFile = "";
	RetrieveFileFromResourceTable(ResourceId, strConfigFile);
	std::cout << "配置文件路径：" << strConfigFile << std::endl;
	if (strConfigFile == "")
	{
		ErrorMessage("提示", "无法在ResourceTabale中找到配置文件");
		return "";
	}
	CATUnicodeString sServerUrl = GetConfigInfoFromFile(strConfigFile, "ServerUrl");
	return sServerUrl;
}