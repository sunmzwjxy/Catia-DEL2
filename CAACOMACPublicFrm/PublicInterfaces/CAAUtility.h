//===================================================================
// COPYRIGHT DS 2021/11/30
//===================================================================
// CAAUtility.cpp
// Header definition of class CAAUtility
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/11/30 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CAAUtility_H
#define CAAUtility_H

#include "CAAUtilityMdl.h"
//System 
#include "CATListOfCATString.h"
#include "CATListOfCATUnicodeString.h"
#include "CATLISTP_CATBaseUnknown.h"
//CATPLMIdentificationAccess 
#include "CATIAdpPLMIdentificator.h"
#include "CATListPtrCATIAdpPLMIdentificator.h"
#include "CATIPLMComponent.h"
//ObjectModelerBase 
#include "CATOmbLifeCycleRootsBag.h"
//CATPLMIntegrationUse 
#include "CATAdpExpandParameters.h"
//PLMDocumentInterfaces 
#include "PLMIDocument.h"
//Dialog 
#include "CATDlgUtility.h"
//KnowledgeInterfaces 
#include "CATIType.h"
//CATPLMComponentInterfaces 
#include "CATIPLMNavInstance.h"
#include "CATIPLMNavOccurrence.h"
#include "CATIPLMNavReference.h"


#define ReleasePtr(ptr) { if(ptr) { ptr->Release(); ptr = NULL; } }
#define ReleaseList(list) \
{ int size = list.Size(); for(int i = 1; i <= size; i++) { CATBaseUnknown * pUnkObj = list[i]; ReleasePtr(pUnkObj); }; list.RemoveAll(); }

//-----------------------------------------------------------------------

class ExportedByCAAUtilityMdl CAAUtility
{
public:
// Standard constructors and destructors
// -------------------------------------
CAAUtility ();
virtual ~CAAUtility ();

/**
   * 获取当前环境变量对象的值。
   * @param iEnvName
   * <in>环境变量名
   * @return
   *  环境变量<iEnvName>的值
   */
static CATUnicodeString GetEnvValue(CATUnicodeString iEnvName);

/**
   * 获取对象的类型名称。
   * @param spiPLMCompOnObject
   * <in>需要获取类型名称的对象
   * @return
   * 对象的类型名称
   */
static CATUnicodeString GetObjectTypeName(CATIPLMComponent_var spiPLMCompOnObject);

/**
   * 根据属性和类型查找对象
   * 属性对应的对象需要唯一
   * @param ilistOfAttribute
   * <in>属性名称列表
   * @param ilistOfValues
   * <in>属性名称对应的属性值列表，需要与属性名称列表一一对应
   * @param iStrPLMType
   * <in>需要查找的对象类型
   * @param opiIdentOnPLMComp
   * <out>查找到的对象
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT RetrieveIDofUniquePLMObject(CATListOfCATString &ilistOfAttribute,
											CATListOfCATUnicodeString &ilistOfValues,
											const char* &iStrPLMType,
											CATIAdpPLMIdentificator* &opiIdentOnPLMComp);

/**
   * 获取类型名称对应的类型对象。
   * @param isPLMType
   * <in>类型名称
   * @param ospType
   * <out>类型对象
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT RetrievePLMType(CATUnicodeString isPLMType, CATIType_var& ospType);

/**
   * 打开对象
   * @param ipiIdentOnPLMComp
   * <in>要打开的对象
   * @param ioBag
   * <in>The bag allowing to hold PLM components in session.
   * @param iMode
   * <in>对象打开模式，默认Authoring
   * @return
   * 打开后的PLM component对象
   */
static CATIPLMComponent_var GetComponentFromPLMID(CATIAdpPLMIdentificator* &ipiIdentOnPLMComp, CATOmbLifeCycleRootsBag &ioBag, CATAdpExpandParameters::ExpandMode iMode = CATAdpExpandParameters::Authoring);

/**
   * 添加关联文档到指定对象
   * @param ispPLMCompOnObject
   * <in>添加关联文档的对象
   * @param ilListFilePaths
   * <in>关联文档对应的物理文件
   * @param iDocumentTitle
   * <in>将要生成的关联文档标题
   * @param opDocument
   * <out>生成的文档对象
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT AttachDocumentToObject(CATIPLMComponent_var ispPLMCompOnObject, CATListOfCATUnicodeString ilListFilePaths, CATUnicodeString& iDocumentTitle, PLMIDocument* & opDocument);

/**
   * 字符串分割
   * @param iTransformString
   * <in>需要分割的字符串对象
   * @param iSplit
   * <in>用于分割的字符串
   * @return
   * 分割后的字符串列表
   */
static CATListOfCATUnicodeString SplitString(CATUnicodeString iTransformString, CATUnicodeString iSplit);

/**
   * 信息提示弹窗
   * @param iMessage
   * <in>弹窗提示内容
   * @param iTitle
   * <in>弹窗标题
   * @param iStyle
   * <in>弹窗类型
   * Legal values:
   * CATDlgNfyInformation
   *   To specify an information window.It is the default style.
   * CATDlgNfyWarning
   *   To specify a warning window CATDlgNfyErrorTo specify an error window
   * CATDlgNfyAction
   *   To specify a confirmation window
   * CATDlgNfyAbortRetryIgnore
   *   The window has Abort, Retry and Ignore buttons
   * CATDlgNfyRetryCancel
   *   The window has Retry and Cancel buttons
   * CATDlgNfyOK
   *   The window has an OK button
   * CATDlgNfyOKCancel
   *   The window has OK and Cancel buttons
   * CATDlgNfyYesNo
   *   The window has Yes and No buttons
   * CATDlgNfyYesNoCancel
   *   The window has Yes, No and Cancel buttons
   * CATDlgWndModal
   *   The window is modal
   * @return
   * 弹窗按钮点击情况
   * Legal values:
   * 1
   *   The OK button has been pressed.
   * 2
   *   The Cancel button has been pressed.
   * 3
   *   The Yes button has been pressed.
   * 4
   *   The No button has been pressed.
   * 5
   *   The Retry button has been pressed.
   * 6
   *   The Abort button has been pressed.
   * 7
   *   The Ignore button has been pressed.
   */
static int MessageBoxShow(CATUnicodeString iMessage, CATUnicodeString iTitle, CATDlgStyle iStyle = CATDlgNfyInformation);

/**
   * 用GET方式访问URL
   * @param iUrl
   * <in>要访问的URL值
   * @return
   * 服务返回信息
   */
static CATUnicodeString WebService(const CATUnicodeString& iUrl);

/**
   * 保存对象
   * @param iSaveRoots
   * <in>需要保存的对象，默认为NULL；如果iSaveRoots为NULL，则保存当前SESSION的所有内容
   * @return
   * "Success": 保存成功. Others: 保存失败，返回失败信息
   */
static CATUnicodeString PLMSave(const CATListPtrCATBaseUnknown* iSaveRoots = NULL);

/**
   * 获取system实例对象的Occurrence节点
   * @param ihNavInst
   * <in>system实例对象
   * @param ihFatherOcc
   * <in>实例父节点Occurrence对象
   * @param ihRootOcc
   * <in>实例所在系统根节点对象
   * @param ohNavOcc
   * <out>实例对象的Occurrence节点
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetOccurrenceFromSystemInstance(const CATIPLMNavInstance_var & ihNavInst,
												const CATIPLMNavOccurrence_var & ihFatherOcc,
												const CATIPLMNavOccurrence_var & ihRootOcc,
												CATIPLMNavOccurrence_var & ohNavOcc);

/**
   * system根节点参考转Occurrence
   * @param ihNavRef
   * <in>system根节点参考对象
   * @param ohNavOcc
   * <out>根节点参考对象的Occurrence
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetRootOccurrenceFromRootSystemReference(const CATIPLMNavReference_var & ihNavRef,
														CATIPLMNavOccurrence_var & ohNavOcc);

/**
   * 获取Process实例对象的Occurrence节点
   * @param ihNavInst
   * <in>Process实例对象
   * @param ihFatherOcc
   * <in>实例父节点Occurrence对象
   * @param ihRootOcc
   * <in>实例所在Process根节点对象
   * @param ohNavOcc
   * <out>实例对象的Occurrence节点
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetOccurrenceFromProcessInstance(const CATIPLMNavInstance_var & ihNavInst,
												const CATIPLMNavOccurrence_var & ihFatherOcc,
												const CATIPLMNavOccurrence_var & ihRootOcc,
												CATIPLMNavOccurrence_var & ohNavOcc);

/**
   * Process根节点参考转Occurrence
   * @param ihNavRef
   * <in>Process根节点参考对象
   * @param ohNavOcc
   * <out>根节点参考对象的Occurrence
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetRootOccurrenceFromRootProcessReference(const CATIPLMNavReference_var & ihNavRef,
														CATIPLMNavOccurrence_var & ohNavOcc);


/**
   * 获取Product实例对象的Occurrence节点
   * @param ihNavInst
   * <in>Product实例对象
   * @param ihFatherOcc
   * <in>实例父节点Occurrence对象
   * @param ihRootOcc
   * <in>实例所在产品根节点对象
   * @param ohNavOcc
   * <out>实例对象的Occurrence节点
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetOccurrenceFromProductInstance(const CATIPLMNavInstance_var & ihNavInst,
												const CATIPLMNavOccurrence_var & ihFatherOcc,
												const CATIPLMNavOccurrence_var & ihRootOcc,
												CATIPLMNavOccurrence_var & ohNavOcc);

/**
   * Product根节点参考转Occurrence
   * @param ihNavRef
   * <in>Product根节点参考对象
   * @param ohNavOcc
   * <out>根节点参考对象的Occurrence
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT GetRootOccurrenceFromRootProductReference(const CATIPLMNavReference_var & ihNavRef,
														CATIPLMNavOccurrence_var & ohNavOcc);

static HRESULT OpenPLMComponent(CATIPLMComponent_var spComp);

/**
   * 从ResourceTable中获取对象
   * @param iResourceId
   * <in>ResourceTable中的资源路径
   * @param ospPLMComp
   * <out>资源对象
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT RetrieveObjectFromResourceTable(CATUnicodeString& iResourceId, CATIPLMComponent_var& ospPLMComp);

/**
   * 从ResourceTable中获取文件
   * @param iResourceId
   * <in>ResourceTable中的资源路径
   * @param oFilePath
   * <out>资源对象物理文件路径
   * @return
   * Returns S_OK on success. Others fail
   */
static HRESULT RetrieveFileFromResourceTable(CATUnicodeString& iResourceId, CATUnicodeString& oFilePath);

static CATUnicodeString GetConfigInfoFromFile(CATUnicodeString iFilePath, CATUnicodeString iConfigName);

static HRESULT RetrieveDocumentByName(CATIPLMComponent_var ispPLMCompOnObject, CATUnicodeString iDocumentTitle, PLMIDocument*& opDocument);

private:
// Copy constructor and equal operator
// -----------------------------------
CAAUtility (CAAUtility &);
CAAUtility& operator=(CAAUtility&);

};

//-----------------------------------------------------------------------

#endif
