//===================================================================
// COPYRIGHT Comac 2021/12/02
//===================================================================
// ComacComputeReslutingProductCmd.cpp
// Header definition of class ComacComputeReslutingProductCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/12/02 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef ComacComputeReslutingProductCmd_H
#define ComacComputeReslutingProductCmd_H

#include "CATCommand.h"
#include "CATIPLMNavReference.h"
#include "CATIPLMNavOccurrence.h"
#include "CATListPtrCATIPLMNavOccurrence.h"



#define _RETURN_IF_FAILED_(hr, message) \
	if (FAILED(hr)) \
		{ cout << "=== FAILED ===> " << message << endl; return 1; } else	{	cout << "=== OK ===> " << message << endl; }

#define _RETURN_IF_TRUE_(ret, message) \
	if (ret) \
		{ cout << "=== FAILED ===> " << message << endl; return ret; } else	{	cout << "=== OK ===> " << message << endl; }


//----------------------------------------------------------------------

/**
* Describe your command here.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
* <p>
* refer to programming resources of System framework.
* (consult base class description).
*/
class ComacComputeReslutingProductCmd : public CATCommand
{
public:

	ComacComputeReslutingProductCmd();
	virtual ~ComacComputeReslutingProductCmd();

	CATIPLMNavReference *	_pMARootRef;								//  当前窗口下的MARoot！

	// fengy 2021.11.30 DELIPPRProcessOutputComputeAuth ::ComputeProcessOutput 
	HRESULT ComputeResultingProduct(CATListPtrCATIPLMNavOccurrence listCreateAssmOcc);


	// fengy 2021.12.1 改写 CAAProductStructure.edu\CAAPstBrowsingProductModel.m\src\CAAPstBrowsingProductModel.cpp 
	HRESULT BrowseReference(CATIPLMNavReference* ipiNavRef, CATIPLMNavOccurrence * iRootProcessOcc, int iDepth, CATListPtrCATIPLMNavOccurrence& oNavOccChild);

	//fengy 2021.12.1 根据 ref \ contextFatherOcc 获取Occ 
	CATIPLMNavOccurrence_var GetOccFromRef(CATIPLMNavOccurrence_var ispOccOnFarther, CATIPLMNavReference_var ispRef);
	
	// rootref - rootOcc
	HRESULT GetOccurrenceFromProcessReference(const CATIPLMNavReference_var & ihNavRef, CATIPLMNavOccurrence_var & ohNavOcc);

	// fengy 2021.12.1 
	CATUnicodeString  GetKnowledgeType(CATIPLMNavReference* piNavEnt, int iDepth);

	bool IfOwnerRight(CATIPLMNavReference *ipiNavRef);
		// 
	bool IfMaturityInWork(CATIPLMNavReference *ipiNavRef);

	void ReleasePtr(CATBaseUnknown * piCBU);

	/**
	* Overload this method: when your command gains focus
	* <p>
	* Activates a command.
	* @param iFromClient
	*   The command that requests to activate the current one.
	* @param iEvtDat
	*   The notification sent.
	*/
	virtual CATStatusChangeRC Activate(
		CATCommand * iFromClient,
		CATNotification * iEvtDat);

	/**
	*  Overload this method: when your command loses focus
	* <p>
	* Deactivates a command.
	* @param iFromClient
	*   The command that takes the current active place.
	* @param iEvtDat
	*   The notification sent.
	*/
	virtual CATStatusChangeRC Desactivate(
		CATCommand * iFromClient,
		CATNotification * iEvtDat);

	/**
	*  Overload this method: when your command is canceled
	* <p>
	* Cancels a command.
	* @param iFromClient
	*   The command that takes the current active place.
	* @param iEvtDat
	*   The notification sent.
	*/
	virtual CATStatusChangeRC Cancel(
		CATCommand * iFromClient,
		CATNotification * iEvtDat);

};

//----------------------------------------------------------------------

#endif
