//===================================================================
// COPYRIGHT  2020/09/27
//===================================================================
// CMCreateMakePartCmd.cpp
// Header definition of class CMCreateMakePartCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/27 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateMakePartCmd.h"
#include "CATCreateExternalObject.h"
CATCreateClass(CMCreateMakePartCmd);

#include "CATDlgEditor.h"
#include "CATDlgCombo.h"
#include "CATApplicationFrame.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

//from edu CAAPPRProcessItf.edu\CAAFmiProcessOutput.m\src\CAAFmiProcessOutput.cpp

// DELPPRProcessItf Framework
#include "DELPPRProcessAuthAccess.h"
#include "DELIPPRProcessAuth.h"
#include "DELPPRProcessNavAccess.h"
#include "DELIPPRProcessNav.h"
#include "DELIPPRProcessOutputNav.h"
#include "DELIPPRProcessOutputAuth.h"
//#include "CATIPrdOccurrenceMngt.h"
//#include "CATPrdGetOccurrenceMngt.h" 

//DELPPRProcessItf
#include "DELIPPRProcessOccAuth.h"
//DELPPRSystemItf
#include "DELIPPRSystemOccAuth.h"


// ProductStructureUseItf  Framework
#include "CATIPrdReferenceFactory.h"
#include "CATPrdFactory.h"
#include "CATIPrd3DPartReferenceFactory.h"
// ProductStructureInterfaces Framework
#include "CATIPLMProducts.h"
//ObjectModelerBase Framework
#include "CATOmbLifeCycleRootsBag.h"

// ProductStructureInterfaces Framework
#include "CATIPrdObject.h"
#include "CATIPLMProducts.h"
#include "CATIPrdIterator.h"
#include "CATIPrdOccurrenceMngt.h"
#include "CATPrdGetOccurrenceMngt.h"

// CATMecModUseItf Framework
#include "CATIMmiUseCreateImport.h"         // To copy mechanical feature
#include "CATMmiUseServicesFactory.h"

#include "DataCommonProtocolServices.h"
#include "CATIUseEntity.h"
#include "CATLISTV_CATIMmiMechanicalFeature.h"

// CATMecModLiveUseItf Framework
#include "CATIMmiMechanicalFeature.h"
#include "CATIBodyRequest.h"
#include "CATIPartRequest.h"
#include "CATIMmiViewServices.h"
#include "CATMmiUseServicesFactory.h"
#include "CATIMmiGeometricalSet.h"

//DataCommonProtocolUse Framework
#include "DataCommonProtocolCCPServices.h"

// VB 实现MainBody 赋值
#include "CATIABody.h"
#include "CATIAPart.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : constructor
//-----------------------------------------------------------------------------
CMCreateMakePartCmd::CMCreateMakePartCmd() :
	CATStateCommand("CMCreateMakePartCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMMakePartDlg(pWnd, "MBOM ManufacturingPart");
	_Panel->Build();
	_Panel->SetFather(this);

	pProvidePartRef = NULL;
	pProvidePartOcc = NULL;
	pNewManuPartOcc = NULL;

	pMARootRef = NULL;
	pMARootOcc = NULL;
	pPartFatherRef = NULL;
	pPartFatherOcc = NULL;
	//pMAFatherRef = NULL;
	//pMAFatherOcc = NULL;
	//
}

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : destructor
//-----------------------------------------------------------------------------

CMCreateMakePartCmd::~CMCreateMakePartCmd()
{
	//
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	pProvidePartRef = NULL;
	pProvidePartOcc = NULL;
	pMARootRef = NULL;
	pMARootOcc = NULL;
	pPartFatherRef = NULL;
	pPartFatherOcc = NULL;
	//
}


void CMCreateMakePartCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateMakePartCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateMakePartCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateMakePartCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateMakePartCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateMakePartCmd::ElementSelection, NULL, NULL, (void*)1));


	// 初始化写入 dlg
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_PartCodeEditor), "CMMBOMAssemDlg", "PartCode.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ManufactureLineEditor), "CMMBOMAssemDlg", "ManufactureLine.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ProcessUnitEditor), "CMMBOMAssemDlg", "ProcessUnit.Range", ",");

	// 添了两处  radio 等待
	_pRadioBtnCopy = _Panel->GetRadioButton(ID_DesignCodeCopy);
	AddAnalyseNotificationCB(_pRadioBtnCopy, _pRadioBtnCopy->GetRadBModifyNotification(),
		(CATCommandMethod)&CMCreateMakePartCmd::ChangeRadioNotifyCopy, NULL);

	_pRadioBtnCopy->SetState(CATDlgCheck);

	_pRadioBtnInput = _Panel->GetRadioButton(ID_DesignCodeInput);
	AddAnalyseNotificationCB(_pRadioBtnInput, _pRadioBtnInput->GetRadBModifyNotification(),
		(CATCommandMethod)&CMCreateMakePartCmd::ChangeRadioNotifyInput, NULL);

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}



//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateMakePartCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

CATBoolean CMCreateMakePartCmd::ChangeRadioNotifyCopy(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------
	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	pDesignCodeEditor->SetReadOnly(TRUE);
	return TRUE;
}

CATBoolean CMCreateMakePartCmd::ChangeRadioNotifyInput(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------
	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	pDesignCodeEditor->SetReadOnly(FALSE);
	return TRUE;
}

CATBoolean CMCreateMakePartCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMCreateMakePartCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	cout<<"sSelectObjectType:"<< sSelectObjectType <<endl;

	if (sSelectObjectType == TYPE_ProvidePart)				// 只选择 provided part 作为交互输入！
	{
		pProvidePartOcc = _pSelectedOccurrence;
		pProvidePartRef = _pSelectedReference;
		CATDlgEditor *pProvideEditor = _Panel->GetEditor(ID_SelectProvideEditor);
		pProvideEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "V_Name"));				// V_Name对应 title？

		_pSelectedOccurrence->GetFather(pPartFatherOcc);
		if (pPartFatherOcc != NULL)
		{
			pPartFatherOcc->GetRelatedReference(pPartFatherRef);
		}

		CATDlgEditor *pDesignCode = _Panel->GetEditor(ID_DesignCodeEditor);
		cout<<"provided part 对应的 PartCode ："<< CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "CUS_ProcessPartCode") <<endl;
		pDesignCode->SetText(CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "CUS_ProcessPartCode"));	// 有的为空！

		CATUnicodeString tmpValue = "";
		CATDlgCombo *pPartCodeComb = _Panel->GetCombo(ID_PartCodeEditor);
		tmpValue = CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "CUS_PartCode");
		cout << "provided part 对应的 零件代码 ：" << tmpValue << endl;
		if (tmpValue != CATUnicodeString(""))
		{
			CATListOfCATUnicodeString listKeyRange = CUSCAAUtilService::GetComboValueList(pPartCodeComb, "CMMBOMAssemDlg", "PartCode.Range", ",");
			int index = listKeyRange.Locate(tmpValue);  // 选中行
			if(index>0)
				pPartCodeComb->SetSelect(index-1);
		}

		CATDlgCombo *pManufactureLineComb = _Panel->GetCombo(ID_ManufactureLineEditor);
		tmpValue = CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "CUS_ManufactureLine");
		cout << "provided part 对应的 制造路线 ：" << tmpValue << endl;
		if (tmpValue != CATUnicodeString(""))
		{
			CATListOfCATUnicodeString listKeyRange = CUSCAAUtilService::GetComboValueList(pManufactureLineComb, "CMMBOMAssemDlg", "ManufactureLine.Range", ",");
			int index = listKeyRange.Locate(tmpValue);  // 选中行
			if (index > 0)
				pManufactureLineComb->SetSelect(index - 1);
		}

		CATDlgCombo *pProcessUnitComb = _Panel->GetCombo(ID_ProcessUnitEditor);
		tmpValue = CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "CUS_ProcessUnit");
		cout << "provided part 对应的 使用单位 ：" << tmpValue << endl;
		if (tmpValue != CATUnicodeString(""))
		{
			CATListOfCATUnicodeString listKeyRange = CUSCAAUtilService::GetComboValueList(pPartCodeComb, "CMMBOMAssemDlg", "ProcessUnit.Range", ",");
			int index = listKeyRange.Locate(tmpValue);  // 选中行
			if (index > 0)
				pPartCodeComb->SetSelect(index - 1);
		}

		//_pSelectedOccurrence->GetRelatedInstance(pCADProductInstance);
	}
}

CATBoolean CMCreateMakePartCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	CrateManufacturingPart();

	return FALSE;
}


CATBoolean CMCreateMakePartCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	CrateManufacturingPart();

	return TRUE;
}

CATBoolean CMCreateMakePartCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMCreateMakePartCmd::CheckSelectObject()
{
	if (pProvidePartRef == NULL)
	{
		//CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		//CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.ProvideNull");
		//CUSCAAUtilService::ErrorMessage(Title, msg);

		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = "";
		if (CATDlgCheck == _pRadioBtnCopy->GetState())
		{
			msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.ProvideNull");
		}
		else {
			msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.designCodeNull");
		}
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	// 此处的作用： 获取 cad product && pMARootOcc
	DELIPPRProcessNav_var hPPRProcessNav;
	HRESULT rc = ::GetPPRProcessNav(hPPRProcessNav);

	CATListPtrCATIPLMNavOccurrence listProductOcc;
	CATIPLMNavReference * pProductRootRef;
	CUSCAAUtilService::RetrieveRootComp(pProductRootRef);
	if (pProductRootRef == NULL)
		return FALSE;
	rc = hPPRProcessNav->GetListOfAssignedProducts(pProvidePartOcc, pProductRootRef, listProductOcc);	// process Occ 

	int n_product = listProductOcc.Size();
	if (n_product <= 0)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.implementLinkNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else if (n_product > 1)		// 不允许重复消耗？
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.implementLinkMulti");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	pProductOcc = listProductOcc[1];
	if (pProductOcc != NULL)
	{
		pProductOcc->GetRelatedReference(pProductRef);
		pProductOcc->GetRelatedInstance(pProductInstance);
	}

	sPartExternalId = CUSCAAUtilService::GetObjectAttrValue(pProductRef, "PLM_ExternalID");
	CATListOfCATUnicodeString olistExistID;					// prd-14182662-00097964 对应的应该是 是在制造零件（Manufactured Part）类型的 external_ID属性 上
	CUSCAAUtilService::QueryDBExistID(TYPE_ManufacturingPart, sPartExternalId + "*", olistExistID);	 

	int sizeofIDs = olistExistID.Size();
	cout << "# 查询到 " << sPartExternalId << "* "<< TYPE_ManufacturingPart <<" 计数： " << sizeofIDs<<"分别是：" << endl;
	for (int i = 1; i <= sizeofIDs; i++)
		cout<<"# "<<i<<": "<< olistExistID[i]<<endl;

	pMARootOcc = CUSCAAUtilService::GetRootOcc(pProvidePartOcc);
	if (pMARootOcc != NULL)
	{
		pMARootOcc->GetRelatedReference(pMARootRef);	
	}

	return TRUE;

}

#include "DELIPPRProcessPrecedencesAuth.h"

HRESULT CMCreateMakePartCmd::CrateManufacturingPart()
{
	HRESULT rc = E_FAIL;

	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;		// MA process father Ref 
	listRootRef.Append(pPartFatherRef);
	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}


	PPRUtity sPPRUtity;
	sPPRUtity.CreateSubMAAssembly(TYPE_ManufacturingPart, pPartFatherOcc, pMARootRef, pNewManuPartOcc);
	if (pNewManuPartOcc == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.CreateFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CATIPLMAuthoringContextServices::CATAuthoringContextMode authorMode;
	CATIPLMAuthoringContextServices::GetCurrentAuthoringContextMode(authorMode);
	CATIConfigEffectivityExpression *piWorkUnderEffectity = NULL;
	CATIPLMAuthoringContextServices::GetSessionEffectivity(piWorkUnderEffectity);		// 有效性？？
	if (piWorkUnderEffectity) 
	{
		CATListPtrCATIConfigEffectivityExpression olistEffectExp;
		olistEffectExp.Append(piWorkUnderEffectity);
		//hr = piConfigAuthoring->SetEffectivities(olistEffectExp);
	}

	rc = saver.Save(&listRootRef);		// 再次保存  MA root Ref！ after 有效性
	if(rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CATIPLMNavReference *pNewManuPartRef = NULL;
	pNewManuPartOcc->GetRelatedReference(pNewManuPartRef);

	// 拷贝Provide Part属性， ProvidePart -> Manufactured Part 
	// 注意针对ref 做处理！
	CUSCAAUtilService::CopyObjectAttribute(pProvidePartRef, pNewManuPartRef);	
	//CATUnicodeString sProductExternalId = CUSCAAUtilService::GetObjectAttrValue(pProductRef, "PLM_ExternalID");

	//CATUnicodeString sNewMACompExternalId = sPartExternalId + "-901";
	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	CATUnicodeString sProductExternalId = pDesignCodeEditor->GetText();
	if(sProductExternalId == "")											// 默认为空！！
		sProductExternalId = CUSCAAUtilService::GetObjectAttrValue(pProductRef, "PLM_ExternalID");
	CATUnicodeString sNewMACompExternalId = sPPRUtity.NextFormatCode(TYPE_ManufacturingPart, sProductExternalId, "-9");	// 添加-90x
	_strMAExternal_ID = sNewMACompExternalId;
	cout <<"## sNewMACompExternalId:     "<< sNewMACompExternalId <<endl;

	// 最终要反注释！BUG？
	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "PLM_ExternalID", sNewMACompExternalId);

	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "name", sNewMACompExternalId);
	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "CUS_ProcessPartCode", sNewMACompExternalId);

	cout << "## MatRef 原先的title:     " << CUSCAAUtilService::GetObjectAttrValue(pNewManuPartRef, "V_Name") << endl;

	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "V_Name", sNewMACompExternalId);
	cout << "## MatRef 改后的title:     " << CUSCAAUtilService::GetObjectAttrValue(pNewManuPartRef, "V_Name") << endl;

	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "CUS_ProcessPartName", sNewMACompExternalId);

	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "CUS_PartCode", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_PartCodeEditor)));
	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "CUS_ManufactureLine",CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ManufactureLineEditor), "CMMBOMAssemDlg", "ManufactureLineKey.Range", ","));
	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "CUS_ProcessUnit", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ProcessUnitEditor)));

	// 修改 ManuPart process instance name 
	CATIPLMNavInstance *spNewManuPartInstance = NULL;
	pNewManuPartOcc->GetRelatedInstance(spNewManuPartInstance);
	//CUSCAAUtilService::SetObjectAttrString(spNewManuPartInstance, "PLM_ExternalID", sNewMACompExternalId);

	// provided 的属性操作 ？――貌似没到
	CATIPLMNavInstance *spProvidePartInstance = NULL;
	pProvidePartOcc->GetRelatedInstance(spProvidePartInstance);
	//CATUnicodeString V_TreeOrder = CUSCAAUtilService::GetAttributeValueFromList(spProvidePartInstance, "V_TreeOrder");
	

	// 开始绑定？product
	DELIPPRProcessAuth_var hPPRProcessAuth;
	rc = ::GetPPRProcessAuth(hPPRProcessAuth);
	if (hPPRProcessAuth == NULL_var)
		return rc;

	//DELIPPRProcessPrecedencesAuth_var hDELIPPRProcessPrecedencesAuth(hPPRProcessAuth);

	//hPPRProcessAuth->QueryInterface(IID_DELIPPRProcessPrecedencesAuth );

	rc = hPPRProcessAuth->AssignProduct(pNewManuPartOcc, pProductOcc);		// 绑定 manuPart 与 CAD part implement link

	
	DELIPPRProcessNav_var hPPRProcessNav;
	rc = ::GetPPRProcessNav(hPPRProcessNav);
	if (hPPRProcessNav == NULL_var)
		return rc;

	// 拷贝 implement  link 关系  1 找cad ref；2 创建 manu- cad scope！
	CATIPLMNavReference * scopeProductRef;
	rc = hPPRProcessNav->GetProductOfTheScope(pProvidePartRef, (void**)&scopeProductRef);
	if (scopeProductRef == NULL)
		return rc;
	rc = hPPRProcessAuth->CreateScope(pNewManuPartRef, scopeProductRef);	

	rc = saver.Save(&listRootRef);					
	//CopyEffectity
	//CATUnicodeString sProvidePhysicalid = CUSCAAUtilService::GetAttributeValueFromList(pProvidePartRef, "V_VersionID");
	//CATUnicodeString sManuPartPhysicalid = CUSCAAUtilService::GetAttributeValueFromList(spNewManuPartRef, "V_VersionID");

	// 貌似 webservice 没起到作用！
	CATUnicodeString iServicePath = "/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/CopyEffectityJPO";

	//CATUnicodeString sServerUrl = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"ServerUrl");
	CATUnicodeString sServerUrl = CUSCAAUtilService::GetServerURL();
	cout<<"sServerUrl:"<< sServerUrl << endl;
	if (sServerUrl.IsNull())
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.failedGetURL");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}
	CATUnicodeString iWebSite = sServerUrl + iServicePath;

	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("", oUserId, oOrganisationId, oProjectId, oRoleId);

	CATUnicodeString SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;

	CATUnicodeString sProvideName = CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "PLM_ExternalID");
	CATUnicodeString sProvideRevision = CUSCAAUtilService::GetObjectAttrValue(pProvidePartRef, "revision");

	CATUnicodeString iFromData = TYPE_ProvidePart + "@@" + sProvideName + "@@" + sProvideRevision;

	CATUnicodeString sManuPartRevision = CUSCAAUtilService::GetObjectAttrValue(pNewManuPartRef, "revision");
	CATUnicodeString iToData = TYPE_ManufacturingPart + "@@" + sNewMACompExternalId + "@@" + sManuPartRevision;

	//CUSCAAUtilService::SetSessionEffectity(spNewManuPartInstance);
	CUSCAAUtilService::WebService(SecurityContext, iWebSite + "?fromObject=" + iFromData+"&toObject=" + iToData);

	// 删除 provided part  process  ―― 【暂时不删除  provide part】
	rc = hPPRProcessAuth->RemovePredecessor(pPartFatherOcc, pProvidePartOcc);	

	// 功能 2 ， 3 开始！
	cout<<"************* 功能 2 ， 3 START！ ***************"<<endl;
	// 2.1 创建 空的 Product、改名；插入当前CADproduct；创建 3DPart，改名字；

	// 输出CATIPLMNavReference_var  pProduct替换  car 模型！

	// 拷贝所有所有实体、标注等内容 复制到新创建的3DPart零件

	// 保存 Product 3DPart
	//CATIPLMNavReference* pNewProdRef;
	CATBaseUnknown* pNewProdBU;
	
	rc = CreateNew3DPartInNewProd(pProductRef,pNewProdBU);		
	if (FAILED(rc) || NULL == pNewProdBU)
	{
		cout << "CreateNew3DPartInNewProd KO！ " << endl;
		return E_FAIL;						// KO!
	}
	cout << "CreateNew3DPartInNewProd OK + 保存OK！ " << endl;


	// 2.4 设置 resulting product  by  CAAFmiProcessOutput.cpp
	int oRet = SetResultingProduct(pNewProdBU);
	if (oRet)
	{
		cout<<"执行 功能二 resulting product KO！ "<<endl;
		return E_FAIL;						// KO!

	}
	cout << "执行 功能二 resulting product OK！ " << endl;

	// 3 自动计算结果产品！

	cout << "************* 功能 2 ， 3 End！ ***************" << endl;
	//ReleasePtr(pNewProdBU);
	//cout << " ReleasePtr(pNewProdBU)  " << endl;						// BUG
	cout << "#2# MatRef 原先的title:     " << CUSCAAUtilService::GetObjectAttrValue(pNewManuPartRef, "V_Name") << endl;
	CUSCAAUtilService::SetObjectAttrString(pNewManuPartRef, "V_Name", sNewMACompExternalId);
	cout << "#2# MatRef 改后的title:     " << CUSCAAUtilService::GetObjectAttrValue(pNewManuPartRef, "V_Name") << endl;

	cout << "#2# MatInst 原先的title:     " << CUSCAAUtilService::GetObjectAttrValue(spNewManuPartInstance, "PLM_ExternalID") << endl;
	CUSCAAUtilService::SetObjectAttrString(spNewManuPartInstance, "PLM_ExternalID", sNewMACompExternalId+".1");
	cout << "#2# MatInst 改后的title:     " << CUSCAAUtilService::GetObjectAttrValue(spNewManuPartInstance, "PLM_ExternalID") << endl;

	return rc;
}

// fengy 2021.11.17 输出CATIPLMNavReference_var  pProduct替换  car 模型！
//  ipProductRef - MA linked CAD ref
//  opNewProdBU  - new 3DPart inst
HRESULT CMCreateMakePartCmd::CreateNew3DPartInNewProd(CATIPLMNavReference *ipProductRef, CATBaseUnknown *& opNewProdBU)
{
	HRESULT rc = E_FAIL;
	if (NULL == ipProductRef)
		return rc;

	CATIPLMProducts* pRootRef = NULL;						// root Ref
	CATIPLMProducts* pCADtRef = NULL;
	ipProductRef->QueryInterface(IID_CATIPLMProducts, (void**)&pCADtRef);  	// ipProductRef 所在

	//CATIPLMProducts* p3DPartRef = NULL;						// 3dpart 所在

	// 新建空product，改名字

	CATIPrdReferenceFactory* pPrdFactory = NULL;
	rc = CATPrdFactory::CreatePrdFactory(IID_CATIPrdReferenceFactory, (void**)&pPrdFactory);
	if (FAILED(rc) || (NULL == pPrdFactory))
		return rc;
	CATLISTV(CATICkeParm_var) EmptyAttributeList;
	CATIType_var spRefType;
	CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spRefType);
	rc = pPrdFactory->CreatePrdReference(spRefType, EmptyAttributeList, pRootRef);			// product Ref 名字而已

	//CATUnicodeString titleM = "M-" + _strMAExternal_ID;
	CATUnicodeString titleM = "M" + _strMAExternal_ID;
	CUSCAAUtilService::SetObjectAttrString(pRootRef, "V_Name", titleM);

	// 插入当前ref
	CATBaseUnknown * pPrdInstance1 = NULL;

	rc = pRootRef->AddProduct(pCADtRef, pPrdInstance1, IID_CATIPLMProducts);				// Add 生成inst！
	if (FAILED(rc) || (NULL == pPrdInstance1))
		return rc;

	cout << "    CAD instance1 AliasName: " << GetAliasName(pPrdInstance1) << endl;

	// 新建3dpart 改名字
	CATIPrd3DPartReferenceFactory *pIPLM3DPartFactory = NULL;
	rc = CATPrdFactory::CreatePrdFactory(IID_CATIPrd3DPartReferenceFactory, (void  **)&pIPLM3DPartFactory);
	if (FAILED(rc) || (NULL == pIPLM3DPartFactory)) 
		return rc;

	CATIPLMProducts * pCreated3DPart = NULL;
	CATLISTV(CATICkeParm_var) EmptyAttrListForRef;
	CATLISTV(CATICkeParm_var) EmptyAttrListForRepRef;
	rc = pIPLM3DPartFactory->Create3DPart(NULL, spRefType, EmptyAttrListForRef, EmptyAttrListForRepRef, pCreated3DPart);
	if (FAILED(rc) || (NULL == pCreated3DPart)) 
		return rc;
	cout << "   The PLM 3D Part has been created " << endl;

	// 插入新的 3dpart ref
	CATBaseUnknown * pPrdInstanceBU2 = NULL;

	rc = pRootRef->AddProduct(pCreated3DPart,  pPrdInstanceBU2, IID_CATIPLMNavInstance);		// Add 生成inst！
	if (FAILED(rc) || (NULL == pPrdInstanceBU2))
		return rc;
	cout << "    3D Part AliasName: "<< GetAliasName(pPrdInstanceBU2) << endl;		//	Physical Product00098435.1

	// 改名字
	CATUnicodeString V_versionValue = _strMAExternal_ID + CUSCAAUtilService::GetObjectAttrValue(ipProductRef, "V_version");
	cout << "  CAD V_version:  " << V_versionValue << endl;							// A

	CATUnicodeString revisionValue = _strMAExternal_ID + CUSCAAUtilService::GetObjectAttrValue(ipProductRef, "revision");
	cout << "  CAD revision:  " << revisionValue << endl;							// A.1

	// CATIPLMProducts QI Ref
	CATIPLMNavReference* p3DPartRef;
	pCreated3DPart->QueryInterface(IID_CATIPLMNavReference, (void**)&p3DPartRef);
	if ((NULL != p3DPartRef))
	{
		CATUnicodeString tmpValue;
		tmpValue = CUSCAAUtilService::GetObjectAttrValue(p3DPartRef, "V_Name");
		cout << "  ref 获取的 V_Name：" << tmpValue << endl;
		
		// 改 ref name ―― KO
		CUSCAAUtilService::SetObjectAttrString(p3DPartRef, "V_Name", V_versionValue);
		cout << "  改 ref name OK！" << endl;
		// 改 ref description  
		CATUnicodeString Str_descript = "MPR";
		CUSCAAUtilService::SetObjectAttrString(p3DPartRef, "V_description", Str_descript);
		cout << "  改 ref description(V_description) OK！" << endl;
	}
	else
	{
		cout << "  CATIPLMProducts QI Ref KO! " << endl;
		return rc;
	}

	// add 后的 instance BU  QI NavInstance
	CATIPLMNavInstance* p3DPartInst;
	pPrdInstanceBU2->QueryInterface(IID_CATIPLMNavInstance, (void**)&p3DPartInst);
	if ((NULL != p3DPartInst))
	{
		CATUnicodeString tmpValue;
		tmpValue = CUSCAAUtilService::GetObjectAttrValue(p3DPartInst, "PLM_ExternalID");
		cout << "  inst name(PLM_ExternalID): " << tmpValue << endl;

		// 改 inst name  
		CUSCAAUtilService::SetObjectAttrString(p3DPartInst, "PLM_ExternalID", revisionValue);
		cout << "  改 inst name(PLM_ExternalID) OK！" << endl;

	}
	else
	{
		cout << "  CATIPLMNavInstance* p3DPartInst   KO! " << endl;
		return rc;
	}

	// 拷贝 要求的元素！――将cad的 实体（PartBody） 复制到新创建的3DPart零件内的 Part节点下
	// 找到 CAD PartBody
	CATIPartRequest_var spCADPart;
	rc = CAAMmrGetPartFromProduct(pPrdInstance1, spCADPart);
	if (FAILED(rc) || ( NULL_var == spCADPart))
	{
		cout << "==== KO ==== >> CAAMmrGetPartFromProduct ! " << endl;
		CATUnicodeString instName = GetAliasName(pPrdInstance1);
		CATUnicodeString tmpStr = "不支持对多级 Product 节点做901运算，请重新检查scope关系！\n	CAD: " + instName;
		//Notify(tmpStr);
		//CUSCAAUtilService::ErrorMessage("Info", tmpStr);
		return rc;
	}
	cout << "==== OK ==== >> CAAMmrGetPartFromProduct ! " << endl;

	// 主 Body 获取方式
	CATBaseUnknown_var spCADPartBody = NULL;				// 主body直接获取不就OK！		// SpecObj
	rc = spCADPart->GetMainBody("", spCADPartBody);
	if (FAILED(rc) || (NULL  == spCADPartBody))
	{
		cout << "==== FAILED  ==== >> GetMainBody ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> GetMainBody ! " << endl;

	// 中英文的问题 
	//HRESULT rc2 = E_FAIL;
	//HRESULT rc1 = CAAMmrGetGeometry(spCADPart, "PartBody", &pCADPartBody);				// 获取 part 下的Geo
	//if (FAILED(rc1))
	//{
	//	cout<<"# 中文环境 （不严格）"<<endl;
	//	rc2 = CAAMmrGetGeometry(spCADPart, "零件几何体", &pCADPartBody);			// 获取 part 下的Geo
	//}
	//else
	//	cout << "# 英文环境 （不严格）" << endl;


	//if ((FAILED(rc1) && FAILED(rc2)) || (NULL == pCADPartBody))
	//{
	//	cout << "==== KO ==== >> CAAMmrGetGeometry ! " << endl;
	//	return rc;
	//}
	//cout << "==== OK ==== >> CAAMmrGetGeometry ! " << endl;

	// 找到 3DPart Part
	CATIPartRequest_var spNew3DPart;
	rc = CAAMmrGetPartFromProduct(p3DPartInst, spNew3DPart);
	if (FAILED(rc) || (NULL_var == spNew3DPart))
	{
		cout << "==== FAILED ==== >> CAAMmrGetPartFromProduct spNew3DPart! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> CAAMmrGetPartFromProduct spNew3DPart! ! " << endl;

	// 新增对 3dpart 坐标平面隐藏！
	CATIMmiUsePrtPart_var spPart = spNew3DPart;
	if  (NULL_var == spPart)
	{
		cout << "==== FAILED ==== >> CATIPartRequest_var QI CATIMmiUsePrtPart! " << endl;
		return E_FAIL;
	}
	cout << "==== OK ==== >> CATIPartRequest_var QI CATIMmiUsePrtPart! " << endl;

	CATListValCATIMmiMechanicalFeature_var spListOfPlanes;
	rc = spPart->RetrieveReferencePlanes(spListOfPlanes);
	if (FAILED(rc) || spListOfPlanes.Size()==0 )
	{
		cout << "==== FAILED ==== >> CATIMmiUsePrtPart;;RetrieveReferencePlanes()! " << endl;
		return E_FAIL;
	}
	cout << "==== OK ==== >> CATIMmiUsePrtPart;;RetrieveReferencePlanes()! " << endl;

	for (int i= 1;i<= spListOfPlanes.Size();i++)
	{
		rc = CUSCAAUtilService::ShowOrHideFeature(spListOfPlanes[i],false);
		if (FAILED(rc) )
		{
			cout << "==== FAILED ==== >>CUSCAAUtilService::ShowOrHideFeature spListOfPlanes[ " <<i << "]." << endl;
			return E_FAIL;
		}
	}
	cout << "==== OK ==== >> ShowOrHideFeature spListOfPlanes! " << endl;


	// 拷贝动作
	CATBaseUnknown_var spOriObject = spCADPartBody;					// PartBody 节点
	CATIMmiMechanicalFeature_var spTargetObject = spNew3DPart;		// PartRequest 节点
	CATIMmiMechanicalFeature_var spResult;
	rc = SpecificalCopy(spOriObject, spTargetObject, spResult);
	if (FAILED(rc) || ( NULL_var == spResult))
	{
		cout << "==== KO ==== >> SpecificalCopy ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> SpecificalCopy ! " << endl;

	// 拷贝之后，Change Part Body and Remove Part Result
	rc = ChangePartBodyandRemove(spNew3DPart, spResult);
	if (FAILED(rc)  )
	{
		cout << "==== FAILED at ==== >> ChangePartBodyandRemove ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >> ChangePartBodyandRemove ! " << endl;

	//opNewProdBU = p3DPartRef;
	opNewProdBU = p3DPartInst;
	if (NULL == opNewProdBU)
	{
		cout << "    opNewProdRef 为空！" << endl;
		return E_FAIL;
	}
	cout << "    opNewProdRef 为真！" << endl;


	// 保存list 元素！
	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;		 
	listRootRef.Append(pRootRef);
	//listRootRef.Append(pPrdInstance1);
	//listRootRef.Append(pPrdInstanceBU2);
	
	rc = saver.Save(&listRootRef);
	if (FAILED(rc))
		cout << "    # 保存KO！" << endl;
	else
		cout << "    # " << GetAliasName(pRootRef) << " 保存OK！！" << endl;
	ReleasePtr(ipProductRef);

	return rc;
}
// 2021.11.23 fengy  没找到OOTB 的功能 右键-更改零件几何体
// Part 节点！ 
// partBody 节点（非mainbody）
HRESULT CMCreateMakePartCmd::ChangePartBodyandRemove(CATIMmiMechanicalFeature_var ispNew3DPart, CATIMmiMechanicalFeature_var ispResult)
{
	HRESULT rc = E_FAIL;
	if ((ispNew3DPart == NULL_var) ||(ispResult == NULL_var))
	{
		cout << "==== FAILED at ==== >> ChangePartBodyandRemove 输入为空 ! " << endl;
		return rc;
	}
	// 思路：直接调用VB  put_MainBody
	// 1 put_MainBody
	CATIPartRequest_var  spNew3DPartReq = ispNew3DPart;
	if (NULL_var == spNew3DPartReq)
	{
		cout << "==== FAILED at ==== >> CATIMmiMechanicalFeature_var QI  CATIPartRequest_var! " << endl;
		return rc;
	}
	cout << "==== OK at ==== >> CATIMmiMechanicalFeature_var QI  CATIPartRequest_var! " << endl;

	// 直接 转成 CATIAPart
	CATIABody * pCATIABody = NULL;
	rc = ispResult->QueryInterface(IID_CATIABody, (void**)&pCATIABody);
	if (FAILED(rc) || (NULL == pCATIABody))
	{
		cout << "==== FAILED at ==== >> CATIMmiMechanicalFeature_var QI pCATIABody" << endl;
		return rc;
	}
	cout << "==== OK ==== >> CATIMmiMechanicalFeature_var QI pCATIABody ! " << endl;
	// 由 CATIPrtPart QI 到 CATIAPart
	CATIAPart * pCATIAPart = NULL;
	rc = spNew3DPartReq->QueryInterface(IID_CATIAPart, (void**)&pCATIAPart);
	if (FAILED(rc) || (NULL == pCATIAPart))
	{
		cout << "==== FAILED at ==== >> CATIPartReques QI pCATIAPart" << endl;
		return rc ;
	}
	cout << "==== OK ==== >> CATIPartReques QI pCATIAPart ! " << endl;

	rc = pCATIAPart->put_MainBody(pCATIABody);
	if (FAILED(rc) )
	{
		cout << "==== FAILED at ==== >> put_MainBody" << endl;
		return rc;
	}
	cout << "==== OK ==== >> put_MainBody ! " << endl;

	// 2  改名字
	CATIABody * pCATIAMainBody_after = NULL;
	rc = pCATIAPart->get_MainBody(pCATIAMainBody_after);
	if (FAILED(rc))
	{
		cout << "==== FAILED at ==== >> get_MainBody" << endl;
		return rc;
	}
	cout << "==== OK ==== >> get_MainBody ! " << endl;

	CATIMmiMechanicalFeature_var spMainBodyAfterOn3DPart;
	rc = pCATIAMainBody_after->QueryInterface(IID_CATIMmiMechanicalFeature, (void**)&spMainBodyAfterOn3DPart);
	if (FAILED(rc) || (NULL_var == spMainBodyAfterOn3DPart))
	{
		cout << "==== FAILED at ==== >>  pCATIABody QI CATIMmiMechanicalFeature_var" << endl;
		return rc;
	}
	cout << "==== OK ==== >> pCATIABody QI CATIMmiMechanicalFeature_var ! " << endl;
	pCATIAMainBody_after->Release();
	pCATIAMainBody_after = NULL;

	CATIAlias_var spAlias = spMainBodyAfterOn3DPart;
	CATUnicodeString MainBodyStr = "PartBody";
	if (NULL_var != spAlias)
	{
		cout << "# pCATIAMainBody_after alias: "<< spAlias->GetAlias() << endl;
		spAlias->SetAlias(MainBodyStr);
	}
	rc = pCATIAPart->Update();
	if (FAILED(rc))
	{
		cout << "==== FAILED at ==== >> Update" << endl;
		return rc;
	}
	cout << "==== OK ==== >> Update ! " << endl;

	// 3 删除原来的主 Body
	// 3.1 找到 solidBody
	CATListValCATBaseUnknown_var sp3DPartBodyList;
	rc = spNew3DPartReq->GetSolidBodies("", sp3DPartBodyList);
	int sizeofBodyList = sp3DPartBodyList.Size();
	cout<<"# 去除 index 前："<< sizeofBodyList <<endl;
	if (FAILED(rc) || ( 0 == sizeofBodyList))
	{
		cout << "==== FAILED at ==== >> spNew3DPartReq->GetSolidBodies ! " << endl;
		return rc;
	}
	cout << "==== OK ==== >>spNew3DPartReq->GetSolidBodies ! " << endl;

	// 3.2 去除 mainbody : spMainBodyAfterOn3DPart
	for (int i = 1; i <= sizeofBodyList; i++)
	{
		CATBaseUnknown * p3DPartBody = sp3DPartBodyList[i];
		int ifEqual = 0;
		ifEqual = p3DPartBody->IsEqual(spMainBodyAfterOn3DPart);
		if (1 == ifEqual)
		{
			cout << " #   mainbody 索引 ： " << i << endl;

			sp3DPartBodyList.RemovePosition(i);
			break;
		}
	}
	// 3.3 删除
	sizeofBodyList = sp3DPartBodyList.Size();
	cout << "# 去除 index 后：" << sizeofBodyList << endl;

	for (int i = 1; i <= sizeofBodyList; i++)
		DeleteFeature(sp3DPartBodyList[i]);


	pCATIAPart->Release();
	pCATIAPart = NULL;

	pCATIABody->Release();
	pCATIABody = NULL;

	

	return rc;
}

// fengy  2021.11.23 从当前的partbody下获取所有的子集！含递归嵌套？
HRESULT CMCreateMakePartCmd::GetAllSolidsUndCurBody(CATIMmiMechanicalFeature_var ispResult, CATLISTV(CATBaseUnknown_var) & ospSolidList)
{
	HRESULT rc =E_FAIL;
	if (  (ispResult == NULL_var))
	{
		cout << "==== FAILED at ==== >> GetAllSolidsUndCurBody 输入为空 ! " << endl;
		return rc;
	}

	// from edu  CAAMmrPartBodyRequest.cpp 
	CATIAlias_var aliasOnCurrentSet = ispResult;		// 当前的 partBody
	if (NULL_var != aliasOnCurrentSet)
	{
		cout << " Alias Name of the current set     " << aliasOnCurrentSet->GetAlias().ConvertToChar() << endl;
	}
	CATIMmiGeometricalSet * pGeometricalSet = NULL;	 //GS
	rc = ispResult->QueryInterface(IID_CATIMmiGeometricalSet, (void**)& pGeometricalSet);
	if (SUCCEEDED(rc) && pGeometricalSet)
	{
		cout << "The set " << aliasOnCurrentSet->GetAlias().ConvertToChar() << " adheres to interface  CATIMmiGeometricalSet " << endl;
		//nbOrderedGeomSet++;

		pGeometricalSet->Release();
		pGeometricalSet = NULL;
	}


	CATIMmiMechanicalFeature * pMechanicalFeature = NULL;		 // Body
	rc = ispResult->QueryInterface(IID_CATIMmiMechanicalFeature, (void**)& pMechanicalFeature);
	
	CATUnicodeString viewContext = "MfDefault3DView";

	// 1- Retrieves the result ―― 都进入查询子集！
	//

	CATIBodyRequest *pBodyRequestOnCurrentSet = NULL;			//  BodyRequest 用于 几何图形集 检索
	rc = ispResult->QueryInterface(IID_CATIBodyRequest, (void**)&pBodyRequestOnCurrentSet);
	if (SUCCEEDED(rc))
	{
		rc = pBodyRequestOnCurrentSet->GetResults(viewContext, ospSolidList);
		if (SUCCEEDED(rc))
		{
			int SizeListResult = ospSolidList.Size();
			cout << endl;
			cout << "         Count of elements in the result list=" << SizeListResult << endl;

			// 
			// 2- Processes each element of the list of results
			//
			for (int curFeatIdx = 1; curFeatIdx <= SizeListResult; curFeatIdx++)
			{
				CATBaseUnknown_var CurrentFeat = ospSolidList[curFeatIdx];
				if (NULL_var == CurrentFeat)
					break;

				CATIAlias_var aliasOnCurFeat = CurrentFeat;
				if (NULL_var != aliasOnCurFeat)
					cout << "The alias name of current mechanical feature is :  " << aliasOnCurFeat->GetAlias().ConvertToChar() << endl;
			}
		}
		else
			cout << " E_FAIL for GetResult" << endl;

		pBodyRequestOnCurrentSet->Release();
		pBodyRequestOnCurrentSet = NULL;
	}

	return rc;
}

// 解决 BU toRef fengy 2021.11.18
CATIPLMNavReference_var  CMCreateMakePartCmd::FromBUToRef(CATBaseUnknown * ipNewProdBU)			// BU 转到 ref，ko？
{
	CATIPLMNavReference_var ospNavRef ;

	// 法一  貌似不推荐
	CATIPrdObject_var spPrdObject = ipNewProdBU;
	ReleasePtr(ipNewProdBU);

	if (NULL_var != spPrdObject)
	{
		CATIPLMNavReference* pNavRef = NULL;
		HRESULT rc = spPrdObject->GetReferenceObject((CATBaseUnknown*&)pNavRef,IID_CATIPLMNavReference);
		if (/*SUCCEEDED(rc) && */   NULL != pNavRef)
		{
			cout << "    # FromBUToRef 1111111111" << endl;
			ospNavRef = pNavRef;
			if (NULL_var != ospNavRef)
				cout << "    # FromBUToRef OK！" << endl;
			else
				cout << "    # FromBUToRef KO 3！" << endl;
		}
		else
			cout << "    # FromBUToRef KO1！" << endl;
	}
	else
		cout << "    # FromBUToRef KO2！" << endl;

	//// 法二
	//CATIPLMNavOccurrence *pNavOccOnSelObj = NULL;
	//HRESULT rc = ipNewProdBU->QueryInterface(IID_CATIPLMNavOccurrence, (void**)&pNavOccOnSelObj);

	//if (SUCCEEDED(rc))
	//{
	//	CATIPLMNavReference * pRef = NULL;
	//	pNavOccOnSelObj->GetRelatedReference(pRef);
	//	if (NULL != pRef)
	//	{
	//		ospNavRef = pRef;
	//		if (NULL_var != ospNavRef)
	//			cout << " GetRelatedReference OK! " << endl;
	//		else
	//			cout << "    # FromBUToRef KO 3！" << endl;
	//	}
	//	else
	//		cout << "    # FromBUToRef KO 1！" << endl;
	//}
	//else
	//	cout << "    # FromBUToRef KO 2！" << endl;

	return ospNavRef;
}



void CMCreateMakePartCmd::DeleteFeature(CATBaseUnknown_var spObj)
{
	CATIUseEntity_var spUseEntity = spObj;
	if (NULL_var != spUseEntity)
	{
		DataCommonProtocolServices::Delete(spUseEntity);
		cout << " DeleteFeature : " << GetAliasName(spObj)<< endl;
	}
}

void CMCreateMakePartCmd::UpdateFeature(CATBaseUnknown_var spObj)
{
	CATIUseEntity_var spUseEntity = spObj;
	if (NULL_var != spUseEntity)
	{
		DataCommonProtocolServices::Update(spUseEntity);
	}
}

// ******************** 几个包  Start *********************

// DELIPPRProcessOutputAuth::SetProcessOutput()  from edu CAAFmiProcessOutput.cpp		//RunUseCase
int CMCreateMakePartCmd::SetResultingProduct(CATBaseUnknown * ipNewProdBU)
{
	if (!ipNewProdBU)
	{
		cout << "ChoseResultingProduct 输入为空！" << endl;
		return 1;
	}
	HRESULT rc = E_FAIL;
	CATOmbLifeCycleRootsBag Bag;


	//Get the DELIPPRProcessAuth interface
	//------------------------------------

	DELIPPRProcessAuth_var hPPRProcessAuth;
	rc = ::GetPPRProcessAuth(hPPRProcessAuth);
	_RETURN_IF_FAILED_(rc, "::GetPPRProcessAuth");
	if (!hPPRProcessAuth) return 1;

	//Get the DELIPPRProcessNav interface
	//-----------------------------------

	DELIPPRProcessNav_var hPPRProcessNav;
	rc = ::GetPPRProcessNav(hPPRProcessNav);				// 仅仅用于取名字？？
	_RETURN_IF_FAILED_(rc, "::GetPPRProcessNav");
	if (!hPPRProcessNav) return 1;

	//Find the root process reference
	//-------------------------------
	// 替换成 交互选择的 provide part
	CATIPLMNavOccurrence_var hNavOccOnProcessInst = pNewManuPartOcc;		// Root occ 删掉了 provided part，换成901 manu part
	CATIPLMNavReference * pNavRefOnRootProcess;
	rc = pNewManuPartOcc->GetRelatedReference(pNavRefOnRootProcess);
	if (FAILED(rc))
	{
			cout << "=== FAILED ===> GetRelatedReference" << endl;
			return 1;
	}
	CATIPLMNavReference_var hNavRefOnRootProcess = pNavRefOnRootProcess;
	cout << "=== OK ===>process  GetRelatedReference" << endl;

	//Find the root product reference
	//-------------------------------
	//CATIType_var spTypeProduct;
	//rc = CATCkePLMNavPublicServices::RetrieveKnowledgeType("VPMReference", spTypeProduct);
	//CATAdpAttributeSet AttributeSetProduct;
	//AttributeSetProduct.AddAttribute("V_Name", "fengy_CAA_Car");
	//CATIPLMNavReference * pProduct = NULL;
	//int ret = CMCreateMakePartCmd::FindReference(Bag,	AttributeSetProduct,	spTypeProduct,	IID_CATIPLMNavReference,	(void **)&pProduct);
	//_RETURN_IF_TRUE_(ret, "fengy_CAA_Car");
	//CATIPLMNavReference_var hNavRefOnRootProduct = pProduct;
	//ReleasePtr(pProduct);

	CATIPLMNavReference_var hNavRefOnRootProduct = FromBUToRef(ipNewProdBU);			// BU 转到 ref，ko？

	if (NULL_var == hNavRefOnRootProduct)
	{
		cout << "=== FAILED ===> BU 转到 ref" << endl;
		return 1;
	}
	cout << "=== OK ===> BU 转到 ref" << endl;

	//ReleasePtr(ipNewProdBU);
	//cout << " ReleasePtr(ipNewProdBU) KO" << endl;		// 很奇怪！BUG


	DELIPPRProcessOutputAuth_var hPPRProcessOutputAuth(hPPRProcessAuth);		// Auth 转换
	if (NULL_var == hPPRProcessOutputAuth)
	{
		cout << "=== FAILED ===> Cast in hPPRProcessOutputAuth" << endl;
		return 1;
	}

	DELIPPRProcessOutputNav_var hPPRProcessOutputNav(hPPRProcessNav);			// Process nav 转换
	if (NULL_var == hPPRProcessOutputNav)
	{
		cout << "=== FAILED ===> Cast in hPPRProcessOutputNav" << endl;
		return 1;
	}

	//Set ProcessOutput
	//-------------------------------

	rc = hPPRProcessOutputAuth->SetProcessOutput(hNavRefOnRootProcess, hNavRefOnRootProduct);
	if (FAILED(rc))
	{
		cout << "=== FAILED ===> SetProcessOutput" << endl;
		return 1;
	}

	//Get ProcessOutput
	//-------------------------------

	CATIPLMNavReference *pProductOut = NULL;

	rc = hPPRProcessOutputNav->GetProcessOutput(hNavRefOnRootProcess, pProductOut);

	// 尝试打印出  
	cout << "# 1 GetProcessOutput Alias：" << GetAliasName(pProductOut) << endl;

	//ReleasePtr(pProductOut);				// 会不会是此处释放			
	if (FAILED(rc))
	{
		cout << "=== FAILED ===> GetProcessOutput" << endl;
		return 1;
	}

	//// 尝试更新！！
	//DELIPPRProcessOutputComputeAuth_var hPPRProcessOutputComputeAuth(hPPRProcessAuth);
	//if (NULL_var == hPPRProcessOutputComputeAuth)
	//{
	//	cout << "=== FAILED ===> Cast in hPPRProcessOutputComputeAuth" << endl;
	//	return 1;
	//}
	//cout << "=== OK ===> hPPRProcessOutputComputeAuth" << endl;

	//CATIPLMNavReference*  opProcessOutput;
	//rc = hPPRProcessOutputComputeAuth->ComputeProcessOutput(hNavOccOnProcessInst, opProcessOutput);
	//if (FAILED(rc))
	//{
	//	cout << "=== FAILED ===> ComputeProcessOutput" << endl;
	//	return 1;
	//}
	//cout << "=== OK ===> ComputeProcessOutput" << endl;
	//
	//rc = hPPRProcessOutputComputeAuth->UpdateProcessOutput(hNavOccOnProcessInst);
	//if (FAILED(rc))
	//{
	//	cout << "=== FAILED ===> UpdateProcessOutput" << endl;
	//	return 1;
	//}
	//cout << "=== OK ===> UpdateProcessOutput" << endl;

	// ===========================================================================================================
	// 6. Saving the Root Product 
	// ===========================================================================================================
	//CATAdpSaver saver;
	//HRESULT hr = saver.Save();
	//if (FAILED(hr))
	//{
	//	cout << "\t\tSave KO ." << endl;
	//	return 1;
	//}

	//cout << "\t\tSave successful ." << endl;

	//Clear the Bag
	//-------------

	rc = Bag.RemoveAll();
	//_RETURN_IF_FAILED_(rc, "Bag.RemoveAll");					// KO！

	return 0;
}
void CMCreateMakePartCmd::ReleasePtr(CATBaseUnknown * piCBU)
{
	if (NULL != piCBU)
	{
		piCBU->Release();
		piCBU = NULL;
	}
}

int CMCreateMakePartCmd::FindReference( CATOmbLifeCycleRootsBag & iLifeCycleBag,
										const CATAdpAttributeSet & iAttributeSet,
										CATIType * ipModelerType,
										const IID & iIID,
										void ** oppReference)
{
	HRESULT hr = E_FAIL;

	CATLISTP(CATAdpQueryResult) QueryResults;
	hr = CATAdpPLMQueryServices::GetElementsFromAttributes(ipModelerType, iAttributeSet, QueryResults);

	if (FAILED(hr)) return 1;

	// If several object match with this query we open only the first one.
	int NbResult = QueryResults.Size();
	if (1 <= NbResult)
	{
		CATAdpQueryResult * pQueryResult = QueryResults[1];
		if (NULL != pQueryResult)
		{
			CATIAdpPLMIdentificator * piPLMId = NULL;
			hr = pQueryResult->GetIdentifier(piPLMId);

			if (SUCCEEDED(hr) && NULL != piPLMId)
			{
				CATAdpOpener opener(iLifeCycleBag);			// 此处为何指定输入 lifebag？
				hr = opener.CompleteAndOpen(piPLMId, iIID, oppReference);
			}
			if (NULL != piPLMId)
			{
				piPLMId->Release();
				piPLMId = NULL;
			}
		}
		for (int ind = 1; ind <= NbResult; ++ind)		// 注意每处的释放！ 大程序会造成泄露 
		{
			CATAdpQueryResult * pQueryResult = QueryResults[ind];
			if (NULL != pQueryResult)
			{
				delete pQueryResult;
				pQueryResult = NULL;
			}
		}
	}
	else return 1;

	if (FAILED(hr)) return 1;

	return 0;
}

// from Process ref to Occ
HRESULT CMCreateMakePartCmd::GetOccurrenceFromProcessReference(
	const CATIPLMNavReference_var & ihNavRef,
	CATIPLMNavOccurrence_var & ohNavOcc)
{
	DELIPPRProcessOccAuth* pProcessAuthService = getDELIPPRProcessOccAuth();
	DELIPPRProcessOccAuth_var hProcessOccAuth(pProcessAuthService);
	ReleasePtr(pProcessAuthService);
	if (hProcessOccAuth == NULL_var) return E_FAIL;

	CATIPLMNavOccurrence * pNavOcc = NULL;
	HRESULT rc = hProcessOccAuth->GetOrCreateRootOccurrence(ihNavRef, pNavOcc);
	ohNavOcc = pNavOcc;
	ReleasePtr(pNavOcc);
	return rc;
}


HRESULT CMCreateMakePartCmd::CAAMmrGetPartFromProduct(CATIPLMNavInstance_var   spNavInstance, CATIPartRequest_var  & ospPartFromProduct)

{
	HRESULT rc = E_FAIL;

	if (NULL_var == spNavInstance) return E_FAIL;

	// Retrieve the reference of the current instance
	CATIPLMNavReference *pReferenceOfInstance = NULL;
	rc = spNavInstance->GetReferenceInstanceOf(pReferenceOfInstance);

	// Retrieve the first inst rep ref
	//	inst - ref - repInst(s) - RepRef - PrtCont - CATIMmiMechanicalFeature(prtPart)
	CATIPLMNavRepInstance * pNavRepInst = NULL;
	if (NULL != pReferenceOfInstance)
	{
		CATListPtrCATIPLMNavEntity ListNavEntity = NULL;
		CATPLMCoreType TypeRepInstance = PLMCoreRepInstance;
		pReferenceOfInstance->ListChildren(ListNavEntity, 1, &TypeRepInstance);

		if (ListNavEntity.Size() >= 1)
		{
			CATIPLMNavEntity *pCurrent = ListNavEntity[1];
			rc = pCurrent->QueryInterface(IID_CATIPLMNavRepInstance, (void**)& pNavRepInst);	// RepInst
		}
		for (int i = 1; i <= ListNavEntity.Size(); i++)
		{
			CATIPLMNavEntity *pCurrent = ListNavEntity[1];
			if (NULL != pCurrent)
			{
				pCurrent->Release(); pCurrent = NULL;
			}
		}
		pReferenceOfInstance->Release(); pReferenceOfInstance = NULL;
	}

	// Retrieve the reference of the first inst rep ref
	CATIPLMNavRepReference *pNavRepRef = NULL;
	if (NULL != pNavRepInst)
	{
		rc = pNavRepInst->GetRepReferenceInstanceOf(pNavRepRef);
		pNavRepInst->Release(); pNavRepInst = NULL;
	}

	// change the loading mode
	if (NULL != pNavRepRef)
	{
		CATIPsiRepresentationLoadMode *piRepLoadMode = NULL;
		rc = pNavRepRef->QueryInterface(IID_CATIPsiRepresentationLoadMode, (void **)&piRepLoadMode);

		if (SUCCEEDED(rc) && NULL != piRepLoadMode)
		{
			rc = piRepLoadMode->ChangeLoadingMode(CATIPsiRepresentationLoadMode::EditMode);
			piRepLoadMode->Release();
			piRepLoadMode = NULL;
		}
	}

	//Retrieve the applicative container
	CATIMmiPrtContainer * pContainer = NULL;
	if (SUCCEEDED(rc) && (NULL != pNavRepRef))
	{
		rc = pNavRepRef->RetrieveApplicativeContainer("CATPrtCont", IID_CATIMmiPrtContainer, (void **)&pContainer);
	}

	if (SUCCEEDED(rc) && (NULL != pContainer))
	{
		CATIMmiMechanicalFeature_var spMechFeatOnPart;
		rc = pContainer->GetMechanicalPart(spMechFeatOnPart);

		if (SUCCEEDED(rc) && (NULL_var != spMechFeatOnPart))
			ospPartFromProduct = spMechFeatOnPart;
	}

	if (NULL != pContainer)
	{
		pContainer->Release();  pContainer = NULL;
	}

	if (NULL != pNavRepRef)
	{
		pNavRepRef->Release(); pNavRepRef = NULL;
	}


	if (NULL_var == ospPartFromProduct)
		return E_FAIL;
	else return S_OK;

}

HRESULT CMCreateMakePartCmd::CAAMmrGetGeometry(CATIPartRequest_var ispModelPart, const CATUnicodeString iInputName,
	CATBaseUnknown ** oInput)
{
	HRESULT rc = E_FAIL;
	CATBoolean found = FALSE;

	if ((NULL != oInput) && (NULL_var != ispModelPart))
	{
		*oInput = NULL;

		// Retrieves all root bodies , all GS and all root OGS ( it does not retrieve ALL bodies below the Part)
		CATListValCATBaseUnknown_var pListBodies;
		rc = ispModelPart->GetAllBodies("", pListBodies);
		if (SUCCEEDED(rc))
		{
			int iBodies = 1;
			int nbbodies = pListBodies.Size();

			while ((FALSE == found) && (iBodies <= nbbodies))
			{
				CATIAlias_var spAliasBody = pListBodies[iBodies];
				if (NULL_var != spAliasBody)
				{
					CATUnicodeString currentbodyname = spAliasBody->GetAlias();

					if (iInputName == currentbodyname)
					{
						// We have found a body
						found = TRUE;
						rc = spAliasBody->QueryInterface(IID_CATBaseUnknown, (void**)&(*oInput));
					}
					else
					{
						// Research in the body
						CATIMmiUseBodyContent_var spUseBodyContentOnBody = spAliasBody;
						if (spUseBodyContentOnBody != NULL_var)
						{
							// Retrieve all geometrical element in the body 
							CATListValCATBaseUnknown_var ListFeatureInsideCurrentBody;
							spUseBodyContentOnBody->GetMechanicalFeatures(ListFeatureInsideCurrentBody);
							int nbchild = ListFeatureInsideCurrentBody.Size();

							int iChild = 1;
							while ((FALSE == found) && (iChild <= nbchild))
							{
								CATIAlias_var spChild = ListFeatureInsideCurrentBody[iChild];
								if (NULL_var != spChild)
								{
									CATUnicodeString currentchildname = spChild->GetAlias();

									if (iInputName == currentchildname)
									{
										// we have found a child of a body
										found = TRUE;
										rc = spChild->QueryInterface(IID_CATBaseUnknown, (void**)&(*oInput));
									}
								}
								iChild++;
							}
						}
					}
				}
				iBodies++;
			}
		}

	}

	if (TRUE == found)
	{
		rc = S_OK;
	}
	else rc = E_FAIL;

	return rc;
}



CATUnicodeString CMCreateMakePartCmd::GetAliasName(CATBaseUnknown * ipBaseUnknown)
{
	CATUnicodeString ElementName("");
	if (NULL != ipBaseUnknown)
	{
		CATIAlias_var spAlias = ipBaseUnknown;
		if (NULL_var != spAlias)  ElementName = spAlias->GetAlias();
	}
	return ElementName;
}

// ******************** 几个包  End *********************


//  选择性粘贴 fengy 2021.11.22
HRESULT CMCreateMakePartCmd::SpecificalCopy(CATBaseUnknown_var ispOriObject,
											CATIMmiMechanicalFeature_var ispTargetObject,
											CATIMmiMechanicalFeature_var & ospResult,
											CATBoolean iMode)
{
	HRESULT rc = E_FAIL;
	// 5   Copy PartBody of Comp3 into Part of Comp1
	//
	cout << "   Copy PartBody of CAAMmrPartCopy_Comp3 into CAAMmrPartCopy_Comp1" << endl;

	CATIMmiUseCreateImport* pInterPartCopy = NULL;
	rc = CATMmiUseServicesFactory::CreateMmiUseCreateImport(pInterPartCopy);		// 拷贝
	if (FAILED(rc) || (NULL == pInterPartCopy))
	{
		cout << "==== KO ==== >> CreateMmiUseCreateImport " << endl;
		return rc ;
	}
	cout << "   The CATIMmiInterPartCopy interface pointer has been found" << endl;

	CATBaseUnknown_var           SourceToCopy = ispOriObject;					// source 控制 拷贝的元素！
	CATIMmiMechanicalFeature_var Target = ispTargetObject;	// 父级 目标！

	rc = pInterPartCopy->SetObject(SourceToCopy);
	if (FAILED(rc))
	{
		cout << "==== KO ==== >> SetObject " << endl;
		return rc;
	}
	rc = pInterPartCopy->SetTarget(Target);
	if (FAILED(rc))
	{
		cout << "==== KO ==== >> SetTarget " << endl;
		return rc;
	}
	
	//// 测试 暂时不写！
	//// The product source
	//if (TRUE == PSContext)
	//{
	//	rc = pInterPartCopy->SetPLMOccurrences(spOccurrenceComp3, spOccurrenceComp1);		// 麻烦处！
	//	if (FAILED(rc))
	//	{
	//		
	//		cout << "==== KO ==== >> SetPLMOccurrences " << endl;
	//		return rc;

	//	}
	//}

	// Sets the option of copy 
	rc = pInterPartCopy->SetLinkMode(iMode);
	if (FAILED(rc))
	{
		cout << "==== KO ==== >> SetLinkMode " << endl;
		return rc;
	}

	// Executes the copy
	rc = pInterPartCopy->Run(ospResult);
	if (FAILED(rc) || (NULL_var == ospResult))
	{
		
		cout << "==== KO ==== >> Run " << endl;
		//CUSCAAUtilService::ErrorMessage("info..", "所关联的件PartBody不能被成功拷贝！请检查数模！");	// 这一句很重要！确保能够在测试KO时，不用看log就能让用户定位原因！
		return rc;

	}
	cout << "      Run is ok" << endl;

	// Displays the result
	CATIAlias_var alias = ospResult;
	if (NULL_var != alias)
	{
		cout << "      The result of the copy is: "<< alias->GetAlias().ConvertToChar()  << endl << endl;
	}

	// mandatory to begins another copy
	rc = pInterPartCopy->Reset();
	if (FAILED(rc))
	{
		cout << "==== KO ==== >> Reset " << endl;

		return rc;

	}
	cout << "      Copy PartBody of CAAMmrPartCopy_Comp3 into CAAMmrPartCopy_Comp1 is done " << endl;

	return rc;
}