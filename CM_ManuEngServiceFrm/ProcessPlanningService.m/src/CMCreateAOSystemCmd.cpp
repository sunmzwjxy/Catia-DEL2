//===================================================================
// COPYRIGHT  2020/09/16
//===================================================================
// CMCreateAOSystemCmd.cpp
// Header definition of class CMCreateAOSystemCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/16 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateAOSystemCmd.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATDlgEditor.h"
#include "CATApplicationFrame.h"

#include "CATCreateExternalObject.h"
CATCreateClass(CMCreateAOSystemCmd);

#include "CUSCAAUtilService.h"


//-----------------------------------------------------------------------------
// CMCreateAOSystemCmd : constructor
//-----------------------------------------------------------------------------
CMCreateAOSystemCmd::CMCreateAOSystemCmd() :
	CATStateCommand("CMCreateAOSystemCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMSystemAODlg(pWnd, "AO System");
	_Panel->Build();
	_Panel->SetFather(this);

	pMIDComponentRef = NULL;
	pMIDCompInstance = NULL;
	pMIDComponentOcc = NULL;
	pMIDFatherCompRef = NULL;
	pAOFatherRef = NULL;
	pAOFatherOcc = NULL;
	pAOPreviousRef = NULL;
	pAOPreviousOcc = NULL;

	bApplyCreate = false;
	//
}

//-----------------------------------------------------------------------------
// CMCreateAOSystemCmd : destructor
//-----------------------------------------------------------------------------

CMCreateAOSystemCmd::~CMCreateAOSystemCmd()
{
	//
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_RELEASE_PTR_(pMIDComponentRef);
	_RELEASE_PTR_(pMIDCompInstance);
	_RELEASE_PTR_(pMIDComponentOcc);
	_RELEASE_PTR_(pMIDFatherCompRef);
	_RELEASE_PTR_(pAOFatherRef);
	_RELEASE_PTR_(pAOFatherOcc);
	_RELEASE_PTR_(pAOPreviousRef);
	_RELEASE_PTR_(pAOPreviousOcc);
	//
}

void CMCreateAOSystemCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateAOSystemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateAOSystemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateAOSystemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateAOSystemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateAOSystemCmd::ElementSelection, NULL, NULL, (void*)1));

	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_SectionAreaCombo), "CMSystemAODlg", "SectionArea.Range", "|");

	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ProfessionWorkCodeCombo), "CMSystemAODlg", "ProfessionWorkCode.Range", "|");

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateAOSystemCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

CATBoolean CMCreateAOSystemCmd::Init(void *data)
{
	_Panel->SetVisibility(CATDlgShow);

	return TRUE;
}

CATBoolean CMCreateAOSystemCmd::CheckAOSelect()
{
	//Check AO facther system if select
	if (pAOFatherOcc)
		return TRUE;
	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.nodeFatherNull");
	CUSCAAUtilService::ErrorMessage(Title, msg);
	return FALSE;
}

CATBoolean CMCreateAOSystemCmd::CheckInputCode(int code)
{
	CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputAONameEditor);
	sInputAOName = pInputEditor->GetText();
	if (sInputAOName == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.AOTitleNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	CATUnicodeString sGWCode = CUSCAAUtilService::GetObjectAttrValue(pGWRef, "PLM_ExternalID");

	CATUnicodeString sZWCode = CUSCAAUtilService::GetObjectAttrValue(pAOFatherRef, "PLM_ExternalID");

	CATUnicodeString sSectionAreaCode = CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_SectionAreaCombo));
	sSectionAreaCode = sSectionAreaCode.SubString(0, 1);
	CATUnicodeString sPrefessWorkCode = CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ProfessionWorkCodeCombo));
	sPrefessWorkCode = sPrefessWorkCode.SubString(0, 1);
	CATDlgEditor *pSequenceCodeEditor = _Panel->GetEditor(ID_AOSequenceCodeEditor);
	CATUnicodeString sSequenceCode = pSequenceCodeEditor->GetText();
	if (sSequenceCode == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.OperOrderCodeNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else {		
		if (!spPPRUtity.CheckNumberChar(sSequenceCode, 4))
		{
			CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
			CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.CodeNumberFourError");
			CUSCAAUtilService::ErrorMessage(Title, msg);
			return FALSE;
		}
	}

	CATDlgEditor *pOperationOrderEditor = _Panel->GetEditor(ID_InputOperationOrderEditor); 
	CATUnicodeString sOperOrderCode = pOperationOrderEditor->GetText();
	if (sOperOrderCode != "")
	{
		if (!spPPRUtity.CheckNumberChar(sOperOrderCode, 2))
		{
			CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
			CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.CodeNumberFourError");
			CUSCAAUtilService::ErrorMessage(Title, msg);
			return FALSE;
		}
		sOperOrderCode = "." + sOperOrderCode;
	}

	CATDlgEditor *pInputEffEditor = _Panel->GetEditor(ID_InputEffEditor);
	sInputEffecivity = pInputEffEditor->GetText();
	if (sInputEffecivity != "" && !CUSCAAUtilService::CheckEffectivity(sInputEffecivity)) {

		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.inputEffError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else if (sInputEffecivity == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.inputEffNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	CATUnicodeString sInputAOCode = sZWCode + sSectionAreaCode + sPrefessWorkCode + sSequenceCode + sOperOrderCode;
	//CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputAOCodeEditor);
	//CATUnicodeString sInputAOCode = pInputEditor->GetText();

	//if ((code == 0) && (sApplyAOCode == sInputAOCode))
	//	return TRUE;

	//if (sInputAOCode == "")
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.inputCodeNull");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return TRUE;
	//}

	//if (sInputAOExternalID == sInputAOCode)
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.uniqueIDError");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return TRUE;
	//}

	CATListPtrCATIPLMNavReference opilistIDComp;
	HRESULT hr = CUSCAAUtilService::GetObjReference(sInputAOCode, "", opilistIDComp, "CUS_AOSystemRef");
	int n_Size = opilistIDComp.Size();
	if (n_Size >= 1)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.uniqueIDError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return TRUE;
	}
	//else if (n_Size == 1) {
	//	CATIPLMNavInstance * opInstance = NULL;
	//	spPPRUtity.InsertExistSystem(pAOFatherRef, opilistIDComp[1], (CATBaseUnknown *&)opInstance);
	//}
	else {
		sInputAOExternalID = sInputAOCode;
		CreateDELAOSystem();
		if (code = 1)
			sApplyAOCode = sInputAOExternalID;
	}

	return TRUE;
}

#include "CATIPLMAuthoringContextServices.h"

HRESULT CMCreateAOSystemCmd::CreateDELAOSystem()
{
	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;
	listRootRef.Append(pAOFatherRef);

	HRESULT rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	//PPRUtity spPPRUtity;
	CATIPLMNavInstance * spNewAOSystemInstance;
	 rc = spPPRUtity.CreateSubSystemOrOperation(TYPE_AOSystem,
		pAOFatherRef, spNewAOSystemInstance);

	if (spNewAOSystemInstance == NULL) {
		cout << "Failed to create operation under the system" << endl;
		return S_FALSE;
	}

	CATIPLMNavReference * spNewAOSystemRef = NULL;
	rc = spNewAOSystemInstance->GetReferenceInstanceOf(spNewAOSystemRef);
	if (spNewAOSystemRef == NULL)
	{
		cout << "Failed to Get new AO system Reference" << endl;
		return S_FALSE;
	}

	//AO Code
	
	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemRef, "PLM_ExternalID", sInputAOExternalID);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemRef, "CUS_AOCode", sInputAOExternalID);

	//CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputAONameEditor);
	//sInputAOName = pInputEditor->GetText();
	//if (sInputAOName == "")
	//	sInputAOName = sInputAOExternalID;
	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemRef, "V_Name", sInputAOName);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemRef, "CUS_AOTitle", sInputAOName);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemRef, "CUS_Eff", sInputEffecivity);

	//CATUnicodeString sInstanceName = GetObjectAttrValue(spNewAOSystemInstance, "PLM_ExternalID");
	rc = CUSCAAUtilService::SetObjectAttrString(spNewAOSystemInstance, "PLM_ExternalID", sInputAOExternalID + ".1");


	// exit if MID not select

	CATIPLMNavOccurrence * spNewAOSystemOccurrence;
	rc = spPPRUtity.GetOccFromSystemFather(pAOFatherOcc, spNewAOSystemInstance, spNewAOSystemOccurrence);
	if (spNewAOSystemOccurrence == NULL)
	{
		cout << "Failed to Get Occurrence from new create AO system" << endl;
		return S_FALSE;
	}

	DELIPPRSystemAuth_var hPPRSystemAuth;
	rc = ::GetPPRSystemAuth(hPPRSystemAuth);
	//Create scope
	if (pMIDComponentOcc != NULL)
		rc = hPPRSystemAuth->CreateScope(spNewAOSystemOccurrence, pMIDComponentOcc);

	rc = CUSCAAUtilService::CopyDictionariesModel(pAOFatherRef, (CATBaseUnknown*&)spNewAOSystemRef);
	if (rc != S_OK)
	{
		cout << "Failed to Copy model from father to GW" << endl;
	}

	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemAODlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	//CUSCAAUtilService::SetSessionEffectity(spNewAOSystemInstance);
	//Material Flow 
	if (pAOPreviousOcc == NULL)
		return rc;

	//DELIPPRSystemProductFlowAuth *productFlowAuth = NULL;
	//spNewAOSystemRef->QueryInterface(IID_DELIPPRSystemProductFlowAuth,(void**)&productFlowAuth);
	//CATListPtrCATBaseUnknown oListConnections;
	//rc = productFlowAuth->CreateProductFlow(pAOPreviousOcc, spNewAOSystemOccurrence, oListConnections);

	CATListPtrCATBaseUnknown olistUnknown;
	rc = hPPRSystemAuth->CreateMaterialFlow(pAOPreviousOcc, spNewAOSystemOccurrence);
	return rc;
}


CATBoolean CMCreateAOSystemCmd::OKAction(void *data)
{
	cout << "AOConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckAOSelect())
	{
		return FALSE;
	}

	//input code null or code is repeat
	if (!CheckInputCode(0)) {
		return FALSE;
	}

	//CreateDELAOSystem();

	return TRUE;
}

CATBoolean CMCreateAOSystemCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckAOSelect())
	{
		return FALSE;
	}

	if (!CheckInputCode(1)) {
		return FALSE;
	}

	//CreateDELAOSystem();

	return FALSE;
}

CATBoolean CMCreateAOSystemCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMCreateAOSystemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMCreateAOSystemCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_MBOMAssembly)
	{
		pMIDComponentOcc = _pSelectedOccurrence;
		pMIDComponentRef = _pSelectedReference;
		CATDlgEditor *pMIDEditor = _Panel->GetEditor(ID_SelectMIDCompEditor);
		pMIDEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pMIDComponentRef, "V_Name"));

		CATIPLMNavOccurrence * tempNavOcc = NULL;
		_pSelectedOccurrence->GetFather(tempNavOcc);
		if (tempNavOcc != NULL)
		{
			tempNavOcc->GetRelatedReference(pMIDFatherCompRef);
		}

		_pSelectedOccurrence->GetRelatedInstance(pMIDCompInstance);
	}
	else if (sSelectObjectType == TYPE_ZW_Workplan)
	{
		pAOFatherOcc = _pSelectedOccurrence;
		pAOFatherRef = _pSelectedReference;
		CATDlgEditor *pAOFaEditor = _Panel->GetEditor(ID_SelectAOFatherEditor);
		pAOFaEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pAOFatherRef, "PLM_ExternalID"));

		CATIPLMNavOccurrence *pGWNavOcc = NULL;
		pAOFatherOcc->GetFather(pGWNavOcc);
		pGWNavOcc->GetRelatedReference(pGWRef);
	}
	else if (sSelectObjectType == TYPE_AOSystem)  //前序AO
	{
		pAOPreviousOcc = _pSelectedOccurrence;
		pAOPreviousRef = _pSelectedReference;
		CATDlgEditor *pAOPreviousEditor = _Panel->GetEditor(ID_SelectAOPreviousEditor);
		pAOPreviousEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pAOPreviousRef, "PLM_ExternalID"));

		//CATUnicodeString sExternalId = CUSCAAUtilService::GetObjectAttrValue(pAOPreviousRef, "PLM_ExternalID");
		//CATUnicodeString sSequenceCode = "0010";
		//if (sExternalId.GetLengthInChar() > 6) {
		//	sSequenceCode = sExternalId.SubString(sExternalId.GetLengthInChar() - 6, 4);
		//	int sequenceNum = 0;
		//	sSequenceCode.ConvertToNum(&sequenceNum);
		//	sequenceNum += 10;
		//	sSequenceCode.BuildFromNum(sequenceNum, "%04d");
		//}

		//CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputAONameEditor);
		//pInputEditor->SetText(sSequenceCode);
	}
}






