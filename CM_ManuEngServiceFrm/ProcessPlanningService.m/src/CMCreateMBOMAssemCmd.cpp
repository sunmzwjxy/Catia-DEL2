//===================================================================
// COPYRIGHT  2020/09/27
//===================================================================
// CMCreateMBOMAssembly.cpp
// Header definition of class CMCreateMBOMAssembly
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/27 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateMBOMAssemCmd.h"
#include "CATCreateExternalObject.h"
CATCreateClass(CMCreateMBOMAssemCmd);

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATDlgEditor.h"
#include "CATDlgCombo.h"
#include "CATApplicationFrame.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"
//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : constructor
//-----------------------------------------------------------------------------
CMCreateMBOMAssemCmd::CMCreateMBOMAssemCmd():
	CATStateCommand("CMCreateMBOMAssemCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL),
	_OKListAgent(NULL)
{
//
//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMMBOMAssemDlg(pWnd, "MBOM Assembly");
	_Panel->Build();
	_Panel->SetFather(this);

	//CATDlgWindow *pListWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();

	_pRadioBtnCopy = NULL;
	_pRadioBtnInput = NULL;

	pCADProductRef = NULL;
	pCADProductOcc = NULL;
	pCADProductInstance = NULL;
	pCADFatherProductRef = NULL;
	pMARootOcc = NULL;
	pMARootRef = NULL;
	pMAFatherRef = NULL;
	pMAFatherOcc = NULL;

	pManuAssemRef = NULL;
	pManuAssemOcc = NULL;
//
}

//-----------------------------------------------------------------------------
// CMCreateMBOMAssembly : destructor
//-----------------------------------------------------------------------------

CMCreateMBOMAssemCmd::~CMCreateMBOMAssemCmd()
{
//
// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_pRadioBtnCopy = NULL;
	_pRadioBtnInput = NULL;

	pCADProductRef = NULL;
	pCADProductOcc = NULL;
	pCADProductInstance = NULL;
	pCADFatherProductRef = NULL;
	pMARootOcc = NULL;
	pMARootRef = NULL;
	pMAFatherRef = NULL;
	pMAFatherOcc = NULL;
	pManuAssemRef = NULL;
	pManuAssemOcc = NULL;
//
}


void CMCreateMBOMAssemCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	

	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_OKListAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateMBOMAssemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateMBOMAssemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateMBOMAssemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateMBOMAssemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateMBOMAssemCmd::ElementSelection, NULL, NULL, (void*)1));

	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_PartCodeEditor),"CMMBOMAssemDlg","PartCode.Range",",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ManufactureLineEditor),"CMMBOMAssemDlg","ManufactureLine.Range",",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ProcessUnitEditor),"CMMBOMAssemDlg", "ProcessUnit.Range",",");

	//_pListCodePushButton = _Panel->GetPushButton(ID_NumberCodePushButton);
	//AddAnalyseNotificationCB(_pListCodePushButton, _pListCodePushButton->GetPushBActivateNotification(),
	//	(CATCommandMethod)&CMCreateMBOMAssemCmd::DisplayComponentNumber, NULL);

	_pRadioBtnCopy = _Panel->GetRadioButton(ID_DesignCodeCopy);
	AddAnalyseNotificationCB(_pRadioBtnCopy, _pRadioBtnCopy->GetRadBModifyNotification(),
		(CATCommandMethod)&CMCreateMBOMAssemCmd::ChangeRadioNotifyCopy, NULL);

	_pRadioBtnCopy->SetState(CATDlgCheck);

	_pRadioBtnInput = _Panel->GetRadioButton(ID_DesignCodeInput);
	AddAnalyseNotificationCB(_pRadioBtnInput, _pRadioBtnInput->GetRadBModifyNotification(),
		(CATCommandMethod)&CMCreateMBOMAssemCmd::ChangeRadioNotifyInput, NULL);


	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}



//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateMBOMAssemCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------
	
	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::ChangeRadioNotifyCopy(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------
	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	pDesignCodeEditor->SetReadOnly(TRUE);
	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::ChangeRadioNotifyInput(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------
	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	pDesignCodeEditor->SetReadOnly(FALSE);
	CATDlgEditor *pManuAssemEditor = _Panel->GetEditor(ID_SelectMAFatherEditor);
	pManuAssemEditor->SetText("");
	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMCreateMBOMAssemCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_Product) //
	{
		pCADProductOcc = _pSelectedOccurrence;
		pCADProductRef = _pSelectedReference;
		CATDlgEditor *pCADProductEditor = _Panel->GetEditor(ID_SelectCADProductEditor);
		pCADProductEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pCADProductRef, "V_Name"));

		CATIPLMNavOccurrence * tempNavOcc = NULL;
		_pSelectedOccurrence->GetFather(tempNavOcc);
		if (tempNavOcc != NULL)
		{
			tempNavOcc->GetRelatedReference(pCADFatherProductRef);
		}

		_pSelectedOccurrence->GetRelatedInstance(pCADProductInstance);

		CATDlgEditor *pDesignCode = _Panel->GetEditor(ID_DesignCodeEditor);
		pDesignCode->SetText(CUSCAAUtilService::GetObjectAttrValue(pCADProductRef, "PLM_ExternalID"));
	}
	else if (sSelectObjectType == TYPE_MBOMAssembly)
	{
		pManuAssemOcc = _pSelectedOccurrence;
		pManuAssemRef = _pSelectedReference;
		CATDlgEditor *pManuAssemEditor = _Panel->GetEditor(ID_SelectMAFatherEditor);
		pManuAssemEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pManuAssemRef, "V_Name"));
	}

}

CATBoolean CMCreateMBOMAssemCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	CrateMBOMAssembly();

	return FALSE;
}

#include "CATDlgSelectorList.h"
void CMCreateMBOMAssemCmd::DisplayComponentNumber()
{
	_Panel->SetVisibility(CATDlgHide);

	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_ListPanel = new CMMBOMAssemListDlg(pWnd, "MBOM List Assembly");
	_ListPanel->Build();
	_ListPanel->SetFather(_Panel);

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_ListPanel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_ListPanel->SetRectDimensionsEx(rect, iAlreadyScaled);
	_ListPanel->SetVisibility(CATDlgShow);

	CATDlgSelectorList * pSelectorList = _ListPanel->GetSelectorList(ID_ComponentNumberList);
	CATUnicodeString listvalue[3];
	listvalue[0] = "wtwtwregt";
	listvalue[1] = "wtwtwregt";
	listvalue[2] = "wtwtwregt";
	pSelectorList->SetLine(listvalue,3);
	//_OKListAgent = new CATDialogAgent("OK List Agent");
	//_OKListAgent->AcceptOnNotify(_ListPanel, _ListPanel->GetDiaOKNotification());
	//_CancleAgent->AcceptOnNotify(_ListPanel, _ListPanel->GetDiaCANCELNotification());

	//CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	//pSelectionState->AddDialogAgent(_OKListAgent);
	//pSelectionState->AddDialogAgent(_CancleAgent);
	//AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKListAgent), Condition((ConditionMethod)&CMCreateMBOMAssemCmd::OKListAction)), NULL);

	//AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateMBOMAssemCmd::CancelAction));

	//AddAnalyseNotificationCB(_ListPanel, _ListPanel->GetDiaOKNotification(),
	//	(CATCommandMethod)&CMCreateMBOMAssemCmd::OKAction,NULL);

	//AddAnalyseNotificationCB(_ListPanel, _ListPanel->GetDiaCANCELNotification(),
	//	(CATCommandMethod)&CMCreateMBOMAssemCmd::CancelAction, NULL);
}

CATBoolean  CMCreateMBOMAssemCmd::OKListAction(void * data)
{
	if (_OKListAgent)
	{
		_OKListAgent->InitializeAcquisition();
	}

	CrateMBOMAssembly();

	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	//DisplayComponentNumber();
	CrateMBOMAssembly();

	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	//if (_ListPanel != NULL)  _ListPanel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMCreateMBOMAssemCmd::CheckSelectObject()
{
	if (pManuAssemRef == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.MAFatherNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	//Check select MBOM is not MA
	DELIPPRProcessNav_var hPPRProcessNav = NULL_var;
	HRESULT rc = ::GetPPRProcessNav(hPPRProcessNav);
	if (hPPRProcessNav != NULL_var)
	{
		CATIPLMNavReference * scopeProductRef = NULL;
		rc = hPPRProcessNav->GetProductOfTheScope(pManuAssemRef, (void**)&scopeProductRef);
		if (scopeProductRef != NULL)
		{
			CATUnicodeString sProductType = CUSCAAUtilService::GetObjectAttrValue(scopeProductRef, "CUS_VPMRefNodeType");
			if (sProductType == "MA") {
				CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
				CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.MACANNOTSelect");
				CUSCAAUtilService::ErrorMessage(Title, msg);
				return FALSE;
			}
		}
	}

	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	CATUnicodeString sDesignCode = pDesignCodeEditor->GetText();
	if (sDesignCode == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
		CATUnicodeString msg = "";
		if (CATDlgCheck == _pRadioBtnCopy->GetState())
		{
			msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.productNull");
		}
		else {
			msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.designCodeNull");
		}
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	pMARootOcc = CUSCAAUtilService::GetRootOcc(pManuAssemOcc);
	if (pMARootOcc != NULL)
	{
		pMARootOcc->GetRelatedReference(pMARootRef);
	}

	pManuAssemOcc->GetFather(pMAFatherOcc);
	if (pMAFatherOcc != NULL)
	{
		pMAFatherOcc->GetRelatedReference(pMAFatherRef);
	}

	return TRUE;
	
}

HRESULT CMCreateMBOMAssemCmd::CrateMBOMAssembly()
{
	HRESULT rc = E_FAIL;

	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;
	listRootRef.Append(pMAFatherRef);
	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CATDlgEditor *pDesignCodeEditor = _Panel->GetEditor(ID_DesignCodeEditor);
	CATUnicodeString sProductExternalId = pDesignCodeEditor->GetText();

	//CATUnicodeString sProductExternalId = CUSCAAUtilService::GetObjectAttrValue(pCADProductRef, "PLM_ExternalID");
	
	PPRUtity sPPRUtity;
	CATListPtrCATIPLMNavReference opilistIDComp;
	HRESULT hr = CUSCAAUtilService::GetObjReference(sProductExternalId+"-4*", "", opilistIDComp, TYPE_MBOMAssembly);
	int n_Size = opilistIDComp.Size();

	//CATIPLMNavOccurrence * spNewMACompOcc = NULL;
	//if (n_Size >= 1)
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.existing401MA");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return rc;
	//}
	//if (n_Size > 1) {
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.MAFatherNull");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return rc;
	//}
	//else if (n_Size == 1) {
	//	rc = sPPRUtity.InsertExistProcess(pMAFatherOcc, opilistIDComp[1], pMARootRef, spNewMACompOcc);
	//	if (FAILED(rc))
	//	{
	//		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
	//		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.insertExistingError");
	//		CUSCAAUtilService::ErrorMessage(Title, msg);
	//	}
	//	return rc;
	//}

	//sPPRUtity.CreateSubMAAssembly(TYPE_MBOMAssembly, pMAFatherOcc, pMARootRef, spNewMACompOcc);
	//if (spNewMACompOcc == NULL)
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.MACreateFailed");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return rc;
	//}

	//CATIPLMNavReference *spNewMACompRef = NULL;
	//spNewMACompOcc->GetRelatedReference(spNewMACompRef);

	//CATUnicodeString sNewMACompExternalId = sProductExternalId + "-401"; 
	CATUnicodeString sNewMACompExternalId = sPPRUtity.NextFormatCode(TYPE_MBOMAssembly, sProductExternalId, "-4");

	//CUSCAAUtilService::SetObjectAttrString(spNewMACompRef, "PLM_ExternalID", sNewMACompExternalId);
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "PLM_ExternalID", sNewMACompExternalId);

	//CUSCAAUtilService::SetObjectAttrString(spNewMACompRef, "name", sNewMACompExternalId);
	//CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "name", sNewMACompExternalId);
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_ProcessPartCode", sNewMACompExternalId);


	//CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "revision", "B.1");

	CATDlgEditor *pMANameEditor = _Panel->GetEditor(ID_InputMBOMAssemNameEditor);
	CATUnicodeString sAssemName = pMANameEditor->GetText();
	if (sAssemName == "")
		sAssemName = sNewMACompExternalId;
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "V_Name", sAssemName);
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_ProcessPartName", sAssemName);

	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_PartCode", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_PartCodeEditor)));
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_ManufactureLine", 
		CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ManufactureLineEditor), "CMMBOMAssemDlg", "ManufactureLineKey.Range", ","));
	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_ProcessUnit", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ProcessUnitEditor)));

	CUSCAAUtilService::SetObjectAttrString(pManuAssemRef, "CUS_MBOMType", "401Component");

	//CATIPLMNavInstance *spNewMACompInstan = NULL;
	//spNewMACompOcc->GetRelatedInstance(spNewMACompInstan);
	//CUSCAAUtilService::SetObjectAttrString(spNewMACompInstan, "PLM_ExternalID", sNewMACompExternalId+".1");


	//DELIPPRProcessAuth_var hPPRProcessAuth;
	//rc = ::GetPPRProcessAuth(hPPRProcessAuth);
	//if (hPPRProcessAuth == NULL_var)
	//	return rc;
	//
	//hPPRProcessAuth->CreateScope(spNewMACompRef, pCADProductRef);

	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMakePartDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CATUnicodeString iServicePath = "/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/modifyObjectRevision";

	//CATUnicodeString sServerUrl = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"ServerUrl");

	CATUnicodeString sServerUrl = CUSCAAUtilService::GetServerURL();
	if (sServerUrl.IsNull())
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.failedGetURL");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}
	CATUnicodeString iWebSite = sServerUrl + iServicePath;

	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("", oUserId, oOrganisationId, oProjectId, oRoleId);

	CATUnicodeString SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;

	CATUnicodeString sManuAssemblyName = CUSCAAUtilService::GetObjectAttrValue(pManuAssemRef, "PLM_ExternalID");
	CATUnicodeString sManuAssemblyRevision = CUSCAAUtilService::GetObjectAttrValue(pManuAssemRef, "revision");

	CATUnicodeString iData = TYPE_MBOMAssembly + "@@" + sManuAssemblyName + "@@" + sManuAssemblyRevision + "@@" + "001.1";

	CATUnicodeString returnString = CUSCAAUtilService::WebService(SecurityContext, iWebSite + "?object=" + iData);
	if (returnString.Compare("OK") == 0) {
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMAssemDlg", (CATString)"msg.failedModifyRevision");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CUSCAAUtilService::CAACallOOTBCmd("PLMGlobalRefresh");

	return rc;
}






