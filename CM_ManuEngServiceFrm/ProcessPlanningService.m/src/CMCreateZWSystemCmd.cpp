//===================================================================
// COPYRIGHT  2020/09/16
//===================================================================
// CMCreateZWSystemCmd.cpp
// Header definition of class CMCreateZWSystemCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/16 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateZWSystemCmd.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATDlgEditor.h"
#include "CATApplicationFrame.h"

#include "CATCreateExternalObject.h"
CATCreateClass(CMCreateZWSystemCmd);

#include "CUSCAAUtilService.h"
//#include "PPRUtity.h"

//-----------------------------------------------------------------------------
// CMCreateZWSystemCmd : constructor
//-----------------------------------------------------------------------------
CMCreateZWSystemCmd::CMCreateZWSystemCmd() :
	CATStateCommand("CMCreateZWSystemCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
	//
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMSystemZWDlg(pWnd, "ZW System");
	_Panel->Build();
	_Panel->SetFather(this);

	pMIDComponentRef = NULL;
	pMIDCompInstance = NULL;
	pMIDComponentOcc = NULL;
	pMIDFatherCompRef = NULL;
	pZWFatherRef = NULL;
	pZWFatherOcc = NULL;
	pZWPreviousRef = NULL;
	pZWPreviousOcc = NULL;
	//
}

//-----------------------------------------------------------------------------
// CMCreateZWSystemCmd : destructor
//-----------------------------------------------------------------------------

CMCreateZWSystemCmd::~CMCreateZWSystemCmd()
{
	//
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_RELEASE_PTR_(pMIDComponentRef);
	_RELEASE_PTR_(pMIDCompInstance);
	_RELEASE_PTR_(pMIDComponentOcc);
	_RELEASE_PTR_(pMIDFatherCompRef);
	_RELEASE_PTR_(pZWFatherRef);
	_RELEASE_PTR_(pZWFatherOcc);
	_RELEASE_PTR_(pZWPreviousRef);
	_RELEASE_PTR_(pZWPreviousOcc);
	//
}

void CMCreateZWSystemCmd::BuildGraph()
{
	//check access
	CATUnicodeString iServicePath = "/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/getRoleAssign";
	//CATUnicodeString sServerUrl = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"ServerUrl");

	CATUnicodeString sServerUrl = CUSCAAUtilService::GetServerURL();
	if (sServerUrl.IsNull())
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.failedGetURL");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		RequestDelayedDestruction();
		return;
	}
	CATUnicodeString iWebSite = sServerUrl + iServicePath;

	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("", oUserId, oOrganisationId, oProjectId, oRoleId);

	CATUnicodeString SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;
	CATUnicodeString sRoleAssign = CUSCAAUtilService::WebService(SecurityContext, iWebSite + "?user=" + (CATUnicodeString)oUserId);
	if (!((sRoleAssign.SearchSubString("CUS_Charge Engineer") >= 0) || (sRoleAssign.SearchSubString("CUS_Chief Engineer") >= 0)))
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.accessFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		RequestDelayedDestruction();
		return;
	}
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateZWSystemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateZWSystemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateZWSystemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateZWSystemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateZWSystemCmd::ElementSelection, NULL, NULL, (void*)1));

	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_SelectPlaneCode), "CMSystemZWDlg", "PlaneCode.Range", "|");

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateZWSystemCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

CATBoolean CMCreateZWSystemCmd::Init(void *data)
{
	_Panel->SetVisibility(CATDlgShow);

	return TRUE;
}

CATBoolean CMCreateZWSystemCmd::CheckZWSelect()
{
	//Check ZW facther system if select
	if (pZWFatherOcc)
		return TRUE;

	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.nodeFatherNull");
	CUSCAAUtilService::ErrorMessage(Title, msg);
	return FALSE;
}

CATBoolean CMCreateZWSystemCmd::CheckInputCode(int code)
{
	CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputZWCodeEditor);
	CATUnicodeString sInputZWCode = pInputEditor->GetText();

	if (sInputZWCode == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.inputCodeNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else {
		if (!spPPRUtity.CheckNumberChar(sInputZWCode, 2)) {
			CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
			CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.inputCodeTwoError");
			CUSCAAUtilService::ErrorMessage(Title, msg);
			return FALSE;
		}
	}

	CATDlgEditor *pInputNameEditor = _Panel->GetEditor(ID_InputZWNameEditor);
	sInputZWName = pInputNameEditor->GetText();
	if (sInputZWName == "") {
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.inputZWTitleNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	CATDlgEditor *pInputEffEditor = _Panel->GetEditor(ID_InputEffEditor);
	sInputEffecivity = pInputEffEditor->GetText();
	if (sInputEffecivity != "" && !CUSCAAUtilService::CheckEffectivity(sInputEffecivity)) {

		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.inputEffError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	//if ((code == 0) && (sApplyZWCode == sInputZWCode))
	//	return TRUE;


	//if (sInputZWExternalID == sInputZWCode)
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.uniqueIDError");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return TRUE;
	//}


	CATUnicodeString sPlaneCode = CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_SelectPlaneCode));
	sInputZWCode = sGWCodeId + sPlaneCode +sInputZWCode;
	CATListPtrCATIPLMNavReference opilistIDComp;
	HRESULT hr = CUSCAAUtilService::GetObjReference(sInputZWCode, "", opilistIDComp, "CUS_ZWSystemRef");
	int n_Size = opilistIDComp.Size();
	if (n_Size >= 1)
	{
		cout << "exist more than one ZW" << endl;
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.uniqueIDError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	//else if(n_Size == 1){     //存在则插入现有项
	//	PPRUtity spPPRUtity;
	//	cout << "exist one ZW" << endl;
	//	CATIPLMNavInstance * opInstance = NULL;
	//	spPPRUtity.InsertExistSystem(pZWFatherRef, opilistIDComp[1], (CATBaseUnknown *&)opInstance);
	//}
	else {                  //不存在则新建
		cout << "no exist ZW code" << endl;
		sInputZWExternalID = sInputZWCode;
		CreateDELZWSystem();
		if (code = 1)
			sApplyZWCode = sInputZWExternalID;
	}

	return TRUE;
}

HRESULT CMCreateZWSystemCmd::CreateDELZWSystem()
{
	
	CATIPLMNavInstance * spNewZWSystemInstance;
	HRESULT rc = spPPRUtity.CreateSubSystemOrOperation(TYPE_ZW_Workplan,
		pZWFatherRef, spNewZWSystemInstance);

	if (spNewZWSystemInstance == NULL) {
		cout << "Failed to create operation under the system" << endl;
		return S_FALSE;
	}

	CATIPLMNavReference * spNewZWSystemRef = NULL;
	rc = spNewZWSystemInstance->GetReferenceInstanceOf(spNewZWSystemRef);
	if (spNewZWSystemRef == NULL)
	{
		cout << "Failed to Get new ZW system Reference" << endl;
		return S_FALSE;
	}
	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemRef, "PLM_ExternalID", sInputZWExternalID);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemRef, "CUS_Code", sInputZWExternalID);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemRef, "V_Name", sInputZWName);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemRef, "CUS_Title", sInputZWName);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemRef, "CUS_Eff", sInputEffecivity);

	//CATUnicodeString sInstanceName = GetObjectAttrValue(spNewZWSystemInstance, "PLM_ExternalID");
	rc = CUSCAAUtilService::SetObjectAttrString(spNewZWSystemInstance, "PLM_ExternalID", sInputZWExternalID + ".1");


	// exit if MID not select

	CATIPLMNavOccurrence * spNewZWSystemOccurrence;
	rc = spPPRUtity.GetOccFromSystemFather(pZWFatherOcc, spNewZWSystemInstance, spNewZWSystemOccurrence);
	if (spNewZWSystemOccurrence == NULL)
	{
		cout << "Failed to Get Occurrence from new create ZW system" << endl;
		return S_FALSE;
	}

	DELIPPRSystemAuth_var hPPRSystemAuth;
	rc = ::GetPPRSystemAuth(hPPRSystemAuth);
	//Create scope
	if (pMIDComponentOcc != NULL)
		rc = hPPRSystemAuth->CreateScope(spNewZWSystemOccurrence, pMIDComponentOcc);
	
	rc = CUSCAAUtilService::CopyDictionariesModel(pZWFatherRef, (CATBaseUnknown*&)spNewZWSystemRef);
	if (rc != S_OK)
	{
		cout << "Failed to Copy model from father to GW" << endl;
	}

	//CUSCAAUtilService::SetSessionEffectity(spNewZWSystemInstance);

	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;
	listRootRef.Append(pZWFatherRef);

	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemZWDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	//Material Flow 
	if(pZWPreviousOcc == NULL)
		return rc;

	CATListPtrCATBaseUnknown olistUnknown;
	rc = hPPRSystemAuth->CreateMaterialFlow(pZWPreviousOcc, spNewZWSystemOccurrence);
	return rc;
}


CATBoolean CMCreateZWSystemCmd::OKAction(void *data)
{
	cout << "ZWConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckZWSelect())
	{
		return FALSE;
	}

	//input code null or code is repeat
	if (!CheckInputCode(0))
		return FALSE;

	//CreateDELZWSystem();

	return TRUE;
}

CATBoolean CMCreateZWSystemCmd::ApplyAction(void *data)
{
	cout << "ZWConnectCmd::ApplyAction() - INFO: Entering ApplyAction()... " << endl;
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckZWSelect())
	{
		return FALSE;
	}

	if (CheckInputCode(1))
		return FALSE;

	//CreateDELZWSystem();

	return FALSE;
}

CATBoolean CMCreateZWSystemCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMCreateZWSystemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMCreateZWSystemCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_MBOMAssembly)
	{
		pMIDComponentOcc = _pSelectedOccurrence;
		pMIDComponentRef = _pSelectedReference;
		CATDlgEditor *pMIDEditor = _Panel->GetEditor(ID_SelectMIDCompEditor);
		pMIDEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pMIDComponentRef, "V_Name"));

		CATIPLMNavOccurrence * tempNavOcc = NULL;
		_pSelectedOccurrence->GetFather(tempNavOcc);
		if (tempNavOcc != NULL)
		{
			tempNavOcc->GetRelatedReference(pMIDFatherCompRef);
		}

		_pSelectedOccurrence->GetRelatedInstance(pMIDCompInstance);
	}
	else if (sSelectObjectType == TYPE_GW_Workplan)   //工位
	{
		pZWFatherOcc = _pSelectedOccurrence;
		pZWFatherRef = _pSelectedReference;
		CATDlgEditor *pZWFaEditor = _Panel->GetEditor(ID_SelectZWFatherEditor);
		pZWFaEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "PLM_ExternalID"));
		sGWCodeId = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "PLM_ExternalID");
	}
	else if (sSelectObjectType == TYPE_ZW_Workplan)  //前序站位
	{
		pZWPreviousOcc = _pSelectedOccurrence;
		pZWPreviousRef = _pSelectedReference;
		CATDlgEditor *pZWPreviousEditor = _Panel->GetEditor(ID_SelectZWPreviousEditor);
		pZWPreviousEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pZWPreviousRef, "PLM_ExternalID"));
	}
}



