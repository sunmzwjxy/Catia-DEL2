//===================================================================
// COPYRIGHT  2020/10/20
//===================================================================
// CMChangeMakePartCmd.cpp
// Header definition of class CMChangeMakePartCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/10/20 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMChangeMakePartCmd.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

#include "CATCreateExternalObject.h"
CATCreateClass(CMChangeMakePartCmd);
//-----------------------------------------------------------------------------
// CMChangeMakePartCmd : constructor
//-----------------------------------------------------------------------------
CMChangeMakePartCmd::CMChangeMakePartCmd() :CATStateCommand()
{
	//
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMChangeMakePartDlg(pWnd, "MBOM ManufacturingPart");
	_Panel->Build();
	_Panel->SetFather(this);

	pManufacturingPartRef = NULL;
	pManufacturingPartOcc = NULL;
	pMARootRef = NULL;
	pMARootOcc = NULL;
	pProductRef = NULL;
	pProductOcc = NULL;
	pProductInstance = NULL;
	pPartFatherRef = NULL;
	pPartFatherOcc = NULL;
	//
}

//-----------------------------------------------------------------------------
// CMChangeMakePartCmd : destructor
//-----------------------------------------------------------------------------

CMChangeMakePartCmd::~CMChangeMakePartCmd()
{
	//
	// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	pManufacturingPartRef = NULL;
	pManufacturingPartOcc = NULL;
	pMARootRef = NULL;
	pMARootOcc = NULL;
	pProductRef = NULL;
	pProductOcc = NULL;
	pProductInstance = NULL;
	pPartFatherRef = NULL;
	pPartFatherOcc = NULL;
	//
}

void CMChangeMakePartCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Cancle button agent
	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());        //GetWindCloseNotification

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());

	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMChangeMakePartCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMChangeMakePartCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMChangeMakePartCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMChangeMakePartCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMChangeMakePartCmd::ElementSelection, NULL, NULL, (void*)1));

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);
}

CATBoolean CMChangeMakePartCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMChangeMakePartCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_ManufacturingPart) //
	{
		pManufacturingPartOcc = _pSelectedOccurrence;
		pManufacturingPartRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_SelectManufacturingPartEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pManufacturingPartRef,"V_Name"));
	}
	if (sSelectObjectType == TYPE_MBOMAssembly) //
	{
		pPartFatherOcc = _pSelectedOccurrence;
		pPartFatherRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_ManufacturingAssemblyEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pPartFatherRef, "V_Name"));
	}
	if (sSelectObjectType == TYPE_Product) //
	{
		pProductOcc = _pSelectedOccurrence;
		pProductRef = _pSelectedReference;
		CATDlgEditor *pEditor = _Panel->GetEditor(ID_DesignPartEditor);
		pEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pProductRef, "V_Name"));
	}
}

CATBoolean CMChangeMakePartCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	ChangeManufacturingPart();

	return FALSE;
}


CATBoolean CMChangeMakePartCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckSelectObject())
	{
		return FALSE;
	}

	ChangeManufacturingPart();

	return TRUE;
}

CATBoolean CMChangeMakePartCmd::CancelAction(void *data)
{
	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMChangeMakePartCmd::CheckSelectObject()
{
	if (pManufacturingPartRef == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.ProvideNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	pMARootOcc = CUSCAAUtilService::GetRootOcc(pManufacturingPartOcc);
	if (pMARootOcc != NULL)
	{
		pMARootOcc->GetRelatedReference(pMARootRef);
	}

	if (pPartFatherRef == NULL)
	{
		pManufacturingPartOcc->GetFather(pPartFatherOcc);
		if (pPartFatherOcc != NULL)
		{
			pPartFatherOcc->GetRelatedReference(pPartFatherRef);
		}
	}

	if (pProductRef)
	{
		return TRUE;
	}

	DELIPPRProcessNav_var hPPRProcessNav;
	HRESULT rc = ::GetPPRProcessNav(hPPRProcessNav);

	CATListPtrCATIPLMNavOccurrence listProductOcc;
	CATIPLMNavReference * pProductRootRef;
	CUSCAAUtilService::RetrieveRootComp(pProductRootRef);
	if (pProductRootRef == NULL)
		return FALSE;
	rc = hPPRProcessNav->GetListOfAssignedProducts(pManufacturingPartOcc, pProductRootRef, listProductOcc);

	int n_product = listProductOcc.Size();
	if (n_product <= 0)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.implementLinkNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else if (n_product > 1)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.implementLinkMulti");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	pProductOcc = listProductOcc[1];
	if (pProductOcc != NULL)
	{
		pProductOcc->GetRelatedReference(pProductRef);
		pProductOcc->GetRelatedInstance(pProductInstance);
	}
	return TRUE;
}

HRESULT CMChangeMakePartCmd::ChangeManufacturingPart()
{
	HRESULT rc = E_FAIL;

	CATIPLMNavOccurrence * spNewManuPartOcc = NULL;
	PPRUtity sPPRUtity;
	sPPRUtity.CreateSubMAAssembly(TYPE_ManufacturingPart, pPartFatherOcc, pMARootRef, spNewManuPartOcc);
	if (spNewManuPartOcc == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMChangeMakePartDlg", (CATString)"msg.CreateFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	CATIPLMNavReference *spNewManuPartRef = NULL;
	spNewManuPartOcc->GetRelatedReference(spNewManuPartRef);

	CUSCAAUtilService::CopyObjectAttribute(pManufacturingPartRef, spNewManuPartRef);

	CATUnicodeString sProductExternalId = CUSCAAUtilService::GetObjectAttrValue(pProductRef, "PLM_ExternalID");

	CATUnicodeString sNewMACompExternalId = sPPRUtity.NextFormatCode(TYPE_ManufacturingPart, sProductExternalId, "-9");
	CUSCAAUtilService::SetObjectAttrString(spNewManuPartRef, "PLM_ExternalID", sNewMACompExternalId);
	
	CUSCAAUtilService::SetObjectAttrString(spNewManuPartRef, "V_Name", sNewMACompExternalId);

	DELIPPRProcessAuth_var hPPRProcessAuth;
	rc = ::GetPPRProcessAuth(hPPRProcessAuth);
	if (hPPRProcessAuth == NULL_var)
		return rc;

	rc = hPPRProcessAuth->AssignProduct(spNewManuPartOcc, pProductOcc);

	DELIPPRProcessNav_var hPPRProcessNav;
	rc = ::GetPPRProcessNav(hPPRProcessNav);
	if (hPPRProcessNav == NULL_var)
		return rc;

	CATIPLMNavReference * scopeProductRef;
	rc = hPPRProcessNav->GetProductOfTheScope(pManufacturingPartRef, (void**)&scopeProductRef);
	if (scopeProductRef == NULL)
		return rc;

	rc = hPPRProcessAuth->CreateScope(spNewManuPartRef, scopeProductRef);


	//rc = hPPRProcessAuth->RemovePredecessor(pPartFatherOcc, pManufacturingPartOcc);

	//CATIPLMNavInstance *piNewManuPartInstance;
	//spNewManuPartOcc->GetRelatedInstance(piNewManuPartInstance);

	return rc;
}






