//===================================================================
// COPYRIGHT  2020/09/16
//===================================================================
// CMCreateGWSystemCmd.cpp
// Header definition of class CMCreateGWSystemCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/16 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateGWSystemCmd.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string>
using namespace std;

#include "CATDlgEditor.h"
#include "CATApplicationFrame.h"

#include "CATCreateExternalObject.h"
CATCreateClass(CMCreateGWSystemCmd);

#include "CUSCAAUtilService.h"
#include "PPRUtity.h"

//-----------------------------------------------------------------------------
// CMCreateGWSystemCmd : constructor
//-----------------------------------------------------------------------------
CMCreateGWSystemCmd::CMCreateGWSystemCmd():
	CATStateCommand("CMCreateGWSystemCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_ApplyAgent(NULL),
	_CloseAgent(NULL)
{
//
//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMSystemGWDlg(pWnd, "GW System");
	_Panel->Build();
	_Panel->SetFather(this);

	pMIDComponentRef = NULL;
	pMIDCompInstance = NULL;
	pMIDComponentOcc = NULL;
	pMIDFatherCompRef = NULL;
	pGWFatherRef = NULL;
	pGWFatherOcc = NULL;

//
}

//-----------------------------------------------------------------------------
// CMCreateGWSystemCmd : destructor
//-----------------------------------------------------------------------------

CMCreateGWSystemCmd::~CMCreateGWSystemCmd()
{
//
// TODO: Place code here.
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_RELEASE_PTR_(pMIDComponentRef);
	_RELEASE_PTR_(pMIDCompInstance);
	_RELEASE_PTR_(pMIDComponentOcc);
	_RELEASE_PTR_(pMIDFatherCompRef);
	_RELEASE_PTR_(pGWFatherRef);
	_RELEASE_PTR_(pGWFatherOcc);
//
}

void CMCreateGWSystemCmd::BuildGraph()
{
	//check access
	CATUnicodeString iServicePath = "/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/getRoleAssign";
	//CATUnicodeString sServerUrl = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"ServerUrl");
	CATUnicodeString sServerUrl = CUSCAAUtilService::GetServerURL();
	if (sServerUrl.IsNull())
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.failedGetURL");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		RequestDelayedDestruction();
		return;
	}
	CATUnicodeString iWebSite = sServerUrl + iServicePath;

	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("", oUserId, oOrganisationId, oProjectId, oRoleId);

	CATUnicodeString SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;
	CATUnicodeString sRoleAssign = CUSCAAUtilService::WebService(SecurityContext, iWebSite + "?user=" + (CATUnicodeString)oUserId);
	if (sRoleAssign.SearchSubString("CUS_Chief Engineer") < 0)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.accessFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		RequestDelayedDestruction();
		return;
	}
	// TODO: Define the StateChart
	// ---------------------------
		// Define the Ok button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent"); 
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	
	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());

	//_BtnSelectMIDCompAgent = new CATDialogAgent("Select MID Component");
	//_BtnSelectMIDCompAgent->AcceptOnNotify(_Panel->GetPushButton(ID_SelectMIDCompButton),
	//	_Panel->GetPushButton(ID_SelectMIDCompButton)->GetPushBActivateNotification());

	//_SelectMIDCompAgent = new CATPathElementAgent("Select MID Component");

	//_BtnSelectGWFatherAgent = new CATDialogAgent("Select GW Father");
	//_BtnSelectGWFatherAgent->AcceptOnNotify(_Panel->GetPushButton(ID_SelectGWFatherButton),
	//	_Panel->GetPushButton(ID_SelectGWFatherButton)->GetPushBActivateNotification());

	//_SelectGWFatherAgent = new CATPathElementAgent("Select GW Father");

	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);
	
	// Transition from Input state to NULL, when click on OK button
	//AddTransition(p_InputState, NULL, IsOutputSetCondition(_OKAgent), Action((ActionMethod) &CMConnectCmd::OKAction));
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateGWSystemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateGWSystemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateGWSystemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateGWSystemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateGWSystemCmd::ElementSelection,NULL,NULL,(void*)1));

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);

}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateGWSystemCmd::ActionOne(void *data)
{
	// TODO: Define the action associated with the transition
	// ------------------------------------------------------

	return TRUE;
}

CATBoolean CMCreateGWSystemCmd::Init(void *data)
{
	_Panel->SetVisibility(CATDlgShow);

	return TRUE;
}

CATBoolean CMCreateGWSystemCmd::CheckGWSelect()
{
	//Check GW facther system if select
	if (pGWFatherOcc)
		return TRUE;
	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.nodeFatherNull");
	CUSCAAUtilService::ErrorMessage(Title, msg);
	return FALSE;
}

CATBoolean CMCreateGWSystemCmd::CheckInputCode(int code)
{
	CATDlgEditor *pInputEditor = _Panel->GetEditor(ID_InputGWCodeEditor);
	CATUnicodeString sInputGWCode = pInputEditor->GetText();

	if (sInputGWCode == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputCodeNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	else {
		int nChar = sInputGWCode.GetLengthInChar();
		if (nChar > 4 || nChar < 3) {
			CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
			CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputCodeError");
			CUSCAAUtilService::ErrorMessage(Title, msg);
			return FALSE;
		}
		else {
			if (nChar == 4 && !spPPRUtity.CheckCapitalChar(sInputGWCode.SubString(3, 1))){
				CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
				CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputFourCodeError");
				CUSCAAUtilService::ErrorMessage(Title, msg);
				return FALSE;
			}
			else if (!spPPRUtity.CheckNum(sInputGWCode.SubString(0, 3))) {
				CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
				CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputThreeCodeError");
				CUSCAAUtilService::ErrorMessage(Title, msg);
				return FALSE;
			}
		}
	}

	CATDlgEditor *pInputNameEditor = _Panel->GetEditor(ID_InputGWNameEditor);
	sInputGWName = pInputNameEditor->GetText();
	if (sInputGWName == "") {
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputGWTitleNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}


	CATDlgEditor *pInputEffEditor = _Panel->GetEditor(ID_InputEffEditor);
	sInputEffecivity = pInputEffEditor->GetText();
	if (sInputEffecivity != "" && !CUSCAAUtilService::CheckEffectivity(sInputEffecivity)) {
		
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.inputEffError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	//if ((code == 0) && (sApplyGWCode == sInputGWCode))
	//	return TRUE;

	//if (sInputGWExternalID == sInputGWCode)
	//{
	//	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
	//	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.uniqueIDError");
	//	CUSCAAUtilService::ErrorMessage(Title, msg);
	//	return TRUE;
	//}
	
	CATListPtrCATIPLMNavReference opilistIDComp;
	HRESULT hr = CUSCAAUtilService::GetObjReference(sInputGWCode, "", opilistIDComp, "CUS_GWSystemRef");   //CUS_GWSystemRef 
	int n_Size = opilistIDComp.Size();
	if (n_Size >= 1)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.uniqueIDError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}
	//else if (n_Size == 1) {
	//	PPRUtity spPPRUtity;
	//	CATIPLMNavInstance * opInstance = NULL;
	//	spPPRUtity.InsertExistSystem(pGWFatherRef, opilistIDComp[1], (CATBaseUnknown *&)opInstance);
	//}
	else {
		sInputGWExternalID = sInputGWCode;
		CreateDELGWSystem();
		if (code = 1)
			sApplyGWCode = sInputGWExternalID;
	}

	return TRUE;
}



HRESULT CMCreateGWSystemCmd::CreateDELGWSystem()
{
		

	CATIPLMNavInstance * spNewGWSystemInstance;
	HRESULT rc = spPPRUtity.CreateSubSystemOrOperation(TYPE_GW_Workplan,
		pGWFatherRef, spNewGWSystemInstance);

	if (spNewGWSystemInstance == NULL) {
		cout << "Failed to create operation under the system" << endl;
		return S_FALSE;
	}

	CATIPLMNavReference * spNewGWSystemRef = NULL;
	rc = spNewGWSystemInstance->GetReferenceInstanceOf(spNewGWSystemRef);
	if (spNewGWSystemRef == NULL)
	{
		cout << "Failed to Get new GW system Reference" << endl;
		return S_FALSE;
	}
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemRef,"PLM_ExternalID", sInputGWExternalID);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemRef, "CUS_Code", sInputGWExternalID);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemRef, "V_Name", sInputGWName);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemRef, "CUS_Title", sInputGWName);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemRef, "CUS_Eff", sInputEffecivity);

	//CATUnicodeString sInstanceName = GetObjectAttrValue(spNewGWSystemInstance, "PLM_ExternalID");
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGWSystemInstance, "PLM_ExternalID", sInputGWExternalID+".1");

	
	CATIPLMNavOccurrence * spNewGWSystemOccurrence;
	rc = spPPRUtity.GetOccFromSystemFather(pGWFatherOcc, spNewGWSystemInstance, spNewGWSystemOccurrence);
	if (spNewGWSystemOccurrence == NULL)
	{
		cout << "Failed to Get Occurrence from new create GW system" << endl;
		return S_FALSE;
	}

	rc = CUSCAAUtilService::CopyDictionariesModel(pGWFatherRef, (CATBaseUnknown*&)spNewGWSystemRef);
	if (rc != S_OK)
	{
		cout << "Failed to Copy model from father to GW" << endl;
	}

	//CUSCAAUtilService::SetSessionEffectity(spNewGWSystemInstance);

	// exit if MID not select
	if (pMIDComponentOcc != NULL) {
		DELIPPRSystemAuth_var hPPRSystemAuth;
		rc = ::GetPPRSystemAuth(hPPRSystemAuth);
		//Create scope
		rc = hPPRSystemAuth->CreateScope(spNewGWSystemOccurrence, pMIDComponentOcc);
	}

	CATAdpSaver saver;
	CATListPtrCATBaseUnknown listRootRef;
	listRootRef.Append(pGWFatherRef);

	rc = saver.Save(&listRootRef);
	if (rc != S_OK)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGWDlg", (CATString)"msg.SaveFailed");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return rc;
	}

	return rc;
}


CATBoolean CMCreateGWSystemCmd::OKAction(void *data)
{
	cout << "GWConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (!CheckGWSelect())
	{
		return FALSE;
	}
		
	//input code null or code is repeat
	if (!CheckInputCode(0))
		return FALSE;

	//CreateDELGWSystem();

	return TRUE;
}

CATBoolean CMCreateGWSystemCmd::ApplyAction(void *data)
{
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	if (!CheckGWSelect())
	{
		return FALSE;
	}

	if (!CheckInputCode(1))
		return FALSE;

	//CreateDELGWSystem();

	return FALSE;
}

CATBoolean CMCreateGWSystemCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}

CATBoolean CMCreateGWSystemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent -> GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))  
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

void CMCreateGWSystemCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_MBOMAssembly)    //CreateAssembly   PCCMemDELFmiFunctionReference  
	{
		pMIDComponentOcc = _pSelectedOccurrence;
		pMIDComponentRef = _pSelectedReference;
		CATDlgEditor *pMIDEditor = _Panel->GetEditor(ID_SelectMIDCompEditor);
		pMIDEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pMIDComponentRef, "V_Name"));

		CATIPLMNavOccurrence * tempNavOcc = NULL;
		_pSelectedOccurrence->GetFather(tempNavOcc);
		if (tempNavOcc != NULL)
		{
			tempNavOcc->GetRelatedReference(pMIDFatherCompRef);
		}

		_pSelectedOccurrence->GetRelatedInstance(pMIDCompInstance);
			
	}
	else if (sSelectObjectType == TYPE_Workplan)   //PCCMemDELLmiGeneralSystemReference   DELLmiGeneralSystemReference
	{
		pGWFatherOcc = _pSelectedOccurrence;
		pGWFatherRef = _pSelectedReference;
		CATDlgEditor *pGWFaEditor = _Panel->GetEditor(ID_SelectGWFatherEditor);
		pGWFaEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pGWFatherRef, "V_Name"));
	}


}



