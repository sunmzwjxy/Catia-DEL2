//===================================================================
// COPYRIGHT  2020/09/29
//===================================================================
// CMMBOMReportCmd.cpp
// Header definition of class CMMBOMReportCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/09/29 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMMBOMReportCmd.h"
#include "CUSCAAUtilService.h"
#include "PPRUtity.h"
#include "CAAUtility.h"

//#include <future>
#include <chrono>
#include <iostream>
#include <string>
#include <thread>
using namespace std;
//#include "..\..\..\Excel\mso.tlh"
//#include "..\..\..\Excel\vbe6ext.tlh"
//#include "..\..\..\Excel\excel.tlh"
//#import "C:\Program Files\Common Files\Microsoft Shared\OFFICE11\MSO.DLL" rename("RGB", "rgb") rename("DocumentProperties", "document_properties")
//#import "C:\Program Files\Common Files\Microsoft Shared\VBA\VBA6\VBE6EXT.OLB"
//#import "C:\Program Files\Microsoft Office\OFFICE11\EXCEL.EXE" rename("RGB", "rgb") rename("DialogBox", "dialog_box")

#include "CATApplicationFrame.h"
#include "CATCreateExternalObject.h"
CATCreateClass(CMMBOMReportCmd);

//-----------------------------------------------------------------------------
// CMMBOMReportCmd : constructor
//-----------------------------------------------------------------------------
CMMBOMReportCmd::CMMBOMReportCmd():
	CATStateCommand("CMMBOMReportCmd", CATDlgEngOneShot, CATCommandModeShared)
	, _OKAgent(NULL),
	_CancleAgent(NULL),
	_CloseAgent(NULL)
{
//
//TODO: Add the constructor code here
	_pDialogTransition = NULL;
	pSelectMBOMRef = NULL;

	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMMBOMReportDlg(pWnd, "MA Report");
	_Panel->Build();
	_Panel->SetFather(this);

//
}

//-----------------------------------------------------------------------------
// CMMBOMReportCmd : destructor
//-----------------------------------------------------------------------------

CMMBOMReportCmd::~CMMBOMReportCmd()
{
//
// TODO: Place code here.
	_pDialogTransition = NULL;
	pSelectMBOMRef = NULL;
//
}
void CMMBOMReportCmd::BuildGraph()
{
	// TODO: Define the StateChart
	// ---------------------------
	// Define the selection agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	//_ApplyAgent = new CATDialogAgent("Apply Agent");
	//_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	_CancleAgent = new CATDialogAgent("Cancle Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());
	// Define the selection agent 
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl
	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	//pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	_pDialogTransition = AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMMBOMReportCmd::ElementSelection, NULL, NULL, (void*)1));

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMMBOMReportCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMMBOMReportCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMMBOMReportCmd::CancelAction));

	DRECT rect;
	CATBoolean iAlreadyScaled = false;
	_Panel->GetRectDimensionsEx(&rect, iAlreadyScaled);
	rect.x = 800;
	rect.y = 400;
	_Panel->SetRectDimensionsEx(rect, iAlreadyScaled);

	_Panel->SetVisibility(CATDlgShow);
}

CATBoolean CMMBOMReportCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;

	int CaseAgent = CATPtrToINT32(data);

	// Check input data
	if (NULL != _pSelectAgent)
	{
		// Intialisation
		returnCode = TRUE;
		_pSelectedElement = NULL;
		// Get the selected Element
		CATPathElement * pPathElement = _pSelectAgent->GetValue();
		//pPathElement = _pSelectAgent->GetValue();
		if (NULL != pPathElement)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			//_pSelectedRepInstance = (CATIPLMNavRepInstance*)(pPathElement->FindElement(IID_CATIPLMNavRepInstance));
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence) {
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}
		_pSelectAgent->InitializeAcquisition();

		if (NULL != _pSelectedElement)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else  returnCode = FALSE;
	}

	return returnCode;
}

CATBoolean CMMBOMReportCmd::OKAction(void *data)
{
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (pSelectMBOMRef == NULL) {
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.selectNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return FALSE;
	}

	GenerateMBOMReport(pSelectMBOMRef);

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}
CATBoolean CMMBOMReportCmd::CancelAction(void *data)
{
	cout << "CMMBOMReportCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}
void CMMBOMReportCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);

	if (sSelectObjectType == TYPE_MBOMAssembly)
	{
		pSelectMBOMRef = _pSelectedReference;
		CATDlgEditor *pMIDEditor = _Panel->GetEditor(ID_SelectMAEditor);
		pMIDEditor->SetText(CUSCAAUtilService::GetObjectAttrValue(pSelectMBOMRef, "PLM_ExternalID"));
	}
}

#include "CATAdpPublicSecurityServices.h"
void CMMBOMReportCmd::GenerateMBOMReport(CATIPLMNavReference * ispMARef)
{
	CATUnicodeString sMBOMId= CUSCAAUtilService::GetObjectAttrValue(ispMARef, "PLM_ExternalID");
	CATUnicodeString sRevision= CUSCAAUtilService::GetObjectAttrValue(ispMARef, "revision");

	CATUnicodeString iServicePath = "/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/getMBOMReport";
	CATUnicodeString iData = TYPE_MBOMAssembly + "@@" + sMBOMId + "@@" + sRevision;
	//CATUnicodeString sServerUrl = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"ServerUrl");

	CATUnicodeString sServerUrl = CUSCAAUtilService::GetServerURL();

	//CUSCAAUtilService::RetrieveTxtFromDataSetup("ServerUrl", sServerUrl);
	if (sServerUrl.IsNull())
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.failedGetURL");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return;
	}
	CATUnicodeString iWebSite = sServerUrl + iServicePath;

	//CATUnicodeString iWebSite = "https://ifwe.3ds.com/3dspace/resource/CUSDELMIARestService/CUSDELMIAMBOMRestService/getMBOMReport";

	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("", oUserId, oOrganisationId, oProjectId, oRoleId);

	CATUnicodeString SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;

	std::thread asyncThread([SecurityContext,iWebSite,iData]() {

		CUSCAAUtilService::WebService(SecurityContext,iWebSite + "?objectString=" + iData);
	});

	asyncThread.detach();

	CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.Title");
	CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMMBOMReportDlg", (CATString)"msg.reportSuccess");
	CUSCAAUtilService::ErrorMessage(Title, msg);

	return;
}
