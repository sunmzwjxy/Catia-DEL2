//===================================================================
// COPYRIGHT Comac 2021/12/09
//===================================================================
// CUSCAAUtilService.cpp
// Header definition of class CUSCAAUtilService
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/12/09 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CUSCAAUtilService_H
#define CUSCAAUtilService_H

#include "DelmiaUtilities.h"

//#include "CUS_UtilFunc.h"
#include "CATBaseUnknown.h"
#include <iostream>
//#include <windows.h>
#include <string>
#include <wininet.h>
#include <regex> 
using namespace std;
#pragma comment(lib,"Wininet.lib")

//System 
#include "CATCommand.h"
#include "CATMsgCatalog.h"
//AfrFoundation     
#include "CATFrmEditor.h"
#include "CATApplicationFrame.h"
#include "CATAfrCommandHeader.h"

//VisualizationInterfaces 
#include "CATPathElement.h"
#include "CATIBuildPath.h"

//SGManager 
#include "CATHSO.h"

//ObjectModelerSystem 
#include "CATIAlias.h"

//Dialog 
#include "CATDlgNotify.h"

//KnowledgeInterfaces 
#include "CATICkeObject.h"
#include "CATCkeObjectAttrReadServices.h"
#include "CATCkeObjectAttrWriteServices.h"

//ObjectModelerBase 
#include "CATOmbLifeCycleRootsBag.h"


//CATPLMIntegrationUse 
#include "CATAdpPLMQueryServices.h"
#include "CATLISTP_CATAdpQueryResult.h"

//CATPLMIntegrationAccess 
#include "CATAdpIdentificationSet.h"
#include "CATListPtrCATIPLMComponent.h"

//CATPLMComponentInterfaces 
#include "CATPLMComponentInterfacesServices.h"

#include "CATIPLMComponent.h"
#include "CATAdpComponentsAssociationIterator.h"
#include "CATAdpOpenParameters.h"
#include "CATAdpOpener.h"
#include "CATAdpPLMComponentInfos.h"
#include "CATAdpPLMQueryAttributeSet.h"
#include "CATAdpPLMComponentsInfosIter.h"
#include "CATAdpPLMQueryFilter.h"
#include "CATAdpPLMComponentsInfos.h"
#include "CATAdpPLMExtendedQueryServices.h"
#include "CATIPLMNavEntity.h"
#include "CATAdpComponentData.h"

#include "CATCkePLMNavPublicServices.h"
#include "CATCkePLMNavSpecializationAccessPublicServices.h"
#include "CATCkePLMNavCustoAccessPublicServices.h"
#include "CATPLMTypeServices.h"

#include "CATIPLMAuthoringContextServices.h"

//CATPLMConfigUseItf 
#include "CATIConfiguration.h"
#include "CATIConfiguredEntity.h"
#include "CATConfigLoadingServices.h"
#include "CATIConfiguredEntityAuthoring.h"
#include "CATListPtrCATIConfiguration.h"
#include "CATListPtrCATIConfigFilterable.h"
#include "CATListPtrCATIConfigPLMEntity.h"
#include "CATListPtrCATIConfigDictionary.h"
#include "CATConfigXMLContentError.h"
#include "CATIConfigEffectivityExpression.h"
#include "CATIConfigPLMEntity.h"
#include "CATListPtrCATIConfigEffectivityExpression.h"
#include "CATListValCATConfigXMLExpressionStruct.h"
#include "CATConfigXMLExpressionStruct.h"
#include "CATConfigXMLExpressionServices.h"
#include "CATIConfigFilterableAuthoring.h"
#include "CATConfigExpressionFactory.h"

#include "CATIAdpType.h"
#include "CATIAdpPLMIdentificator.h"
#include "CATIPLMNavReference.h"
#include "CATIPLMNavOccurrence.h"
#include "CATIPLMNavInstance.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListPtrCATIAdpPLMIdentificator.h"
#include "CATListPtrCATIPLMNavReference.h"

#include "PLMICLGLibrary.h"
#include "CATStdIO.h"

//#include "CATIPartRequest.h"


//-----------------------------------------------------------------------
#define _RELEASE_PTR_(ptr) \
	if (NULL!=(ptr)) { (ptr)->Release(); (ptr)=NULL; }

#define MaxSize 1024

#define MaxCharSize 1024

//-----------------------------------------------------------------------

class ExportedByDelmiaUtilities CUSCAAUtilService
{
public:
// Standard constructors and destructors
// -------------------------------------
CUSCAAUtilService ();
virtual ~CUSCAAUtilService ();

static HRESULT HighlightElement(CATBaseUnknown * ipOccurrence, CATBaseUnknown * ipRepInstance, CATBaseUnknown * ipElement);

static HRESULT CreatePathElement(CATPathElement ** opPathElement, CATBaseUnknown  * ipOccurrence, CATBaseUnknown  * ipRepInstance, CATBaseUnknown  * ipElement);

static CATUnicodeString GetAliasName(CATBaseUnknown * ipBaseUnknown);

static CATUnicodeString GetObjectAttrValue(CATBaseUnknown * ipBaseUnknown, CATUnicodeString sAttrName);

static HRESULT SetObjectAttrString(CATBaseUnknown * ipBaseUnknown, CATUnicodeString sAttrName, CATUnicodeString sAttrValue);

//Int数字转字符串
static CATUnicodeString IntToStr(int i);

static CATUnicodeString GetAttributeValueFromList(CATBaseUnknown * ipBaseUnknown, CATUnicodeString attributeName);

static CATUnicodeString GetObjectType(CATBaseUnknown * ipBaseUnknown);

// fengy 2021.11.26 重写 添加了默认形参，确保可以支持搜索多个类型 + revision 匹配
static HRESULT GetObjIdentificator(CATUnicodeString iKeyId, CATUnicodeString iRevisionId,
	CATListPtrCATIAdpPLMIdentificator & olistSourceComponent, CATUnicodeString strCompType, CATUnicodeString iKey = "PLM_ExternalID");

static HRESULT GetObjReference(CATUnicodeString iKeyId, CATUnicodeString iRevisionId,
	CATListPtrCATIPLMNavReference  & olistReference, CATUnicodeString strCompType, CATUnicodeString iKey = "PLM_ExternalID");

static HRESULT QueryObjectFromDB(CATUnicodeString iObjType, CATUnicodeString iKeyId,
	CATUnicodeString iObjectrevision, CATListPtrCATIAdpPLMIdentificator & olistComponent, CATUnicodeString iKey = "PLM_ExternalID");

//static HRESULT QueryObjectFromDB(CATUnicodeString iObjType, CATUnicodeString iRevisionId,
//	CATUnicodeString iTitleId, CATListPtrCATIAdpPLMIdentificator & olistComponent);


static HRESULT RetrieveType(CATUnicodeString iObjType, CATIType_var & spoPLMType);

static CATUnicodeString GetObjectKnowledgeType(CATBaseUnknown * ipBaseUnknown);

static HRESULT CopyDictionariesModel(CATBaseUnknown * ipSourceReference, CATBaseUnknown * opTargetReference);

static void ErrorMessage(const CATUnicodeString& srErrorMessageTitle, const CATUnicodeString& srErrorMessageContent);

static void ReleasePointer(CATBaseUnknown * ptr);

static HRESULT RetrieveRootComp(CATIPLMNavReference *& opRootEditorRef);

static CATListOfCATUnicodeString GetListStringValue(CATUnicodeString sInputLine, CATUnicodeString splitString);

static void ShowComboValue(CATDlgCombo* ipCombo, CATListOfCATUnicodeString iValueList);

static void ShowComboValue(CATDlgCombo* ipCombo, CATUnicodeString sNlsFileName, CATUnicodeString sNlsValue, CATUnicodeString splitChar);

static CATUnicodeString GetSelectComboValue(CATDlgCombo* ipCombo);

static CATUnicodeString GetSelectComboValue(CATDlgCombo* ipCombo, CATUnicodeString sNlsFileName, CATUnicodeString sNlsKeyValue, CATUnicodeString splitChar);

static CATIPLMNavOccurrence * GetRootOcc(CATIPLMNavOccurrence * ipObjectOcc);

static HRESULT QueryDBExistID(CATUnicodeString iObjType, CATUnicodeString iExternalID, CATListOfCATUnicodeString & olistExistID);

// fengy 2021.11.25 重写 V_Name 搜索
static HRESULT QueryDBExistIDbyTitle(CATUnicodeString iObjType, CATUnicodeString iV_Name, CATListOfCATUnicodeString & olistExistID);

static HRESULT CopyObjectAttribute(CATIPLMNavReference * ipSourceObjectRef, CATIPLMNavReference * ipTargetObjectRef);

static void		StartBatchCmd(CATUnicodeString cmdLine);

static CATUnicodeString WebService(const CATUnicodeString security, const CATUnicodeString iUrl);

static CATUnicodeString WebService(const CATUnicodeString iServer, const CATUnicodeString iUrl, const CATUnicodeString iHttpType, const char *iData);

static CATUnicodeString CUSCAAUtilService::GetNameFormat(CATUnicodeString sExternalId);

static HRESULT RetrieveCatalog(CATOmbLifeCycleRootsBag &ioBag, PLMICLGLibrary *&opCLGLibrary);

static HRESULT RetrieveTxtFromDataSetup(const CATUnicodeString iKey, CATUnicodeString &ioValue);

static CATIConfigEffectivityExpression* GetConfigExpression(CATIPLMNavInstance * ipNavInstance, CATBaseUnknown * ipNavFatherReference);

static HRESULT CopyDicVariants(CATBaseUnknown * ipSourceInstance, CATBaseUnknown * ipSourceFatherReference,
	CATBaseUnknown *& opTargetInstance, CATBaseUnknown * opTargetFatherReference);

static HRESULT CAACallOOTBCmd(const char * iCmdHdr);

static HRESULT SetSessionEffectity(CATBaseUnknown * ipSourceInstance);

static bool CheckEffectivity(const CATUnicodeString iEffectivity);
//
// TODO: Add your methods for this class here.
//

private:
// Copy constructor and equal operator
// -----------------------------------
CUSCAAUtilService (CUSCAAUtilService &);
CUSCAAUtilService& operator=(CUSCAAUtilService&);

};

//-----------------------------------------------------------------------

#endif
